-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_1_12_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_PE_1_12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_12_empty_n : IN STD_LOGIC;
    fifo_A_PE_1_12_read : OUT STD_LOGIC;
    fifo_B_PE_1_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_1_1_empty_n : IN STD_LOGIC;
    fifo_B_PE_1_1_read : OUT STD_LOGIC;
    fifo_B_PE_2_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_PE_2_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_2_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_2_1_full_n : IN STD_LOGIC;
    fifo_B_PE_2_1_write : OUT STD_LOGIC;
    fifo_A_PE_1_2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_PE_1_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_2_full_n : IN STD_LOGIC;
    fifo_A_PE_1_2_write : OUT STD_LOGIC;
    fifo_C_drain_PE_1_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_C_drain_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_C_drain_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_C_drain_PE_1_1_full_n : IN STD_LOGIC;
    fifo_C_drain_PE_1_1_write : OUT STD_LOGIC );
end;


architecture behav of kernel0_PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln705_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal select_ln710_1_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln705_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_A_PE_1_12_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fifo_A_PE_1_2_blk_n : STD_LOGIC;
    signal fifo_B_PE_1_1_blk_n : STD_LOGIC;
    signal fifo_B_PE_2_1_blk_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln705_reg_879_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_879_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal u_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_1_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_2_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_2_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_3_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln710_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_1_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_928_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln710_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln710_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln712_fu_661_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln712_reg_937 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_C_addr_reg_942 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_942_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_load_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_958_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal local_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal p_cast_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln714_fu_665_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal c6_fu_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln712_1_fu_778_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln712_2_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c5_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln710_2_fu_627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten12_fu_132 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln710_3_fu_691_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal c2_fu_136 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln707_2_fu_563_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_fu_140 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln707_3_fu_705_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten72_fu_144 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln706_1_fu_719_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten115_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln705_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten115_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i99_not_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_not_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln706_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln714_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln705_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln712_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln707_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_3_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln705_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln705_1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln706_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln710_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_2_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln706_fu_443_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln706_2_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_3_fu_499_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmp_i_i99_not_mid1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_2_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln707_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln707_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln707_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_3_fu_571_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln707_1_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_not_mid1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_mid1_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln710_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln712_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln712_1_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln712_2_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln712_fu_653_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln712_1_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln710_1_fu_685_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln707_1_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln706_fu_713_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln710_fu_765_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln712_fu_772_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_789_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln712_fu_785_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_207_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_PE_local_C_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    local_C_U : component kernel0_PE_local_C_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_942_pp0_iter15_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => add_1_reg_968);

    fadd_32ns_32ns_32_5_full_dsp_1_U57 : component kernel0_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => local_C_load_reg_948,
        din1 => mul_reg_953,
        ce => grp_fu_207_ce,
        dout => grp_fu_207_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U58 : component kernel0_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_963,
        din1 => mul_1_reg_958_pp0_iter10_reg,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U59 : component kernel0_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U60 : component kernel0_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c2_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c2_fu_136 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c2_fu_136 <= select_ln707_2_fu_563_p3;
                end if;
            end if; 
        end if;
    end process;

    c5_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c5_fu_128 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c5_fu_128 <= select_ln710_2_fu_627_p3;
                end if;
            end if; 
        end if;
    end process;

    c6_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c6_fu_120 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    c6_fu_120 <= select_ln712_1_fu_778_p3;
                end if;
            end if; 
        end if;
    end process;

    c7_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c7_fu_116 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c7_fu_116 <= add_ln714_fu_665_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten115_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln705_fu_271_p2 = ap_const_lv1_0))) then 
                    indvar_flatten115_fu_148 <= add_ln705_fu_277_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten115_fu_148 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten12_fu_132 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten12_fu_132 <= select_ln710_3_fu_691_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten37_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten37_fu_140 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten37_fu_140 <= select_ln707_3_fu_705_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten72_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten72_fu_144 <= ap_const_lv15_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten72_fu_144 <= select_ln706_1_fu_719_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten_fu_124 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten_fu_124 <= select_ln712_2_fu_677_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_1_reg_968 <= grp_fu_211_p2;
                add_reg_963 <= grp_fu_207_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln705_reg_879_pp0_iter2_reg <= icmp_ln705_reg_879_pp0_iter1_reg;
                local_C_addr_reg_942 <= p_cast_fu_802_p1(6 - 1 downto 0);
                local_C_addr_reg_942_pp0_iter10_reg <= local_C_addr_reg_942_pp0_iter9_reg;
                local_C_addr_reg_942_pp0_iter11_reg <= local_C_addr_reg_942_pp0_iter10_reg;
                local_C_addr_reg_942_pp0_iter12_reg <= local_C_addr_reg_942_pp0_iter11_reg;
                local_C_addr_reg_942_pp0_iter13_reg <= local_C_addr_reg_942_pp0_iter12_reg;
                local_C_addr_reg_942_pp0_iter14_reg <= local_C_addr_reg_942_pp0_iter13_reg;
                local_C_addr_reg_942_pp0_iter15_reg <= local_C_addr_reg_942_pp0_iter14_reg;
                local_C_addr_reg_942_pp0_iter5_reg <= local_C_addr_reg_942;
                local_C_addr_reg_942_pp0_iter6_reg <= local_C_addr_reg_942_pp0_iter5_reg;
                local_C_addr_reg_942_pp0_iter7_reg <= local_C_addr_reg_942_pp0_iter6_reg;
                local_C_addr_reg_942_pp0_iter8_reg <= local_C_addr_reg_942_pp0_iter7_reg;
                local_C_addr_reg_942_pp0_iter9_reg <= local_C_addr_reg_942_pp0_iter8_reg;
                mul_1_reg_958 <= grp_fu_219_p2;
                mul_1_reg_958_pp0_iter10_reg <= mul_1_reg_958_pp0_iter9_reg;
                mul_1_reg_958_pp0_iter6_reg <= mul_1_reg_958;
                mul_1_reg_958_pp0_iter7_reg <= mul_1_reg_958_pp0_iter6_reg;
                mul_1_reg_958_pp0_iter8_reg <= mul_1_reg_958_pp0_iter7_reg;
                mul_1_reg_958_pp0_iter9_reg <= mul_1_reg_958_pp0_iter8_reg;
                mul_reg_953 <= grp_fu_215_p2;
                select_ln710_1_reg_928_pp0_iter10_reg <= select_ln710_1_reg_928_pp0_iter9_reg;
                select_ln710_1_reg_928_pp0_iter11_reg <= select_ln710_1_reg_928_pp0_iter10_reg;
                select_ln710_1_reg_928_pp0_iter12_reg <= select_ln710_1_reg_928_pp0_iter11_reg;
                select_ln710_1_reg_928_pp0_iter13_reg <= select_ln710_1_reg_928_pp0_iter12_reg;
                select_ln710_1_reg_928_pp0_iter14_reg <= select_ln710_1_reg_928_pp0_iter13_reg;
                select_ln710_1_reg_928_pp0_iter15_reg <= select_ln710_1_reg_928_pp0_iter14_reg;
                select_ln710_1_reg_928_pp0_iter4_reg <= select_ln710_1_reg_928;
                select_ln710_1_reg_928_pp0_iter5_reg <= select_ln710_1_reg_928_pp0_iter4_reg;
                select_ln710_1_reg_928_pp0_iter6_reg <= select_ln710_1_reg_928_pp0_iter5_reg;
                select_ln710_1_reg_928_pp0_iter7_reg <= select_ln710_1_reg_928_pp0_iter6_reg;
                select_ln710_1_reg_928_pp0_iter8_reg <= select_ln710_1_reg_928_pp0_iter7_reg;
                select_ln710_1_reg_928_pp0_iter9_reg <= select_ln710_1_reg_928_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln710_reg_932 <= and_ln710_fu_621_p2;
                or_ln710_1_reg_923 <= or_ln710_1_fu_583_p2;
                select_ln710_1_reg_928 <= select_ln710_1_fu_601_p3;
                trunc_ln712_reg_937 <= trunc_ln712_fu_661_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln705_reg_879 <= icmp_ln705_fu_271_p2;
                icmp_ln705_reg_879_pp0_iter1_reg <= icmp_ln705_reg_879;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                local_C_load_reg_948 <= local_C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                u_1_reg_888 <= fifo_A_PE_1_12_dout(63 downto 32);
                u_2_reg_893 <= u_2_fu_302_p1;
                u_3_reg_898 <= fifo_B_PE_1_1_dout(63 downto 32);
                u_reg_883 <= u_fu_288_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln705_fu_277_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten115_load) + unsigned(ap_const_lv16_1));
    add_ln706_fu_713_p2 <= std_logic_vector(unsigned(indvar_flatten72_fu_144) + unsigned(ap_const_lv15_1));
    add_ln707_1_fu_699_p2 <= std_logic_vector(unsigned(indvar_flatten37_fu_140) + unsigned(ap_const_lv13_1));
    add_ln710_1_fu_685_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_132) + unsigned(ap_const_lv11_1));
    add_ln712_1_fu_671_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_124) + unsigned(ap_const_lv8_1));
    add_ln712_fu_772_p2 <= std_logic_vector(unsigned(select_ln710_fu_765_p3) + unsigned(ap_const_lv4_1));
    add_ln714_fu_665_p2 <= std_logic_vector(unsigned(select_ln712_fu_653_p3) + unsigned(ap_const_lv4_1));
    and_ln705_1_fu_413_p2 <= (xor_ln705_fu_389_p2 and icmp_ln712_fu_407_p2);
    and_ln705_2_fu_487_p2 <= (xor_ln705_fu_389_p2 and icmp_ln710_fu_419_p2);
    and_ln705_3_fu_431_p2 <= (xor_ln705_fu_389_p2 and icmp_ln707_fu_425_p2);
    and_ln705_fu_401_p2 <= (xor_ln705_fu_389_p2 and icmp_ln714_fu_395_p2);
    and_ln706_1_fu_481_p2 <= (or_ln706_3_fu_469_p2 and and_ln705_1_fu_413_p2);
    and_ln706_2_fu_493_p2 <= (or_ln706_3_fu_469_p2 and and_ln705_2_fu_487_p2);
    and_ln706_fu_475_p2 <= (or_ln706_3_fu_469_p2 and and_ln705_fu_401_p2);
    and_ln707_1_fu_557_p2 <= (xor_ln707_fu_545_p2 and and_ln706_1_fu_481_p2);
    and_ln707_fu_551_p2 <= (xor_ln707_fu_545_p2 and and_ln706_fu_475_p2);
    and_ln710_fu_621_p2 <= (or_ln710_2_fu_615_p2 and and_ln707_fu_551_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_1_12_empty_n, icmp_ln705_reg_879, fifo_B_PE_1_1_empty_n, fifo_B_PE_2_1_full_n, fifo_A_PE_1_2_full_n, fifo_C_drain_PE_1_1_full_n, select_ln710_1_reg_928_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_1_1_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_1_empty_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_12_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_2_full_n = ap_const_logic_0)) or ((fifo_B_PE_2_1_full_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_1_12_empty_n, icmp_ln705_reg_879, fifo_B_PE_1_1_empty_n, fifo_B_PE_2_1_full_n, fifo_A_PE_1_2_full_n, fifo_C_drain_PE_1_1_full_n, select_ln710_1_reg_928_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_1_1_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_1_empty_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_12_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_2_full_n = ap_const_logic_0)) or ((fifo_B_PE_2_1_full_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_1_12_empty_n, icmp_ln705_reg_879, fifo_B_PE_1_1_empty_n, fifo_B_PE_2_1_full_n, fifo_A_PE_1_2_full_n, fifo_C_drain_PE_1_1_full_n, select_ln710_1_reg_928_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_1_1_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_1_empty_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_12_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_2_full_n = ap_const_logic_0)) or ((fifo_B_PE_2_1_full_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter16_assign_proc : process(fifo_C_drain_PE_1_1_full_n, select_ln710_1_reg_928_pp0_iter15_reg)
    begin
                ap_block_state17_pp0_stage0_iter16 <= ((select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_1_1_full_n = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(fifo_A_PE_1_12_empty_n, icmp_ln705_reg_879, fifo_B_PE_1_1_empty_n, fifo_B_PE_2_1_full_n, fifo_A_PE_1_2_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((fifo_B_PE_1_1_empty_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_12_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_879 = ap_const_lv1_0) and (fifo_A_PE_1_2_full_n = ap_const_logic_0)) or ((fifo_B_PE_2_1_full_n = ap_const_logic_0) and (icmp_ln705_reg_879 = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln705_fu_271_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln705_fu_271_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln705_reg_879_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln705_reg_879_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten115_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten115_fu_148)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten115_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten115_load <= indvar_flatten115_fu_148;
        end if; 
    end process;

    brmerge_fu_362_p2 <= (cmp_i_i_not_fu_356_p2 or cmp_i_i99_not_fu_350_p2);
    brmerge_mid1_fu_595_p2 <= (select_ln707_1_fu_531_p3 or cmp_i_i_not_mid1_fu_589_p2);
    c2_3_fu_499_p2 <= std_logic_vector(unsigned(select_ln706_fu_443_p3) + unsigned(ap_const_lv3_1));
    c5_3_fu_571_p2 <= std_logic_vector(unsigned(select_ln707_fu_517_p3) + unsigned(ap_const_lv4_1));
    cmp_i_i99_not_fu_350_p2 <= "0" when (c2_fu_136 = ap_const_lv3_3) else "1";
    cmp_i_i99_not_mid1_fu_525_p2 <= "0" when (c2_3_fu_499_p2 = ap_const_lv3_3) else "1";
    cmp_i_i_not_fu_356_p2 <= "0" when (c5_fu_128 = ap_const_lv4_7) else "1";
    cmp_i_i_not_mid1_fu_589_p2 <= "0" when (c5_3_fu_571_p2 = ap_const_lv4_7) else "1";
    empty_fu_796_p2 <= std_logic_vector(unsigned(tmp_fu_789_p3) + unsigned(zext_ln712_fu_785_p1));

    fifo_A_PE_1_12_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_A_PE_1_12_empty_n, icmp_ln705_reg_879, ap_block_pp0_stage0)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_A_PE_1_12_blk_n <= fifo_A_PE_1_12_empty_n;
        else 
            fifo_A_PE_1_12_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_PE_1_12_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_PE_1_12_read <= ap_const_logic_1;
        else 
            fifo_A_PE_1_12_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_1_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, fifo_A_PE_1_2_full_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_A_PE_1_2_blk_n <= fifo_A_PE_1_2_full_n;
        else 
            fifo_A_PE_1_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_1_2_din <= fifo_A_PE_1_12_dout;

    fifo_A_PE_1_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_PE_1_2_write <= ap_const_logic_1;
        else 
            fifo_A_PE_1_2_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_1_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, fifo_B_PE_1_1_empty_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_B_PE_1_1_blk_n <= fifo_B_PE_1_1_empty_n;
        else 
            fifo_B_PE_1_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_PE_1_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_PE_1_1_read <= ap_const_logic_1;
        else 
            fifo_B_PE_1_1_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_2_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, fifo_B_PE_2_1_full_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_B_PE_2_1_blk_n <= fifo_B_PE_2_1_full_n;
        else 
            fifo_B_PE_2_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_2_1_din <= fifo_B_PE_1_1_dout;

    fifo_B_PE_2_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_879, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_879 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_PE_2_1_write <= ap_const_logic_1;
        else 
            fifo_B_PE_2_1_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_1_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter16, fifo_C_drain_PE_1_1_full_n, select_ln710_1_reg_928_pp0_iter15_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0))) then 
            fifo_C_drain_PE_1_1_blk_n <= fifo_C_drain_PE_1_1_full_n;
        else 
            fifo_C_drain_PE_1_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_PE_1_1_din <= add_1_reg_968;

    fifo_C_drain_PE_1_1_write_assign_proc : process(ap_enable_reg_pp0_iter16, select_ln710_1_reg_928_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln710_1_reg_928_pp0_iter15_reg = ap_const_lv1_0))) then 
            fifo_C_drain_PE_1_1_write <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_1_1_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_207_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_207_ce <= ap_const_logic_1;
        else 
            grp_fu_207_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_211_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_211_ce <= ap_const_logic_1;
        else 
            grp_fu_211_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_215_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_215_ce <= ap_const_logic_1;
        else 
            grp_fu_215_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_215_p0 <= u_reg_883;
    grp_fu_215_p1 <= u_2_reg_893;

    grp_fu_219_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_p0 <= u_1_reg_888;
    grp_fu_219_p1 <= u_3_reg_898;
    icmp_ln705_fu_271_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten115_load = ap_const_lv16_8000) else "0";
    icmp_ln706_fu_371_p2 <= "1" when (indvar_flatten72_fu_144 = ap_const_lv15_2000) else "0";
    icmp_ln707_fu_425_p2 <= "1" when (indvar_flatten37_fu_140 = ap_const_lv13_800) else "0";
    icmp_ln710_fu_419_p2 <= "1" when (indvar_flatten12_fu_132 = ap_const_lv11_200) else "0";
    icmp_ln712_fu_407_p2 <= "1" when (indvar_flatten_fu_124 = ap_const_lv8_40) else "0";
    icmp_ln714_fu_395_p2 <= "1" when (c7_fu_116 = ap_const_lv4_8) else "0";
    local_C_address0 <= p_cast_fu_802_p1(6 - 1 downto 0);

    local_C_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln705_1_fu_383_p2 <= (icmp_ln706_fu_371_p2 or brmerge_fu_362_p2);
    or_ln705_fu_377_p2 <= (icmp_ln706_fu_371_p2 or cmp_i_i99_not_fu_350_p2);
    or_ln706_1_fu_451_p2 <= (or_ln705_fu_377_p2 or and_ln705_3_fu_431_p2);
    or_ln706_2_fu_457_p2 <= (or_ln705_1_fu_383_p2 or and_ln705_3_fu_431_p2);
    or_ln706_3_fu_469_p2 <= (xor_ln706_fu_463_p2 or icmp_ln706_fu_371_p2);
    or_ln706_fu_437_p2 <= (icmp_ln706_fu_371_p2 or and_ln705_3_fu_431_p2);
    or_ln707_1_fu_511_p2 <= (or_ln707_fu_505_p2 or icmp_ln706_fu_371_p2);
    or_ln707_2_fu_539_p2 <= (or_ln706_2_fu_457_p2 or and_ln706_2_fu_493_p2);
    or_ln707_fu_505_p2 <= (and_ln706_2_fu_493_p2 or and_ln705_3_fu_431_p2);
    or_ln710_1_fu_583_p2 <= (or_ln710_fu_577_p2 or or_ln706_fu_437_p2);
    or_ln710_2_fu_615_p2 <= (xor_ln710_fu_609_p2 or and_ln706_2_fu_493_p2);
    or_ln710_fu_577_p2 <= (and_ln707_1_fu_557_p2 or and_ln706_2_fu_493_p2);
    or_ln712_1_fu_641_p2 <= (or_ln712_fu_635_p2 or or_ln707_fu_505_p2);
    or_ln712_2_fu_647_p2 <= (or_ln712_1_fu_641_p2 or icmp_ln706_fu_371_p2);
    or_ln712_fu_635_p2 <= (and_ln710_fu_621_p2 or and_ln707_1_fu_557_p2);
    p_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_796_p2),64));
    select_ln706_1_fu_719_p3 <= 
        ap_const_lv15_1 when (icmp_ln706_fu_371_p2(0) = '1') else 
        add_ln706_fu_713_p2;
    select_ln706_fu_443_p3 <= 
        ap_const_lv3_0 when (or_ln706_fu_437_p2(0) = '1') else 
        c2_fu_136;
    select_ln707_1_fu_531_p3 <= 
        cmp_i_i99_not_mid1_fu_525_p2 when (and_ln706_2_fu_493_p2(0) = '1') else 
        or_ln706_1_fu_451_p2;
    select_ln707_2_fu_563_p3 <= 
        c2_3_fu_499_p2 when (and_ln706_2_fu_493_p2(0) = '1') else 
        select_ln706_fu_443_p3;
    select_ln707_3_fu_705_p3 <= 
        ap_const_lv13_1 when (or_ln706_fu_437_p2(0) = '1') else 
        add_ln707_1_fu_699_p2;
    select_ln707_fu_517_p3 <= 
        ap_const_lv4_0 when (or_ln707_1_fu_511_p2(0) = '1') else 
        c5_fu_128;
    select_ln710_1_fu_601_p3 <= 
        brmerge_mid1_fu_595_p2 when (and_ln707_1_fu_557_p2(0) = '1') else 
        or_ln707_2_fu_539_p2;
    select_ln710_2_fu_627_p3 <= 
        c5_3_fu_571_p2 when (and_ln707_1_fu_557_p2(0) = '1') else 
        select_ln707_fu_517_p3;
    select_ln710_3_fu_691_p3 <= 
        ap_const_lv11_1 when (or_ln707_1_fu_511_p2(0) = '1') else 
        add_ln710_1_fu_685_p2;
    select_ln710_fu_765_p3 <= 
        ap_const_lv4_0 when (or_ln710_1_reg_923(0) = '1') else 
        c6_fu_120;
    select_ln712_1_fu_778_p3 <= 
        add_ln712_fu_772_p2 when (and_ln710_reg_932(0) = '1') else 
        select_ln710_fu_765_p3;
    select_ln712_2_fu_677_p3 <= 
        ap_const_lv8_1 when (or_ln710_1_fu_583_p2(0) = '1') else 
        add_ln712_1_fu_671_p2;
    select_ln712_fu_653_p3 <= 
        ap_const_lv4_0 when (or_ln712_2_fu_647_p2(0) = '1') else 
        c7_fu_116;
    tmp_fu_789_p3 <= (trunc_ln712_reg_937 & ap_const_lv3_0);
    trunc_ln712_fu_661_p1 <= select_ln712_fu_653_p3(3 - 1 downto 0);
    u_2_fu_302_p1 <= fifo_B_PE_1_1_dout(32 - 1 downto 0);
    u_fu_288_p1 <= fifo_A_PE_1_12_dout(32 - 1 downto 0);
    xor_ln705_fu_389_p2 <= (icmp_ln706_fu_371_p2 xor ap_const_lv1_1);
    xor_ln706_fu_463_p2 <= (icmp_ln707_fu_425_p2 xor ap_const_lv1_1);
    xor_ln707_fu_545_p2 <= (ap_const_lv1_1 xor and_ln706_2_fu_493_p2);
    xor_ln710_fu_609_p2 <= (ap_const_lv1_1 xor and_ln706_1_fu_481_p2);
    zext_ln712_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln712_1_fu_778_p3),6));
end behav;
