-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_B_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_407_1_V is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_B_PE_0_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_B_PE_0_1_full_n : IN STD_LOGIC;
    fifo_B_PE_0_1_write : OUT STD_LOGIC;
    local_B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_ce0 : OUT STD_LOGIC;
    local_B_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of kernel0_B_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_407_1_V is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln407_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_609_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln407_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_B_PE_0_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_604 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_604_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln409_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln409_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_142_fu_307_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_142_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_142_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_2_fu_311_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_2_reg_631 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_2_reg_631_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln411_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln411_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i52_mid1_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_1_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c7_load : STD_LOGIC_VECTOR (3 downto 0);
    signal c6_fu_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln409_1_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln409_2_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c5_fu_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln407_4_fu_337_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_c5_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten35_fu_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln407_1_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten35_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln407_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln407_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln411_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln411_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln409_1_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_140_fu_405_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal div_i_i_cast_fu_402_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_141_fu_409_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_1_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_fu_420_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln409_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_143_fu_446_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_1_cast_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_144_fu_450_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid_fu_502_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_477_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid1_fu_534_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln407_3_fu_523_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_222 : BOOLEAN;
    signal ap_condition_255 : BOOLEAN;
    signal ap_condition_292 : BOOLEAN;
    signal ap_condition_131 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_mux_8_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_8_3_64_1_1_U42 : component kernel0_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_s_fu_477_p1,
        din1 => tmp_s_fu_477_p2,
        din2 => tmp_s_fu_477_p3,
        din3 => tmp_s_fu_477_p4,
        din4 => tmp_s_fu_477_p5,
        din5 => tmp_s_fu_477_p6,
        din6 => tmp_s_fu_477_p7,
        din7 => tmp_s_fu_477_p8,
        din8 => empty_reg_604_pp0_iter1_reg,
        dout => tmp_s_fu_477_p10);

    mux_8_3_64_1_1_U43 : component kernel0_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_mid_fu_502_p1,
        din1 => tmp_mid_fu_502_p2,
        din2 => tmp_mid_fu_502_p3,
        din3 => tmp_mid_fu_502_p4,
        din4 => tmp_mid_fu_502_p5,
        din5 => tmp_mid_fu_502_p6,
        din6 => tmp_mid_fu_502_p7,
        din7 => tmp_mid_fu_502_p8,
        din8 => empty_142_reg_626_pp0_iter1_reg,
        dout => tmp_mid_fu_502_p10);

    mux_8_3_64_1_1_U44 : component kernel0_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_mid1_fu_534_p1,
        din1 => tmp_mid1_fu_534_p2,
        din2 => tmp_mid1_fu_534_p3,
        din3 => tmp_mid1_fu_534_p4,
        din4 => tmp_mid1_fu_534_p5,
        din5 => tmp_mid1_fu_534_p6,
        din6 => tmp_mid1_fu_534_p7,
        din7 => tmp_mid1_fu_534_p8,
        din8 => select_ln407_2_reg_631_pp0_iter1_reg,
        dout => tmp_mid1_fu_534_p10);

    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    c5_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln407_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c5_fu_112 <= select_ln407_4_fu_337_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c5_fu_112 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    c6_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c6_fu_104 <= ap_const_lv4_0;
                elsif (((icmp_ln407_reg_609 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c6_fu_104 <= select_ln409_1_fu_461_p3;
                end if;
            end if; 
        end if;
    end process;

    c7_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln407_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c7_fu_100 <= c7_1_fu_357_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c7_fu_100 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten35_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln407_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten35_fu_116 <= add_ln407_1_fu_275_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten35_fu_116 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln407_fu_269_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= select_ln409_2_fu_371_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln407_fu_269_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln407_reg_640 <= and_ln407_fu_331_p2;
                empty_142_reg_626 <= empty_142_fu_307_p1;
                icmp_ln409_reg_613 <= icmp_ln409_fu_293_p2;
                icmp_ln411_reg_636 <= icmp_ln411_fu_325_p2;
                select_ln407_2_reg_631 <= select_ln407_2_fu_311_p3;
                tmp_4_reg_620 <= add_ln407_fu_287_p2(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln407_reg_640_pp0_iter1_reg <= and_ln407_reg_640;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                empty_142_reg_626_pp0_iter1_reg <= empty_142_reg_626;
                empty_reg_604 <= empty_fu_265_p1;
                empty_reg_604_pp0_iter1_reg <= empty_reg_604;
                icmp_ln407_reg_609 <= icmp_ln407_fu_269_p2;
                icmp_ln407_reg_609_pp0_iter1_reg <= icmp_ln407_reg_609;
                icmp_ln409_reg_613_pp0_iter1_reg <= icmp_ln409_reg_613;
                select_ln407_2_reg_631_pp0_iter1_reg <= select_ln407_2_reg_631;
                tmp_reg_598 <= ap_sig_allocacmp_c5_4(3 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln407_1_fu_275_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten35_load) + unsigned(ap_const_lv10_1));
    add_ln407_fu_287_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c5_4) + unsigned(ap_const_lv4_1));
    add_ln409_1_fu_365_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln409_fu_440_p2 <= std_logic_vector(unsigned(select_ln407_fu_420_p3) + unsigned(ap_const_lv4_1));
    add_ln411_fu_345_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c7_load) + unsigned(ap_const_lv4_1));
    and_ln407_fu_331_p2 <= (xor_ln407_fu_319_p2 and icmp_ln411_fu_325_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, fifo_B_PE_0_1_full_n, icmp_ln407_reg_609_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, fifo_B_PE_0_1_full_n, icmp_ln407_reg_609_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, fifo_B_PE_0_1_full_n, icmp_ln407_reg_609_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(fifo_B_PE_0_1_full_n, icmp_ln407_reg_609_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (fifo_B_PE_0_1_full_n = ap_const_logic_0));
    end process;


    ap_condition_131_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_131 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_222_assign_proc : process(icmp_ln407_reg_609, empty_reg_604, icmp_ln409_reg_613, icmp_ln411_reg_636, and_ln407_reg_640)
    begin
                ap_condition_222 <= (((((((((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_6) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0)) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_7) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_5) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_4) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_3) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) 
    or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_2) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_0) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0)));
    end process;


    ap_condition_255_assign_proc : process(icmp_ln407_reg_609, icmp_ln409_reg_613, empty_142_reg_626, and_ln407_reg_640)
    begin
                ap_condition_255 <= (((((((((empty_142_reg_626 = ap_const_lv3_6) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0)) or ((empty_142_reg_626 = ap_const_lv3_7) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_5) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_4) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_3) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_2) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 
    = ap_const_lv3_1) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_0) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0)));
    end process;


    ap_condition_292_assign_proc : process(icmp_ln407_reg_609, icmp_ln409_reg_613, select_ln407_2_reg_631, icmp_ln411_reg_636, and_ln407_reg_640)
    begin
                ap_condition_292 <= (((((((((select_ln407_2_reg_631 = ap_const_lv3_6) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1)) or ((select_ln407_2_reg_631 = ap_const_lv3_7) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_5) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_4) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_3) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) 
    and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_2) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_1) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_0) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln407_fu_269_p2)
    begin
        if (((icmp_ln407_fu_269_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c5_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c5_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c5_4 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c5_4 <= c5_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_c7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c7_fu_100, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c7_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c7_load <= c7_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten35_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten35_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten35_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten35_load <= indvar_flatten35_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;

    c7_1_fu_357_p3 <= 
        ap_const_lv4_1 when (or_ln411_fu_351_p2(0) = '1') else 
        add_ln411_fu_345_p2;
    conv_i52_mid1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_620),64));
    div_i_i_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_598),3));
    empty_140_fu_405_p1 <= c6_fu_104(3 - 1 downto 0);
    empty_141_fu_409_p2 <= std_logic_vector(unsigned(empty_140_fu_405_p1) + unsigned(div_i_i_cast_fu_402_p1));
    empty_142_fu_307_p1 <= add_ln407_fu_287_p2(3 - 1 downto 0);
    empty_143_fu_446_p1 <= add_ln409_fu_440_p2(3 - 1 downto 0);
    empty_144_fu_450_p2 <= std_logic_vector(unsigned(empty_143_fu_446_p1) + unsigned(select_ln407_1_cast_fu_436_p1));
    empty_fu_265_p1 <= ap_sig_allocacmp_c5_4(3 - 1 downto 0);

    fifo_B_PE_0_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, fifo_B_PE_0_1_full_n, icmp_ln407_reg_609_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo_B_PE_0_1_blk_n <= fifo_B_PE_0_1_full_n;
        else 
            fifo_B_PE_0_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_0_1_din <= 
        tmp_mid1_fu_534_p10 when (and_ln407_reg_640_pp0_iter1_reg(0) = '1') else 
        select_ln407_3_fu_523_p3;

    fifo_B_PE_0_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln407_reg_609_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_609_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo_B_PE_0_1_write <= ap_const_logic_1;
        else 
            fifo_B_PE_0_1_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln407_fu_269_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten35_load = ap_const_lv10_200) else "0";
    icmp_ln409_fu_293_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_40) else "0";
    icmp_ln411_fu_325_p2 <= "1" when (ap_sig_allocacmp_c7_load = ap_const_lv4_8) else "0";

    local_B_address0_assign_proc : process(p_cast_fu_415_p1, conv_i52_mid1_fu_427_p1, p_cast1_fu_456_p1, ap_condition_222, ap_condition_255, ap_condition_292, ap_condition_131)
    begin
        if ((ap_const_boolean_1 = ap_condition_131)) then
            if ((ap_const_boolean_1 = ap_condition_292)) then 
                local_B_address0 <= p_cast1_fu_456_p1(3 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_255)) then 
                local_B_address0 <= conv_i52_mid1_fu_427_p1(3 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_222)) then 
                local_B_address0 <= p_cast_fu_415_p1(3 - 1 downto 0);
            else 
                local_B_address0 <= "XXX";
            end if;
        else 
            local_B_address0 <= "XXX";
        end if; 
    end process;


    local_B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln407_reg_609, ap_block_pp0_stage0_11001, empty_reg_604, icmp_ln409_reg_613, empty_142_reg_626, select_ln407_2_reg_631, icmp_ln411_reg_636, and_ln407_reg_640)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((((((((select_ln407_2_reg_631 = ap_const_lv3_6) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1)) or ((select_ln407_2_reg_631 = ap_const_lv3_7) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_5) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_4) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 
    = ap_const_lv3_3) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_2) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_1) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1))) or ((select_ln407_2_reg_631 = ap_const_lv3_0) and (icmp_ln409_reg_613 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_1)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((((((((empty_142_reg_626 = ap_const_lv3_6) 
    and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0)) or ((empty_142_reg_626 = ap_const_lv3_7) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_5) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_4) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_3) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_2) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_1) and (icmp_ln409_reg_613 
    = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0))) or ((empty_142_reg_626 = ap_const_lv3_0) and (icmp_ln409_reg_613 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((((((((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_6) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0)) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_7) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_5) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 
    = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_4) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_3) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_2) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_1) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 = ap_const_lv1_0))) or ((icmp_ln409_reg_613 = ap_const_lv1_0) and (empty_reg_604 = ap_const_lv3_0) and (ap_const_lv1_0 = and_ln407_reg_640) and (icmp_ln407_reg_609 = ap_const_lv1_0) and (icmp_ln411_reg_636 
    = ap_const_lv1_0)))))) then 
            local_B_ce0 <= ap_const_logic_1;
        else 
            local_B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln411_fu_351_p2 <= (icmp_ln409_fu_293_p2 or and_ln407_fu_331_p2);
    p_cast1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_144_fu_450_p2),64));
    p_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_141_fu_409_p2),64));
    select_ln407_1_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln407_1_fu_431_p3),3));
    select_ln407_1_fu_431_p3 <= 
        tmp_4_reg_620 when (icmp_ln409_reg_613(0) = '1') else 
        tmp_reg_598;
    select_ln407_2_fu_311_p3 <= 
        empty_142_fu_307_p1 when (icmp_ln409_fu_293_p2(0) = '1') else 
        empty_fu_265_p1;
    select_ln407_3_fu_523_p3 <= 
        tmp_mid_fu_502_p10 when (icmp_ln409_reg_613_pp0_iter1_reg(0) = '1') else 
        tmp_s_fu_477_p10;
    select_ln407_4_fu_337_p3 <= 
        add_ln407_fu_287_p2 when (icmp_ln409_fu_293_p2(0) = '1') else 
        ap_sig_allocacmp_c5_4;
    select_ln407_fu_420_p3 <= 
        ap_const_lv4_0 when (icmp_ln409_reg_613(0) = '1') else 
        c6_fu_104;
    select_ln409_1_fu_461_p3 <= 
        add_ln409_fu_440_p2 when (and_ln407_reg_640(0) = '1') else 
        select_ln407_fu_420_p3;
    select_ln409_2_fu_371_p3 <= 
        ap_const_lv8_1 when (icmp_ln409_fu_293_p2(0) = '1') else 
        add_ln409_1_fu_365_p2;
    tmp_mid1_fu_534_p1 <= local_B_q0(64 - 1 downto 0);
    tmp_mid1_fu_534_p2 <= local_B_q0(127 downto 64);
    tmp_mid1_fu_534_p3 <= local_B_q0(191 downto 128);
    tmp_mid1_fu_534_p4 <= local_B_q0(255 downto 192);
    tmp_mid1_fu_534_p5 <= local_B_q0(319 downto 256);
    tmp_mid1_fu_534_p6 <= local_B_q0(383 downto 320);
    tmp_mid1_fu_534_p7 <= local_B_q0(447 downto 384);
    tmp_mid1_fu_534_p8 <= local_B_q0(511 downto 448);
    tmp_mid_fu_502_p1 <= local_B_q0(64 - 1 downto 0);
    tmp_mid_fu_502_p2 <= local_B_q0(127 downto 64);
    tmp_mid_fu_502_p3 <= local_B_q0(191 downto 128);
    tmp_mid_fu_502_p4 <= local_B_q0(255 downto 192);
    tmp_mid_fu_502_p5 <= local_B_q0(319 downto 256);
    tmp_mid_fu_502_p6 <= local_B_q0(383 downto 320);
    tmp_mid_fu_502_p7 <= local_B_q0(447 downto 384);
    tmp_mid_fu_502_p8 <= local_B_q0(511 downto 448);
    tmp_s_fu_477_p1 <= local_B_q0(64 - 1 downto 0);
    tmp_s_fu_477_p2 <= local_B_q0(127 downto 64);
    tmp_s_fu_477_p3 <= local_B_q0(191 downto 128);
    tmp_s_fu_477_p4 <= local_B_q0(255 downto 192);
    tmp_s_fu_477_p5 <= local_B_q0(319 downto 256);
    tmp_s_fu_477_p6 <= local_B_q0(383 downto 320);
    tmp_s_fu_477_p7 <= local_B_q0(447 downto 384);
    tmp_s_fu_477_p8 <= local_B_q0(511 downto 448);
    xor_ln407_fu_319_p2 <= (icmp_ln409_fu_293_p2 xor ap_const_lv1_1);
end behav;
