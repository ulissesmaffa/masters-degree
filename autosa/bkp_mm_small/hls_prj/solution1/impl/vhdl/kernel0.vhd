-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_C_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_C_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_A_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_A_AWREADY : IN STD_LOGIC;
    m_axi_gmem_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_WVALID : OUT STD_LOGIC;
    m_axi_gmem_A_WREADY : IN STD_LOGIC;
    m_axi_gmem_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH-1 downto 0);
    m_axi_gmem_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_A_WLAST : OUT STD_LOGIC;
    m_axi_gmem_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_A_ARREADY : IN STD_LOGIC;
    m_axi_gmem_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_RVALID : IN STD_LOGIC;
    m_axi_gmem_A_RREADY : OUT STD_LOGIC;
    m_axi_gmem_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_DATA_WIDTH-1 downto 0);
    m_axi_gmem_A_RLAST : IN STD_LOGIC;
    m_axi_gmem_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_BVALID : IN STD_LOGIC;
    m_axi_gmem_A_BREADY : OUT STD_LOGIC;
    m_axi_gmem_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_ID_WIDTH-1 downto 0);
    m_axi_gmem_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_A_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_B_AWREADY : IN STD_LOGIC;
    m_axi_gmem_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_WVALID : OUT STD_LOGIC;
    m_axi_gmem_B_WREADY : IN STD_LOGIC;
    m_axi_gmem_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH-1 downto 0);
    m_axi_gmem_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_B_WLAST : OUT STD_LOGIC;
    m_axi_gmem_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_B_ARREADY : IN STD_LOGIC;
    m_axi_gmem_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_RVALID : IN STD_LOGIC;
    m_axi_gmem_B_RREADY : OUT STD_LOGIC;
    m_axi_gmem_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_DATA_WIDTH-1 downto 0);
    m_axi_gmem_B_RLAST : IN STD_LOGIC;
    m_axi_gmem_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BVALID : IN STD_LOGIC;
    m_axi_gmem_B_BREADY : OUT STD_LOGIC;
    m_axi_gmem_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_ID_WIDTH-1 downto 0);
    m_axi_gmem_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_B_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_C_AWREADY : IN STD_LOGIC;
    m_axi_gmem_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_WVALID : OUT STD_LOGIC;
    m_axi_gmem_C_WREADY : IN STD_LOGIC;
    m_axi_gmem_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH-1 downto 0);
    m_axi_gmem_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_C_WLAST : OUT STD_LOGIC;
    m_axi_gmem_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_C_ARREADY : IN STD_LOGIC;
    m_axi_gmem_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_RVALID : IN STD_LOGIC;
    m_axi_gmem_C_RREADY : OUT STD_LOGIC;
    m_axi_gmem_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_DATA_WIDTH-1 downto 0);
    m_axi_gmem_C_RLAST : IN STD_LOGIC;
    m_axi_gmem_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BVALID : IN STD_LOGIC;
    m_axi_gmem_C_BREADY : OUT STD_LOGIC;
    m_axi_gmem_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_ID_WIDTH-1 downto 0);
    m_axi_gmem_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_C_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of kernel0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel0_kernel0,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=32801,HLS_SYN_TPT=32787,HLS_SYN_MEM=174,HLS_SYN_DSP=0,HLS_SYN_FF=29216,HLS_SYN_LUT=27120,HLS_VERSION=2023_1_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal C : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_A_AWREADY : STD_LOGIC;
    signal gmem_A_WREADY : STD_LOGIC;
    signal gmem_A_ARREADY : STD_LOGIC;
    signal gmem_A_RVALID : STD_LOGIC;
    signal gmem_A_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_A_RLAST : STD_LOGIC;
    signal gmem_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_A_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_A_BVALID : STD_LOGIC;
    signal gmem_B_AWREADY : STD_LOGIC;
    signal gmem_B_WREADY : STD_LOGIC;
    signal gmem_B_ARREADY : STD_LOGIC;
    signal gmem_B_RVALID : STD_LOGIC;
    signal gmem_B_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_B_RLAST : STD_LOGIC;
    signal gmem_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_B_BVALID : STD_LOGIC;
    signal gmem_C_AWREADY : STD_LOGIC;
    signal gmem_C_WREADY : STD_LOGIC;
    signal gmem_C_ARREADY : STD_LOGIC;
    signal gmem_C_RVALID : STD_LOGIC;
    signal gmem_C_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_C_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_C_BVALID : STD_LOGIC;
    signal gmem_C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_C_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_C_c_write : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_ap_start : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_ap_done : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_ap_continue : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_ap_idle : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWVALID : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WVALID : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WLAST : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARVALID : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_RREADY : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_m_axi_gmem_A_BREADY : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_din : STD_LOGIC_VECTOR (511 downto 0);
    signal A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_write : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_start_out : STD_LOGIC;
    signal A_IO_L3_in_serialize_U0_start_write : STD_LOGIC;
    signal A_IO_L3_in_U0_ap_start : STD_LOGIC;
    signal A_IO_L3_in_U0_ap_done : STD_LOGIC;
    signal A_IO_L3_in_U0_ap_continue : STD_LOGIC;
    signal A_IO_L3_in_U0_ap_idle : STD_LOGIC;
    signal A_IO_L3_in_U0_ap_ready : STD_LOGIC;
    signal A_IO_L3_in_U0_fifo_A_A_IO_L3_in_serialize_read : STD_LOGIC;
    signal A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_din : STD_LOGIC_VECTOR (511 downto 0);
    signal A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_write : STD_LOGIC;
    signal A_IO_L3_in_U0_start_out : STD_LOGIC;
    signal A_IO_L3_in_U0_start_write : STD_LOGIC;
    signal A_IO_L2_in_U0_ap_start : STD_LOGIC;
    signal A_IO_L2_in_U0_start_full_n : STD_LOGIC;
    signal A_IO_L2_in_U0_ap_done : STD_LOGIC;
    signal A_IO_L2_in_U0_ap_continue : STD_LOGIC;
    signal A_IO_L2_in_U0_ap_idle : STD_LOGIC;
    signal A_IO_L2_in_U0_ap_ready : STD_LOGIC;
    signal A_IO_L2_in_U0_start_out : STD_LOGIC;
    signal A_IO_L2_in_U0_start_write : STD_LOGIC;
    signal A_IO_L2_in_U0_fifo_A_A_IO_L2_in_0_read : STD_LOGIC;
    signal A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_din : STD_LOGIC_VECTOR (511 downto 0);
    signal A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_write : STD_LOGIC;
    signal A_IO_L2_in_U0_fifo_A_PE_0_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal A_IO_L2_in_U0_fifo_A_PE_0_0_write : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_ap_start : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_ap_done : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_ap_continue : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_ap_idle : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_ap_ready : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_start_out : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_start_write : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_fifo_A_A_IO_L2_in_1_read : STD_LOGIC;
    signal A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_write : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_ap_start : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_ap_done : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_ap_continue : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_ap_idle : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWVALID : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WVALID : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WLAST : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARVALID : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_RREADY : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_m_axi_gmem_B_BREADY : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_din : STD_LOGIC_VECTOR (511 downto 0);
    signal B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_write : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_start_out : STD_LOGIC;
    signal B_IO_L3_in_serialize_U0_start_write : STD_LOGIC;
    signal B_IO_L3_in_U0_ap_start : STD_LOGIC;
    signal B_IO_L3_in_U0_ap_done : STD_LOGIC;
    signal B_IO_L3_in_U0_ap_continue : STD_LOGIC;
    signal B_IO_L3_in_U0_ap_idle : STD_LOGIC;
    signal B_IO_L3_in_U0_ap_ready : STD_LOGIC;
    signal B_IO_L3_in_U0_fifo_B_B_IO_L3_in_serialize_read : STD_LOGIC;
    signal B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_din : STD_LOGIC_VECTOR (511 downto 0);
    signal B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_write : STD_LOGIC;
    signal B_IO_L3_in_U0_start_out : STD_LOGIC;
    signal B_IO_L3_in_U0_start_write : STD_LOGIC;
    signal B_IO_L2_in_U0_ap_start : STD_LOGIC;
    signal B_IO_L2_in_U0_ap_done : STD_LOGIC;
    signal B_IO_L2_in_U0_ap_continue : STD_LOGIC;
    signal B_IO_L2_in_U0_ap_idle : STD_LOGIC;
    signal B_IO_L2_in_U0_ap_ready : STD_LOGIC;
    signal B_IO_L2_in_U0_start_out : STD_LOGIC;
    signal B_IO_L2_in_U0_start_write : STD_LOGIC;
    signal B_IO_L2_in_U0_fifo_B_B_IO_L2_in_0_read : STD_LOGIC;
    signal B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_din : STD_LOGIC_VECTOR (511 downto 0);
    signal B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_write : STD_LOGIC;
    signal B_IO_L2_in_U0_fifo_B_PE_0_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal B_IO_L2_in_U0_fifo_B_PE_0_0_write : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_ap_start : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_ap_done : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_ap_continue : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_ap_idle : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_ap_ready : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_start_out : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_start_write : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_fifo_B_B_IO_L2_in_1_read : STD_LOGIC;
    signal B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_write : STD_LOGIC;
    signal PE_wrapper_U0_ap_start : STD_LOGIC;
    signal PE_wrapper_U0_ap_done : STD_LOGIC;
    signal PE_wrapper_U0_ap_continue : STD_LOGIC;
    signal PE_wrapper_U0_ap_idle : STD_LOGIC;
    signal PE_wrapper_U0_ap_ready : STD_LOGIC;
    signal PE_wrapper_U0_start_out : STD_LOGIC;
    signal PE_wrapper_U0_start_write : STD_LOGIC;
    signal PE_wrapper_U0_fifo_A_PE_0_0_read : STD_LOGIC;
    signal PE_wrapper_U0_fifo_A_PE_0_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_U0_fifo_A_PE_0_1_write : STD_LOGIC;
    signal PE_wrapper_U0_fifo_B_PE_0_0_read : STD_LOGIC;
    signal PE_wrapper_U0_fifo_B_PE_1_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_U0_fifo_B_PE_1_0_write : STD_LOGIC;
    signal PE_wrapper_U0_fifo_C_drain_PE_0_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_wrapper_U0_fifo_C_drain_PE_0_0_write : STD_LOGIC;
    signal PE_wrapper_3_U0_ap_start : STD_LOGIC;
    signal PE_wrapper_3_U0_start_full_n : STD_LOGIC;
    signal PE_wrapper_3_U0_ap_done : STD_LOGIC;
    signal PE_wrapper_3_U0_ap_continue : STD_LOGIC;
    signal PE_wrapper_3_U0_ap_idle : STD_LOGIC;
    signal PE_wrapper_3_U0_ap_ready : STD_LOGIC;
    signal PE_wrapper_3_U0_start_out : STD_LOGIC;
    signal PE_wrapper_3_U0_start_write : STD_LOGIC;
    signal PE_wrapper_3_U0_fifo_A_PE_0_1_read : STD_LOGIC;
    signal PE_wrapper_3_U0_fifo_A_PE_0_2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_3_U0_fifo_A_PE_0_2_write : STD_LOGIC;
    signal PE_wrapper_3_U0_fifo_B_PE_0_1_read : STD_LOGIC;
    signal PE_wrapper_3_U0_fifo_B_PE_1_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_3_U0_fifo_B_PE_1_1_write : STD_LOGIC;
    signal PE_wrapper_3_U0_fifo_C_drain_PE_0_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_wrapper_3_U0_fifo_C_drain_PE_0_1_write : STD_LOGIC;
    signal PE_wrapper_4_U0_ap_start : STD_LOGIC;
    signal PE_wrapper_4_U0_start_full_n : STD_LOGIC;
    signal PE_wrapper_4_U0_ap_done : STD_LOGIC;
    signal PE_wrapper_4_U0_ap_continue : STD_LOGIC;
    signal PE_wrapper_4_U0_ap_idle : STD_LOGIC;
    signal PE_wrapper_4_U0_ap_ready : STD_LOGIC;
    signal PE_wrapper_4_U0_start_out : STD_LOGIC;
    signal PE_wrapper_4_U0_start_write : STD_LOGIC;
    signal PE_wrapper_4_U0_fifo_A_PE_1_0_read : STD_LOGIC;
    signal PE_wrapper_4_U0_fifo_A_PE_1_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_4_U0_fifo_A_PE_1_1_write : STD_LOGIC;
    signal PE_wrapper_4_U0_fifo_B_PE_1_0_read : STD_LOGIC;
    signal PE_wrapper_4_U0_fifo_B_PE_2_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_4_U0_fifo_B_PE_2_0_write : STD_LOGIC;
    signal PE_wrapper_4_U0_fifo_C_drain_PE_1_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_wrapper_4_U0_fifo_C_drain_PE_1_0_write : STD_LOGIC;
    signal PE_wrapper_5_U0_ap_start : STD_LOGIC;
    signal PE_wrapper_5_U0_start_full_n : STD_LOGIC;
    signal PE_wrapper_5_U0_ap_done : STD_LOGIC;
    signal PE_wrapper_5_U0_ap_continue : STD_LOGIC;
    signal PE_wrapper_5_U0_ap_idle : STD_LOGIC;
    signal PE_wrapper_5_U0_ap_ready : STD_LOGIC;
    signal PE_wrapper_5_U0_start_out : STD_LOGIC;
    signal PE_wrapper_5_U0_start_write : STD_LOGIC;
    signal PE_wrapper_5_U0_fifo_A_PE_1_1_read : STD_LOGIC;
    signal PE_wrapper_5_U0_fifo_A_PE_1_2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_5_U0_fifo_A_PE_1_2_write : STD_LOGIC;
    signal PE_wrapper_5_U0_fifo_B_PE_1_1_read : STD_LOGIC;
    signal PE_wrapper_5_U0_fifo_B_PE_2_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal PE_wrapper_5_U0_fifo_B_PE_2_1_write : STD_LOGIC;
    signal PE_wrapper_5_U0_fifo_C_drain_PE_1_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_wrapper_5_U0_fifo_C_drain_PE_1_1_write : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_ap_start : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_ap_done : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_ap_continue : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_ap_idle : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_ap_ready : STD_LOGIC;
    signal A_PE_dummy_in_1_U0_fifo_A_PE_0_2_read : STD_LOGIC;
    signal A_PE_dummy_in_U0_ap_start : STD_LOGIC;
    signal A_PE_dummy_in_U0_ap_done : STD_LOGIC;
    signal A_PE_dummy_in_U0_ap_continue : STD_LOGIC;
    signal A_PE_dummy_in_U0_ap_idle : STD_LOGIC;
    signal A_PE_dummy_in_U0_ap_ready : STD_LOGIC;
    signal A_PE_dummy_in_U0_fifo_A_PE_1_2_read : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_ap_start : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_ap_done : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_ap_continue : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_ap_idle : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_ap_ready : STD_LOGIC;
    signal B_PE_dummy_in_2_U0_fifo_B_PE_2_0_read : STD_LOGIC;
    signal B_PE_dummy_in_U0_ap_start : STD_LOGIC;
    signal B_PE_dummy_in_U0_ap_done : STD_LOGIC;
    signal B_PE_dummy_in_U0_ap_continue : STD_LOGIC;
    signal B_PE_dummy_in_U0_ap_idle : STD_LOGIC;
    signal B_PE_dummy_in_U0_ap_ready : STD_LOGIC;
    signal B_PE_dummy_in_U0_fifo_B_PE_2_1_read : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_write : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_PE_1_0_read : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_start_out : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_start_write : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_read : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_write : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_PE_0_0_read : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_write : STD_LOGIC;
    signal C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_PE_1_1_read : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_start_out : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_start_write : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_read : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_write : STD_LOGIC;
    signal C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_PE_0_1_read : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_read : STD_LOGIC;
    signal C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_write : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_start_out : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_start_write : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_1_read : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_write : STD_LOGIC;
    signal C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_read : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_read : STD_LOGIC;
    signal C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_din : STD_LOGIC_VECTOR (127 downto 0);
    signal C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_write : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_ap_start : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_ap_done : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_ap_continue : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_ap_idle : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_ap_ready : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_read : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWVALID : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WVALID : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WLAST : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARVALID : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_RREADY : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_BREADY : STD_LOGIC;
    signal C_drain_IO_L3_out_serialize_U0_C_read : STD_LOGIC;
    signal C_c_full_n : STD_LOGIC;
    signal C_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal C_c_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal C_c_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal C_c_empty_n : STD_LOGIC;
    signal fifo_A_A_IO_L3_in_serialize_full_n : STD_LOGIC;
    signal fifo_A_A_IO_L3_in_serialize_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_A_A_IO_L3_in_serialize_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L3_in_serialize_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L3_in_serialize_empty_n : STD_LOGIC;
    signal fifo_A_A_IO_L2_in_0_full_n : STD_LOGIC;
    signal fifo_A_A_IO_L2_in_0_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_A_A_IO_L2_in_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L2_in_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L2_in_0_empty_n : STD_LOGIC;
    signal fifo_A_A_IO_L2_in_1_full_n : STD_LOGIC;
    signal fifo_A_A_IO_L2_in_1_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_A_A_IO_L2_in_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L2_in_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_A_IO_L2_in_1_empty_n : STD_LOGIC;
    signal fifo_A_PE_0_0_full_n : STD_LOGIC;
    signal fifo_A_PE_0_0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_0_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_0_empty_n : STD_LOGIC;
    signal fifo_A_PE_1_0_full_n : STD_LOGIC;
    signal fifo_A_PE_1_0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_1_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_0_empty_n : STD_LOGIC;
    signal fifo_B_B_IO_L3_in_serialize_full_n : STD_LOGIC;
    signal fifo_B_B_IO_L3_in_serialize_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_B_B_IO_L3_in_serialize_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L3_in_serialize_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L3_in_serialize_empty_n : STD_LOGIC;
    signal fifo_B_B_IO_L2_in_0_full_n : STD_LOGIC;
    signal fifo_B_B_IO_L2_in_0_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_B_B_IO_L2_in_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L2_in_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L2_in_0_empty_n : STD_LOGIC;
    signal fifo_B_B_IO_L2_in_1_full_n : STD_LOGIC;
    signal fifo_B_B_IO_L2_in_1_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal fifo_B_B_IO_L2_in_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L2_in_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_B_IO_L2_in_1_empty_n : STD_LOGIC;
    signal fifo_B_PE_0_0_full_n : STD_LOGIC;
    signal fifo_B_PE_0_0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_0_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_0_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_0_0_empty_n : STD_LOGIC;
    signal fifo_B_PE_0_1_full_n : STD_LOGIC;
    signal fifo_B_PE_0_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_0_1_empty_n : STD_LOGIC;
    signal fifo_A_PE_0_1_full_n : STD_LOGIC;
    signal fifo_A_PE_0_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_1_empty_n : STD_LOGIC;
    signal fifo_B_PE_1_0_full_n : STD_LOGIC;
    signal fifo_B_PE_1_0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_1_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_1_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_1_0_empty_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_0_full_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_C_drain_PE_0_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_0_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_0_0_empty_n : STD_LOGIC;
    signal fifo_A_PE_0_2_full_n : STD_LOGIC;
    signal fifo_A_PE_0_2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_0_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_0_2_empty_n : STD_LOGIC;
    signal fifo_B_PE_1_1_full_n : STD_LOGIC;
    signal fifo_B_PE_1_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_1_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_1_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_1_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_1_full_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_C_drain_PE_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_0_1_empty_n : STD_LOGIC;
    signal fifo_A_PE_1_1_full_n : STD_LOGIC;
    signal fifo_A_PE_1_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_1_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_1_empty_n : STD_LOGIC;
    signal fifo_B_PE_2_0_full_n : STD_LOGIC;
    signal fifo_B_PE_2_0_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_2_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_2_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_2_0_empty_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_0_full_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_C_drain_PE_1_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_1_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_1_0_empty_n : STD_LOGIC;
    signal fifo_A_PE_1_2_full_n : STD_LOGIC;
    signal fifo_A_PE_1_2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_A_PE_1_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_A_PE_1_2_empty_n : STD_LOGIC;
    signal fifo_B_PE_2_1_full_n : STD_LOGIC;
    signal fifo_B_PE_2_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_B_PE_2_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_2_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_B_PE_2_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_1_full_n : STD_LOGIC;
    signal fifo_C_drain_PE_1_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_C_drain_PE_1_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_1_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_PE_1_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_0_1_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_0_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_0_0_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_0_0_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_0_0_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_1_1_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_1_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_1_0_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L1_out_1_0_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L1_out_1_0_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L2_out_1_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L2_out_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_1_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L2_out_0_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L2_out_0_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L2_out_0_empty_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_full_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_A_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_B_IO_L3_in_serialize_U0_ap_ready : STD_LOGIC;
    signal start_for_C_drain_IO_L3_out_serialize_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L3_out_serialize_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L3_out_serialize_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L3_out_serialize_U0_empty_n : STD_LOGIC;
    signal start_for_A_IO_L3_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L3_in_U0_full_n : STD_LOGIC;
    signal start_for_A_IO_L3_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L3_in_U0_empty_n : STD_LOGIC;
    signal start_for_A_IO_L2_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L2_in_U0_full_n : STD_LOGIC;
    signal start_for_A_IO_L2_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L2_in_U0_empty_n : STD_LOGIC;
    signal start_for_A_IO_L2_in_boundary_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L2_in_boundary_U0_full_n : STD_LOGIC;
    signal start_for_A_IO_L2_in_boundary_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_IO_L2_in_boundary_U0_empty_n : STD_LOGIC;
    signal start_for_PE_wrapper_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_U0_full_n : STD_LOGIC;
    signal start_for_PE_wrapper_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_U0_empty_n : STD_LOGIC;
    signal start_for_PE_wrapper_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_4_U0_full_n : STD_LOGIC;
    signal start_for_PE_wrapper_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_4_U0_empty_n : STD_LOGIC;
    signal start_for_B_IO_L3_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L3_in_U0_full_n : STD_LOGIC;
    signal start_for_B_IO_L3_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L3_in_U0_empty_n : STD_LOGIC;
    signal start_for_B_IO_L2_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L2_in_U0_full_n : STD_LOGIC;
    signal start_for_B_IO_L2_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L2_in_U0_empty_n : STD_LOGIC;
    signal start_for_B_IO_L2_in_boundary_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L2_in_boundary_U0_full_n : STD_LOGIC;
    signal start_for_B_IO_L2_in_boundary_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_IO_L2_in_boundary_U0_empty_n : STD_LOGIC;
    signal start_for_PE_wrapper_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_3_U0_full_n : STD_LOGIC;
    signal start_for_PE_wrapper_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_3_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_wrapper_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_wrapper_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_wrapper_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_wrapper_U0_empty_n : STD_LOGIC;
    signal start_for_PE_wrapper_5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_5_U0_full_n : STD_LOGIC;
    signal start_for_PE_wrapper_5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PE_wrapper_5_U0_empty_n : STD_LOGIC;
    signal start_for_A_PE_dummy_in_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_PE_dummy_in_1_U0_full_n : STD_LOGIC;
    signal start_for_A_PE_dummy_in_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_PE_dummy_in_1_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_wrapper_7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_wrapper_7_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_wrapper_7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_wrapper_7_U0_empty_n : STD_LOGIC;
    signal start_for_B_PE_dummy_in_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_PE_dummy_in_2_U0_full_n : STD_LOGIC;
    signal start_for_B_PE_dummy_in_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_PE_dummy_in_2_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_U0_empty_n : STD_LOGIC;
    signal start_for_A_PE_dummy_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_PE_dummy_in_U0_full_n : STD_LOGIC;
    signal start_for_A_PE_dummy_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_A_PE_dummy_in_U0_empty_n : STD_LOGIC;
    signal start_for_B_PE_dummy_in_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_PE_dummy_in_U0_full_n : STD_LOGIC;
    signal start_for_B_PE_dummy_in_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_B_PE_dummy_in_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L2_out_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L2_out_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L2_out_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L2_out_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L2_out_boundary_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L2_out_boundary_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L2_out_boundary_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L2_out_boundary_U0_empty_n : STD_LOGIC;
    signal start_for_C_drain_IO_L3_out_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L3_out_U0_full_n : STD_LOGIC;
    signal start_for_C_drain_IO_L3_out_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_C_drain_IO_L3_out_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        C : IN STD_LOGIC_VECTOR (63 downto 0);
        C_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        C_c_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        C_c_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        C_c_full_n : IN STD_LOGIC;
        C_c_write : OUT STD_LOGIC );
    end component;


    component kernel0_A_IO_L3_in_serialize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_A_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_A_AWREADY : IN STD_LOGIC;
        m_axi_gmem_A_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_WVALID : OUT STD_LOGIC;
        m_axi_gmem_A_WREADY : IN STD_LOGIC;
        m_axi_gmem_A_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_A_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_WLAST : OUT STD_LOGIC;
        m_axi_gmem_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_A_ARREADY : IN STD_LOGIC;
        m_axi_gmem_A_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RVALID : IN STD_LOGIC;
        m_axi_gmem_A_RREADY : OUT STD_LOGIC;
        m_axi_gmem_A_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_A_RLAST : IN STD_LOGIC;
        m_axi_gmem_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_BVALID : IN STD_LOGIC;
        m_axi_gmem_A_BREADY : OUT STD_LOGIC;
        m_axi_gmem_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fifo_A_A_IO_L3_in_serialize_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L3_in_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L3_in_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L3_in_serialize_full_n : IN STD_LOGIC;
        fifo_A_A_IO_L3_in_serialize_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        A : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel0_A_IO_L3_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_A_A_IO_L3_in_serialize_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L3_in_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L3_in_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L3_in_serialize_empty_n : IN STD_LOGIC;
        fifo_A_A_IO_L3_in_serialize_read : OUT STD_LOGIC;
        fifo_A_A_IO_L2_in_0_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L2_in_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_0_full_n : IN STD_LOGIC;
        fifo_A_A_IO_L2_in_0_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component kernel0_A_IO_L2_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_A_IO_L2_in_0_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L2_in_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_0_empty_n : IN STD_LOGIC;
        fifo_A_A_IO_L2_in_0_read : OUT STD_LOGIC;
        fifo_A_A_IO_L2_in_1_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L2_in_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_1_full_n : IN STD_LOGIC;
        fifo_A_A_IO_L2_in_1_write : OUT STD_LOGIC;
        fifo_A_PE_0_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_0_full_n : IN STD_LOGIC;
        fifo_A_PE_0_0_write : OUT STD_LOGIC );
    end component;


    component kernel0_A_IO_L2_in_boundary IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_A_IO_L2_in_1_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_A_A_IO_L2_in_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_A_IO_L2_in_1_empty_n : IN STD_LOGIC;
        fifo_A_A_IO_L2_in_1_read : OUT STD_LOGIC;
        fifo_A_PE_1_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_0_full_n : IN STD_LOGIC;
        fifo_A_PE_1_0_write : OUT STD_LOGIC );
    end component;


    component kernel0_B_IO_L3_in_serialize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_B_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_B_AWREADY : IN STD_LOGIC;
        m_axi_gmem_B_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_WVALID : OUT STD_LOGIC;
        m_axi_gmem_B_WREADY : IN STD_LOGIC;
        m_axi_gmem_B_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_B_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_WLAST : OUT STD_LOGIC;
        m_axi_gmem_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_B_ARREADY : IN STD_LOGIC;
        m_axi_gmem_B_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RVALID : IN STD_LOGIC;
        m_axi_gmem_B_RREADY : OUT STD_LOGIC;
        m_axi_gmem_B_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_B_RLAST : IN STD_LOGIC;
        m_axi_gmem_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_BVALID : IN STD_LOGIC;
        m_axi_gmem_B_BREADY : OUT STD_LOGIC;
        m_axi_gmem_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fifo_B_B_IO_L3_in_serialize_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L3_in_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L3_in_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L3_in_serialize_full_n : IN STD_LOGIC;
        fifo_B_B_IO_L3_in_serialize_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        B : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel0_B_IO_L3_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_B_B_IO_L3_in_serialize_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L3_in_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L3_in_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L3_in_serialize_empty_n : IN STD_LOGIC;
        fifo_B_B_IO_L3_in_serialize_read : OUT STD_LOGIC;
        fifo_B_B_IO_L2_in_0_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L2_in_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_0_full_n : IN STD_LOGIC;
        fifo_B_B_IO_L2_in_0_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component kernel0_B_IO_L2_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_B_B_IO_L2_in_0_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L2_in_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_0_empty_n : IN STD_LOGIC;
        fifo_B_B_IO_L2_in_0_read : OUT STD_LOGIC;
        fifo_B_B_IO_L2_in_1_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L2_in_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_1_full_n : IN STD_LOGIC;
        fifo_B_B_IO_L2_in_1_write : OUT STD_LOGIC;
        fifo_B_PE_0_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_0_full_n : IN STD_LOGIC;
        fifo_B_PE_0_0_write : OUT STD_LOGIC );
    end component;


    component kernel0_B_IO_L2_in_boundary IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_B_B_IO_L2_in_1_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        fifo_B_B_IO_L2_in_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_B_IO_L2_in_1_empty_n : IN STD_LOGIC;
        fifo_B_B_IO_L2_in_1_read : OUT STD_LOGIC;
        fifo_B_PE_0_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_1_full_n : IN STD_LOGIC;
        fifo_B_PE_0_1_write : OUT STD_LOGIC );
    end component;


    component kernel0_PE_wrapper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_PE_0_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_0_empty_n : IN STD_LOGIC;
        fifo_A_PE_0_0_read : OUT STD_LOGIC;
        fifo_A_PE_0_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_1_full_n : IN STD_LOGIC;
        fifo_A_PE_0_1_write : OUT STD_LOGIC;
        fifo_B_PE_0_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_0_empty_n : IN STD_LOGIC;
        fifo_B_PE_0_0_read : OUT STD_LOGIC;
        fifo_B_PE_1_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_0_full_n : IN STD_LOGIC;
        fifo_B_PE_1_0_write : OUT STD_LOGIC;
        fifo_C_drain_PE_0_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_0_full_n : IN STD_LOGIC;
        fifo_C_drain_PE_0_0_write : OUT STD_LOGIC );
    end component;


    component kernel0_PE_wrapper_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_PE_0_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_1_empty_n : IN STD_LOGIC;
        fifo_A_PE_0_1_read : OUT STD_LOGIC;
        fifo_A_PE_0_2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_2_full_n : IN STD_LOGIC;
        fifo_A_PE_0_2_write : OUT STD_LOGIC;
        fifo_B_PE_0_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_0_1_empty_n : IN STD_LOGIC;
        fifo_B_PE_0_1_read : OUT STD_LOGIC;
        fifo_B_PE_1_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_1_full_n : IN STD_LOGIC;
        fifo_B_PE_1_1_write : OUT STD_LOGIC;
        fifo_C_drain_PE_0_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_1_full_n : IN STD_LOGIC;
        fifo_C_drain_PE_0_1_write : OUT STD_LOGIC );
    end component;


    component kernel0_PE_wrapper_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_PE_1_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_0_empty_n : IN STD_LOGIC;
        fifo_A_PE_1_0_read : OUT STD_LOGIC;
        fifo_A_PE_1_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_1_full_n : IN STD_LOGIC;
        fifo_A_PE_1_1_write : OUT STD_LOGIC;
        fifo_B_PE_1_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_0_empty_n : IN STD_LOGIC;
        fifo_B_PE_1_0_read : OUT STD_LOGIC;
        fifo_B_PE_2_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_2_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_0_full_n : IN STD_LOGIC;
        fifo_B_PE_2_0_write : OUT STD_LOGIC;
        fifo_C_drain_PE_1_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_0_full_n : IN STD_LOGIC;
        fifo_C_drain_PE_1_0_write : OUT STD_LOGIC );
    end component;


    component kernel0_PE_wrapper_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_A_PE_1_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_1_empty_n : IN STD_LOGIC;
        fifo_A_PE_1_1_read : OUT STD_LOGIC;
        fifo_A_PE_1_2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_2_full_n : IN STD_LOGIC;
        fifo_A_PE_1_2_write : OUT STD_LOGIC;
        fifo_B_PE_1_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_1_1_empty_n : IN STD_LOGIC;
        fifo_B_PE_1_1_read : OUT STD_LOGIC;
        fifo_B_PE_2_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_2_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_1_full_n : IN STD_LOGIC;
        fifo_B_PE_2_1_write : OUT STD_LOGIC;
        fifo_C_drain_PE_1_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_1_full_n : IN STD_LOGIC;
        fifo_C_drain_PE_1_1_write : OUT STD_LOGIC );
    end component;


    component kernel0_A_PE_dummy_in_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_A_PE_0_2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_0_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_0_2_empty_n : IN STD_LOGIC;
        fifo_A_PE_0_2_read : OUT STD_LOGIC );
    end component;


    component kernel0_A_PE_dummy_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_A_PE_1_2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_A_PE_1_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_A_PE_1_2_empty_n : IN STD_LOGIC;
        fifo_A_PE_1_2_read : OUT STD_LOGIC );
    end component;


    component kernel0_B_PE_dummy_in_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_B_PE_2_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_2_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_0_empty_n : IN STD_LOGIC;
        fifo_B_PE_2_0_read : OUT STD_LOGIC );
    end component;


    component kernel0_B_PE_dummy_in IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_B_PE_2_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        fifo_B_PE_2_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_B_PE_2_1_empty_n : IN STD_LOGIC;
        fifo_B_PE_2_1_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L1_out_boundary_wrapper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_1_write : OUT STD_LOGIC;
        fifo_C_drain_PE_1_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_0_empty_n : IN STD_LOGIC;
        fifo_C_drain_PE_1_0_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L1_out_wrapper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_1_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_1_read : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_0_write : OUT STD_LOGIC;
        fifo_C_drain_PE_0_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_0_empty_n : IN STD_LOGIC;
        fifo_C_drain_PE_0_0_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L1_out_boundary_wrapper_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_1_write : OUT STD_LOGIC;
        fifo_C_drain_PE_1_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_1_1_empty_n : IN STD_LOGIC;
        fifo_C_drain_PE_1_1_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L1_out_wrapper_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_1_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_1_read : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_0_write : OUT STD_LOGIC;
        fifo_C_drain_PE_0_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_C_drain_PE_0_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_PE_0_1_empty_n : IN STD_LOGIC;
        fifo_C_drain_PE_0_1_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L2_out_boundary IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_1_0_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_1_0_read : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_1_write : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L2_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_1_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_1_read : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_0_write : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L1_out_0_0_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L1_out_0_0_read : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L3_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L2_out_0_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L2_out_0_read : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L3_out_serialize_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_full_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L3_out_serialize_write : OUT STD_LOGIC );
    end component;


    component kernel0_C_drain_IO_L3_out_serialize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_C_drain_C_drain_IO_L3_out_serialize_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n : IN STD_LOGIC;
        fifo_C_drain_C_drain_IO_L3_out_serialize_read : OUT STD_LOGIC;
        m_axi_gmem_C_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_C_AWREADY : IN STD_LOGIC;
        m_axi_gmem_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_WVALID : OUT STD_LOGIC;
        m_axi_gmem_C_WREADY : IN STD_LOGIC;
        m_axi_gmem_C_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_C_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_WLAST : OUT STD_LOGIC;
        m_axi_gmem_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_C_ARREADY : IN STD_LOGIC;
        m_axi_gmem_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RVALID : IN STD_LOGIC;
        m_axi_gmem_C_RREADY : OUT STD_LOGIC;
        m_axi_gmem_C_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_C_RLAST : IN STD_LOGIC;
        m_axi_gmem_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_BVALID : IN STD_LOGIC;
        m_axi_gmem_C_BREADY : OUT STD_LOGIC;
        m_axi_gmem_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        C_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        C_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        C_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        C_empty_n : IN STD_LOGIC;
        C_read : OUT STD_LOGIC );
    end component;


    component kernel0_fifo_w64_d13_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_fifo_w512_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L3_out_serialize_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_A_IO_L3_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_A_IO_L2_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_A_IO_L2_in_boundary_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_PE_wrapper_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_PE_wrapper_4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_B_IO_L3_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_B_IO_L2_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_B_IO_L2_in_boundary_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_PE_wrapper_3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L1_out_wrapper_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_PE_wrapper_5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_A_PE_dummy_in_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L1_out_wrapper_7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_B_PE_dummy_in_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L1_out_boundary_wrapper_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_A_PE_dummy_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_B_PE_dummy_in_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L2_out_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L2_out_boundary_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_start_for_C_drain_IO_L3_out_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel0_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        C : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component kernel0_gmem_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component kernel0_gmem_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component kernel0_gmem_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component kernel0_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        C => C,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_A_m_axi_U : component kernel0_gmem_A_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_A_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_A_AWVALID,
        AWREADY => m_axi_gmem_A_AWREADY,
        AWADDR => m_axi_gmem_A_AWADDR,
        AWID => m_axi_gmem_A_AWID,
        AWLEN => m_axi_gmem_A_AWLEN,
        AWSIZE => m_axi_gmem_A_AWSIZE,
        AWBURST => m_axi_gmem_A_AWBURST,
        AWLOCK => m_axi_gmem_A_AWLOCK,
        AWCACHE => m_axi_gmem_A_AWCACHE,
        AWPROT => m_axi_gmem_A_AWPROT,
        AWQOS => m_axi_gmem_A_AWQOS,
        AWREGION => m_axi_gmem_A_AWREGION,
        AWUSER => m_axi_gmem_A_AWUSER,
        WVALID => m_axi_gmem_A_WVALID,
        WREADY => m_axi_gmem_A_WREADY,
        WDATA => m_axi_gmem_A_WDATA,
        WSTRB => m_axi_gmem_A_WSTRB,
        WLAST => m_axi_gmem_A_WLAST,
        WID => m_axi_gmem_A_WID,
        WUSER => m_axi_gmem_A_WUSER,
        ARVALID => m_axi_gmem_A_ARVALID,
        ARREADY => m_axi_gmem_A_ARREADY,
        ARADDR => m_axi_gmem_A_ARADDR,
        ARID => m_axi_gmem_A_ARID,
        ARLEN => m_axi_gmem_A_ARLEN,
        ARSIZE => m_axi_gmem_A_ARSIZE,
        ARBURST => m_axi_gmem_A_ARBURST,
        ARLOCK => m_axi_gmem_A_ARLOCK,
        ARCACHE => m_axi_gmem_A_ARCACHE,
        ARPROT => m_axi_gmem_A_ARPROT,
        ARQOS => m_axi_gmem_A_ARQOS,
        ARREGION => m_axi_gmem_A_ARREGION,
        ARUSER => m_axi_gmem_A_ARUSER,
        RVALID => m_axi_gmem_A_RVALID,
        RREADY => m_axi_gmem_A_RREADY,
        RDATA => m_axi_gmem_A_RDATA,
        RLAST => m_axi_gmem_A_RLAST,
        RID => m_axi_gmem_A_RID,
        RUSER => m_axi_gmem_A_RUSER,
        RRESP => m_axi_gmem_A_RRESP,
        BVALID => m_axi_gmem_A_BVALID,
        BREADY => m_axi_gmem_A_BREADY,
        BRESP => m_axi_gmem_A_BRESP,
        BID => m_axi_gmem_A_BID,
        BUSER => m_axi_gmem_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARVALID,
        I_ARREADY => gmem_A_ARREADY,
        I_ARADDR => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARADDR,
        I_ARLEN => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARLEN,
        I_RVALID => gmem_A_RVALID,
        I_RREADY => A_IO_L3_in_serialize_U0_m_axi_gmem_A_RREADY,
        I_RDATA => gmem_A_RDATA,
        I_RFIFONUM => gmem_A_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_A_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_A_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_A_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem_B_m_axi_U : component kernel0_gmem_B_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_B_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_B_AWVALID,
        AWREADY => m_axi_gmem_B_AWREADY,
        AWADDR => m_axi_gmem_B_AWADDR,
        AWID => m_axi_gmem_B_AWID,
        AWLEN => m_axi_gmem_B_AWLEN,
        AWSIZE => m_axi_gmem_B_AWSIZE,
        AWBURST => m_axi_gmem_B_AWBURST,
        AWLOCK => m_axi_gmem_B_AWLOCK,
        AWCACHE => m_axi_gmem_B_AWCACHE,
        AWPROT => m_axi_gmem_B_AWPROT,
        AWQOS => m_axi_gmem_B_AWQOS,
        AWREGION => m_axi_gmem_B_AWREGION,
        AWUSER => m_axi_gmem_B_AWUSER,
        WVALID => m_axi_gmem_B_WVALID,
        WREADY => m_axi_gmem_B_WREADY,
        WDATA => m_axi_gmem_B_WDATA,
        WSTRB => m_axi_gmem_B_WSTRB,
        WLAST => m_axi_gmem_B_WLAST,
        WID => m_axi_gmem_B_WID,
        WUSER => m_axi_gmem_B_WUSER,
        ARVALID => m_axi_gmem_B_ARVALID,
        ARREADY => m_axi_gmem_B_ARREADY,
        ARADDR => m_axi_gmem_B_ARADDR,
        ARID => m_axi_gmem_B_ARID,
        ARLEN => m_axi_gmem_B_ARLEN,
        ARSIZE => m_axi_gmem_B_ARSIZE,
        ARBURST => m_axi_gmem_B_ARBURST,
        ARLOCK => m_axi_gmem_B_ARLOCK,
        ARCACHE => m_axi_gmem_B_ARCACHE,
        ARPROT => m_axi_gmem_B_ARPROT,
        ARQOS => m_axi_gmem_B_ARQOS,
        ARREGION => m_axi_gmem_B_ARREGION,
        ARUSER => m_axi_gmem_B_ARUSER,
        RVALID => m_axi_gmem_B_RVALID,
        RREADY => m_axi_gmem_B_RREADY,
        RDATA => m_axi_gmem_B_RDATA,
        RLAST => m_axi_gmem_B_RLAST,
        RID => m_axi_gmem_B_RID,
        RUSER => m_axi_gmem_B_RUSER,
        RRESP => m_axi_gmem_B_RRESP,
        BVALID => m_axi_gmem_B_BVALID,
        BREADY => m_axi_gmem_B_BREADY,
        BRESP => m_axi_gmem_B_BRESP,
        BID => m_axi_gmem_B_BID,
        BUSER => m_axi_gmem_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARVALID,
        I_ARREADY => gmem_B_ARREADY,
        I_ARADDR => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARADDR,
        I_ARLEN => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARLEN,
        I_RVALID => gmem_B_RVALID,
        I_RREADY => B_IO_L3_in_serialize_U0_m_axi_gmem_B_RREADY,
        I_RDATA => gmem_B_RDATA,
        I_RFIFONUM => gmem_B_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_B_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_B_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_B_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem_C_m_axi_U : component kernel0_gmem_C_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_C_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_C_AWVALID,
        AWREADY => m_axi_gmem_C_AWREADY,
        AWADDR => m_axi_gmem_C_AWADDR,
        AWID => m_axi_gmem_C_AWID,
        AWLEN => m_axi_gmem_C_AWLEN,
        AWSIZE => m_axi_gmem_C_AWSIZE,
        AWBURST => m_axi_gmem_C_AWBURST,
        AWLOCK => m_axi_gmem_C_AWLOCK,
        AWCACHE => m_axi_gmem_C_AWCACHE,
        AWPROT => m_axi_gmem_C_AWPROT,
        AWQOS => m_axi_gmem_C_AWQOS,
        AWREGION => m_axi_gmem_C_AWREGION,
        AWUSER => m_axi_gmem_C_AWUSER,
        WVALID => m_axi_gmem_C_WVALID,
        WREADY => m_axi_gmem_C_WREADY,
        WDATA => m_axi_gmem_C_WDATA,
        WSTRB => m_axi_gmem_C_WSTRB,
        WLAST => m_axi_gmem_C_WLAST,
        WID => m_axi_gmem_C_WID,
        WUSER => m_axi_gmem_C_WUSER,
        ARVALID => m_axi_gmem_C_ARVALID,
        ARREADY => m_axi_gmem_C_ARREADY,
        ARADDR => m_axi_gmem_C_ARADDR,
        ARID => m_axi_gmem_C_ARID,
        ARLEN => m_axi_gmem_C_ARLEN,
        ARSIZE => m_axi_gmem_C_ARSIZE,
        ARBURST => m_axi_gmem_C_ARBURST,
        ARLOCK => m_axi_gmem_C_ARLOCK,
        ARCACHE => m_axi_gmem_C_ARCACHE,
        ARPROT => m_axi_gmem_C_ARPROT,
        ARQOS => m_axi_gmem_C_ARQOS,
        ARREGION => m_axi_gmem_C_ARREGION,
        ARUSER => m_axi_gmem_C_ARUSER,
        RVALID => m_axi_gmem_C_RVALID,
        RREADY => m_axi_gmem_C_RREADY,
        RDATA => m_axi_gmem_C_RDATA,
        RLAST => m_axi_gmem_C_RLAST,
        RID => m_axi_gmem_C_RID,
        RUSER => m_axi_gmem_C_RUSER,
        RRESP => m_axi_gmem_C_RRESP,
        BVALID => m_axi_gmem_C_BVALID,
        BREADY => m_axi_gmem_C_BREADY,
        BRESP => m_axi_gmem_C_BRESP,
        BID => m_axi_gmem_C_BID,
        BUSER => m_axi_gmem_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_C_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_C_RDATA,
        I_RFIFONUM => gmem_C_RFIFONUM,
        I_AWVALID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWVALID,
        I_AWREADY => gmem_C_AWREADY,
        I_AWADDR => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWADDR,
        I_AWLEN => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWLEN,
        I_WVALID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WVALID,
        I_WREADY => gmem_C_WREADY,
        I_WDATA => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WDATA,
        I_WSTRB => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WSTRB,
        I_BVALID => gmem_C_BVALID,
        I_BREADY => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_BREADY);

    entry_proc_U0 : component kernel0_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_C_drain_IO_L3_out_serialize_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        C => C,
        C_c_din => entry_proc_U0_C_c_din,
        C_c_num_data_valid => C_c_num_data_valid,
        C_c_fifo_cap => C_c_fifo_cap,
        C_c_full_n => C_c_full_n,
        C_c_write => entry_proc_U0_C_c_write);

    A_IO_L3_in_serialize_U0 : component kernel0_A_IO_L3_in_serialize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_IO_L3_in_serialize_U0_ap_start,
        start_full_n => start_for_A_IO_L3_in_U0_full_n,
        ap_done => A_IO_L3_in_serialize_U0_ap_done,
        ap_continue => A_IO_L3_in_serialize_U0_ap_continue,
        ap_idle => A_IO_L3_in_serialize_U0_ap_idle,
        ap_ready => A_IO_L3_in_serialize_U0_ap_ready,
        m_axi_gmem_A_AWVALID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWVALID,
        m_axi_gmem_A_AWREADY => ap_const_logic_0,
        m_axi_gmem_A_AWADDR => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWADDR,
        m_axi_gmem_A_AWID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWID,
        m_axi_gmem_A_AWLEN => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWLEN,
        m_axi_gmem_A_AWSIZE => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWSIZE,
        m_axi_gmem_A_AWBURST => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWBURST,
        m_axi_gmem_A_AWLOCK => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWLOCK,
        m_axi_gmem_A_AWCACHE => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWCACHE,
        m_axi_gmem_A_AWPROT => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWPROT,
        m_axi_gmem_A_AWQOS => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWQOS,
        m_axi_gmem_A_AWREGION => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWREGION,
        m_axi_gmem_A_AWUSER => A_IO_L3_in_serialize_U0_m_axi_gmem_A_AWUSER,
        m_axi_gmem_A_WVALID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WVALID,
        m_axi_gmem_A_WREADY => ap_const_logic_0,
        m_axi_gmem_A_WDATA => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WDATA,
        m_axi_gmem_A_WSTRB => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WSTRB,
        m_axi_gmem_A_WLAST => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WLAST,
        m_axi_gmem_A_WID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WID,
        m_axi_gmem_A_WUSER => A_IO_L3_in_serialize_U0_m_axi_gmem_A_WUSER,
        m_axi_gmem_A_ARVALID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARVALID,
        m_axi_gmem_A_ARREADY => gmem_A_ARREADY,
        m_axi_gmem_A_ARADDR => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARADDR,
        m_axi_gmem_A_ARID => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARID,
        m_axi_gmem_A_ARLEN => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARLEN,
        m_axi_gmem_A_ARSIZE => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARSIZE,
        m_axi_gmem_A_ARBURST => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARBURST,
        m_axi_gmem_A_ARLOCK => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARLOCK,
        m_axi_gmem_A_ARCACHE => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARCACHE,
        m_axi_gmem_A_ARPROT => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARPROT,
        m_axi_gmem_A_ARQOS => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARQOS,
        m_axi_gmem_A_ARREGION => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARREGION,
        m_axi_gmem_A_ARUSER => A_IO_L3_in_serialize_U0_m_axi_gmem_A_ARUSER,
        m_axi_gmem_A_RVALID => gmem_A_RVALID,
        m_axi_gmem_A_RREADY => A_IO_L3_in_serialize_U0_m_axi_gmem_A_RREADY,
        m_axi_gmem_A_RDATA => gmem_A_RDATA,
        m_axi_gmem_A_RLAST => gmem_A_RLAST,
        m_axi_gmem_A_RID => gmem_A_RID,
        m_axi_gmem_A_RFIFONUM => gmem_A_RFIFONUM,
        m_axi_gmem_A_RUSER => gmem_A_RUSER,
        m_axi_gmem_A_RRESP => gmem_A_RRESP,
        m_axi_gmem_A_BVALID => ap_const_logic_0,
        m_axi_gmem_A_BREADY => A_IO_L3_in_serialize_U0_m_axi_gmem_A_BREADY,
        m_axi_gmem_A_BRESP => ap_const_lv2_0,
        m_axi_gmem_A_BID => ap_const_lv1_0,
        m_axi_gmem_A_BUSER => ap_const_lv1_0,
        fifo_A_A_IO_L3_in_serialize_din => A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_din,
        fifo_A_A_IO_L3_in_serialize_num_data_valid => fifo_A_A_IO_L3_in_serialize_num_data_valid,
        fifo_A_A_IO_L3_in_serialize_fifo_cap => fifo_A_A_IO_L3_in_serialize_fifo_cap,
        fifo_A_A_IO_L3_in_serialize_full_n => fifo_A_A_IO_L3_in_serialize_full_n,
        fifo_A_A_IO_L3_in_serialize_write => A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_write,
        start_out => A_IO_L3_in_serialize_U0_start_out,
        start_write => A_IO_L3_in_serialize_U0_start_write,
        A => A);

    A_IO_L3_in_U0 : component kernel0_A_IO_L3_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_IO_L3_in_U0_ap_start,
        start_full_n => start_for_A_IO_L2_in_U0_full_n,
        ap_done => A_IO_L3_in_U0_ap_done,
        ap_continue => A_IO_L3_in_U0_ap_continue,
        ap_idle => A_IO_L3_in_U0_ap_idle,
        ap_ready => A_IO_L3_in_U0_ap_ready,
        fifo_A_A_IO_L3_in_serialize_dout => fifo_A_A_IO_L3_in_serialize_dout,
        fifo_A_A_IO_L3_in_serialize_num_data_valid => fifo_A_A_IO_L3_in_serialize_num_data_valid,
        fifo_A_A_IO_L3_in_serialize_fifo_cap => fifo_A_A_IO_L3_in_serialize_fifo_cap,
        fifo_A_A_IO_L3_in_serialize_empty_n => fifo_A_A_IO_L3_in_serialize_empty_n,
        fifo_A_A_IO_L3_in_serialize_read => A_IO_L3_in_U0_fifo_A_A_IO_L3_in_serialize_read,
        fifo_A_A_IO_L2_in_0_din => A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_din,
        fifo_A_A_IO_L2_in_0_num_data_valid => fifo_A_A_IO_L2_in_0_num_data_valid,
        fifo_A_A_IO_L2_in_0_fifo_cap => fifo_A_A_IO_L2_in_0_fifo_cap,
        fifo_A_A_IO_L2_in_0_full_n => fifo_A_A_IO_L2_in_0_full_n,
        fifo_A_A_IO_L2_in_0_write => A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_write,
        start_out => A_IO_L3_in_U0_start_out,
        start_write => A_IO_L3_in_U0_start_write);

    A_IO_L2_in_U0 : component kernel0_A_IO_L2_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_IO_L2_in_U0_ap_start,
        start_full_n => A_IO_L2_in_U0_start_full_n,
        ap_done => A_IO_L2_in_U0_ap_done,
        ap_continue => A_IO_L2_in_U0_ap_continue,
        ap_idle => A_IO_L2_in_U0_ap_idle,
        ap_ready => A_IO_L2_in_U0_ap_ready,
        start_out => A_IO_L2_in_U0_start_out,
        start_write => A_IO_L2_in_U0_start_write,
        fifo_A_A_IO_L2_in_0_dout => fifo_A_A_IO_L2_in_0_dout,
        fifo_A_A_IO_L2_in_0_num_data_valid => fifo_A_A_IO_L2_in_0_num_data_valid,
        fifo_A_A_IO_L2_in_0_fifo_cap => fifo_A_A_IO_L2_in_0_fifo_cap,
        fifo_A_A_IO_L2_in_0_empty_n => fifo_A_A_IO_L2_in_0_empty_n,
        fifo_A_A_IO_L2_in_0_read => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_0_read,
        fifo_A_A_IO_L2_in_1_din => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_din,
        fifo_A_A_IO_L2_in_1_num_data_valid => fifo_A_A_IO_L2_in_1_num_data_valid,
        fifo_A_A_IO_L2_in_1_fifo_cap => fifo_A_A_IO_L2_in_1_fifo_cap,
        fifo_A_A_IO_L2_in_1_full_n => fifo_A_A_IO_L2_in_1_full_n,
        fifo_A_A_IO_L2_in_1_write => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_write,
        fifo_A_PE_0_0_din => A_IO_L2_in_U0_fifo_A_PE_0_0_din,
        fifo_A_PE_0_0_num_data_valid => fifo_A_PE_0_0_num_data_valid,
        fifo_A_PE_0_0_fifo_cap => fifo_A_PE_0_0_fifo_cap,
        fifo_A_PE_0_0_full_n => fifo_A_PE_0_0_full_n,
        fifo_A_PE_0_0_write => A_IO_L2_in_U0_fifo_A_PE_0_0_write);

    A_IO_L2_in_boundary_U0 : component kernel0_A_IO_L2_in_boundary
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_IO_L2_in_boundary_U0_ap_start,
        start_full_n => start_for_PE_wrapper_4_U0_full_n,
        ap_done => A_IO_L2_in_boundary_U0_ap_done,
        ap_continue => A_IO_L2_in_boundary_U0_ap_continue,
        ap_idle => A_IO_L2_in_boundary_U0_ap_idle,
        ap_ready => A_IO_L2_in_boundary_U0_ap_ready,
        start_out => A_IO_L2_in_boundary_U0_start_out,
        start_write => A_IO_L2_in_boundary_U0_start_write,
        fifo_A_A_IO_L2_in_1_dout => fifo_A_A_IO_L2_in_1_dout,
        fifo_A_A_IO_L2_in_1_num_data_valid => fifo_A_A_IO_L2_in_1_num_data_valid,
        fifo_A_A_IO_L2_in_1_fifo_cap => fifo_A_A_IO_L2_in_1_fifo_cap,
        fifo_A_A_IO_L2_in_1_empty_n => fifo_A_A_IO_L2_in_1_empty_n,
        fifo_A_A_IO_L2_in_1_read => A_IO_L2_in_boundary_U0_fifo_A_A_IO_L2_in_1_read,
        fifo_A_PE_1_0_din => A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_din,
        fifo_A_PE_1_0_num_data_valid => fifo_A_PE_1_0_num_data_valid,
        fifo_A_PE_1_0_fifo_cap => fifo_A_PE_1_0_fifo_cap,
        fifo_A_PE_1_0_full_n => fifo_A_PE_1_0_full_n,
        fifo_A_PE_1_0_write => A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_write);

    B_IO_L3_in_serialize_U0 : component kernel0_B_IO_L3_in_serialize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_IO_L3_in_serialize_U0_ap_start,
        start_full_n => start_for_B_IO_L3_in_U0_full_n,
        ap_done => B_IO_L3_in_serialize_U0_ap_done,
        ap_continue => B_IO_L3_in_serialize_U0_ap_continue,
        ap_idle => B_IO_L3_in_serialize_U0_ap_idle,
        ap_ready => B_IO_L3_in_serialize_U0_ap_ready,
        m_axi_gmem_B_AWVALID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWVALID,
        m_axi_gmem_B_AWREADY => ap_const_logic_0,
        m_axi_gmem_B_AWADDR => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWADDR,
        m_axi_gmem_B_AWID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWID,
        m_axi_gmem_B_AWLEN => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWLEN,
        m_axi_gmem_B_AWSIZE => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWSIZE,
        m_axi_gmem_B_AWBURST => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWBURST,
        m_axi_gmem_B_AWLOCK => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWLOCK,
        m_axi_gmem_B_AWCACHE => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWCACHE,
        m_axi_gmem_B_AWPROT => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWPROT,
        m_axi_gmem_B_AWQOS => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWQOS,
        m_axi_gmem_B_AWREGION => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWREGION,
        m_axi_gmem_B_AWUSER => B_IO_L3_in_serialize_U0_m_axi_gmem_B_AWUSER,
        m_axi_gmem_B_WVALID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WVALID,
        m_axi_gmem_B_WREADY => ap_const_logic_0,
        m_axi_gmem_B_WDATA => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WDATA,
        m_axi_gmem_B_WSTRB => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WSTRB,
        m_axi_gmem_B_WLAST => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WLAST,
        m_axi_gmem_B_WID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WID,
        m_axi_gmem_B_WUSER => B_IO_L3_in_serialize_U0_m_axi_gmem_B_WUSER,
        m_axi_gmem_B_ARVALID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARVALID,
        m_axi_gmem_B_ARREADY => gmem_B_ARREADY,
        m_axi_gmem_B_ARADDR => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARADDR,
        m_axi_gmem_B_ARID => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARID,
        m_axi_gmem_B_ARLEN => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARLEN,
        m_axi_gmem_B_ARSIZE => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARSIZE,
        m_axi_gmem_B_ARBURST => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARBURST,
        m_axi_gmem_B_ARLOCK => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARLOCK,
        m_axi_gmem_B_ARCACHE => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARCACHE,
        m_axi_gmem_B_ARPROT => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARPROT,
        m_axi_gmem_B_ARQOS => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARQOS,
        m_axi_gmem_B_ARREGION => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARREGION,
        m_axi_gmem_B_ARUSER => B_IO_L3_in_serialize_U0_m_axi_gmem_B_ARUSER,
        m_axi_gmem_B_RVALID => gmem_B_RVALID,
        m_axi_gmem_B_RREADY => B_IO_L3_in_serialize_U0_m_axi_gmem_B_RREADY,
        m_axi_gmem_B_RDATA => gmem_B_RDATA,
        m_axi_gmem_B_RLAST => gmem_B_RLAST,
        m_axi_gmem_B_RID => gmem_B_RID,
        m_axi_gmem_B_RFIFONUM => gmem_B_RFIFONUM,
        m_axi_gmem_B_RUSER => gmem_B_RUSER,
        m_axi_gmem_B_RRESP => gmem_B_RRESP,
        m_axi_gmem_B_BVALID => ap_const_logic_0,
        m_axi_gmem_B_BREADY => B_IO_L3_in_serialize_U0_m_axi_gmem_B_BREADY,
        m_axi_gmem_B_BRESP => ap_const_lv2_0,
        m_axi_gmem_B_BID => ap_const_lv1_0,
        m_axi_gmem_B_BUSER => ap_const_lv1_0,
        fifo_B_B_IO_L3_in_serialize_din => B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_din,
        fifo_B_B_IO_L3_in_serialize_num_data_valid => fifo_B_B_IO_L3_in_serialize_num_data_valid,
        fifo_B_B_IO_L3_in_serialize_fifo_cap => fifo_B_B_IO_L3_in_serialize_fifo_cap,
        fifo_B_B_IO_L3_in_serialize_full_n => fifo_B_B_IO_L3_in_serialize_full_n,
        fifo_B_B_IO_L3_in_serialize_write => B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_write,
        start_out => B_IO_L3_in_serialize_U0_start_out,
        start_write => B_IO_L3_in_serialize_U0_start_write,
        B => B);

    B_IO_L3_in_U0 : component kernel0_B_IO_L3_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_IO_L3_in_U0_ap_start,
        start_full_n => start_for_B_IO_L2_in_U0_full_n,
        ap_done => B_IO_L3_in_U0_ap_done,
        ap_continue => B_IO_L3_in_U0_ap_continue,
        ap_idle => B_IO_L3_in_U0_ap_idle,
        ap_ready => B_IO_L3_in_U0_ap_ready,
        fifo_B_B_IO_L3_in_serialize_dout => fifo_B_B_IO_L3_in_serialize_dout,
        fifo_B_B_IO_L3_in_serialize_num_data_valid => fifo_B_B_IO_L3_in_serialize_num_data_valid,
        fifo_B_B_IO_L3_in_serialize_fifo_cap => fifo_B_B_IO_L3_in_serialize_fifo_cap,
        fifo_B_B_IO_L3_in_serialize_empty_n => fifo_B_B_IO_L3_in_serialize_empty_n,
        fifo_B_B_IO_L3_in_serialize_read => B_IO_L3_in_U0_fifo_B_B_IO_L3_in_serialize_read,
        fifo_B_B_IO_L2_in_0_din => B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_din,
        fifo_B_B_IO_L2_in_0_num_data_valid => fifo_B_B_IO_L2_in_0_num_data_valid,
        fifo_B_B_IO_L2_in_0_fifo_cap => fifo_B_B_IO_L2_in_0_fifo_cap,
        fifo_B_B_IO_L2_in_0_full_n => fifo_B_B_IO_L2_in_0_full_n,
        fifo_B_B_IO_L2_in_0_write => B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_write,
        start_out => B_IO_L3_in_U0_start_out,
        start_write => B_IO_L3_in_U0_start_write);

    B_IO_L2_in_U0 : component kernel0_B_IO_L2_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_IO_L2_in_U0_ap_start,
        start_full_n => start_for_B_IO_L2_in_boundary_U0_full_n,
        ap_done => B_IO_L2_in_U0_ap_done,
        ap_continue => B_IO_L2_in_U0_ap_continue,
        ap_idle => B_IO_L2_in_U0_ap_idle,
        ap_ready => B_IO_L2_in_U0_ap_ready,
        start_out => B_IO_L2_in_U0_start_out,
        start_write => B_IO_L2_in_U0_start_write,
        fifo_B_B_IO_L2_in_0_dout => fifo_B_B_IO_L2_in_0_dout,
        fifo_B_B_IO_L2_in_0_num_data_valid => fifo_B_B_IO_L2_in_0_num_data_valid,
        fifo_B_B_IO_L2_in_0_fifo_cap => fifo_B_B_IO_L2_in_0_fifo_cap,
        fifo_B_B_IO_L2_in_0_empty_n => fifo_B_B_IO_L2_in_0_empty_n,
        fifo_B_B_IO_L2_in_0_read => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_0_read,
        fifo_B_B_IO_L2_in_1_din => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_din,
        fifo_B_B_IO_L2_in_1_num_data_valid => fifo_B_B_IO_L2_in_1_num_data_valid,
        fifo_B_B_IO_L2_in_1_fifo_cap => fifo_B_B_IO_L2_in_1_fifo_cap,
        fifo_B_B_IO_L2_in_1_full_n => fifo_B_B_IO_L2_in_1_full_n,
        fifo_B_B_IO_L2_in_1_write => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_write,
        fifo_B_PE_0_0_din => B_IO_L2_in_U0_fifo_B_PE_0_0_din,
        fifo_B_PE_0_0_num_data_valid => fifo_B_PE_0_0_num_data_valid,
        fifo_B_PE_0_0_fifo_cap => fifo_B_PE_0_0_fifo_cap,
        fifo_B_PE_0_0_full_n => fifo_B_PE_0_0_full_n,
        fifo_B_PE_0_0_write => B_IO_L2_in_U0_fifo_B_PE_0_0_write);

    B_IO_L2_in_boundary_U0 : component kernel0_B_IO_L2_in_boundary
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_IO_L2_in_boundary_U0_ap_start,
        start_full_n => start_for_PE_wrapper_3_U0_full_n,
        ap_done => B_IO_L2_in_boundary_U0_ap_done,
        ap_continue => B_IO_L2_in_boundary_U0_ap_continue,
        ap_idle => B_IO_L2_in_boundary_U0_ap_idle,
        ap_ready => B_IO_L2_in_boundary_U0_ap_ready,
        start_out => B_IO_L2_in_boundary_U0_start_out,
        start_write => B_IO_L2_in_boundary_U0_start_write,
        fifo_B_B_IO_L2_in_1_dout => fifo_B_B_IO_L2_in_1_dout,
        fifo_B_B_IO_L2_in_1_num_data_valid => fifo_B_B_IO_L2_in_1_num_data_valid,
        fifo_B_B_IO_L2_in_1_fifo_cap => fifo_B_B_IO_L2_in_1_fifo_cap,
        fifo_B_B_IO_L2_in_1_empty_n => fifo_B_B_IO_L2_in_1_empty_n,
        fifo_B_B_IO_L2_in_1_read => B_IO_L2_in_boundary_U0_fifo_B_B_IO_L2_in_1_read,
        fifo_B_PE_0_1_din => B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_din,
        fifo_B_PE_0_1_num_data_valid => fifo_B_PE_0_1_num_data_valid,
        fifo_B_PE_0_1_fifo_cap => fifo_B_PE_0_1_fifo_cap,
        fifo_B_PE_0_1_full_n => fifo_B_PE_0_1_full_n,
        fifo_B_PE_0_1_write => B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_write);

    PE_wrapper_U0 : component kernel0_PE_wrapper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PE_wrapper_U0_ap_start,
        start_full_n => start_for_C_drain_IO_L1_out_wrapper_U0_full_n,
        ap_done => PE_wrapper_U0_ap_done,
        ap_continue => PE_wrapper_U0_ap_continue,
        ap_idle => PE_wrapper_U0_ap_idle,
        ap_ready => PE_wrapper_U0_ap_ready,
        start_out => PE_wrapper_U0_start_out,
        start_write => PE_wrapper_U0_start_write,
        fifo_A_PE_0_0_dout => fifo_A_PE_0_0_dout,
        fifo_A_PE_0_0_num_data_valid => fifo_A_PE_0_0_num_data_valid,
        fifo_A_PE_0_0_fifo_cap => fifo_A_PE_0_0_fifo_cap,
        fifo_A_PE_0_0_empty_n => fifo_A_PE_0_0_empty_n,
        fifo_A_PE_0_0_read => PE_wrapper_U0_fifo_A_PE_0_0_read,
        fifo_A_PE_0_1_din => PE_wrapper_U0_fifo_A_PE_0_1_din,
        fifo_A_PE_0_1_num_data_valid => fifo_A_PE_0_1_num_data_valid,
        fifo_A_PE_0_1_fifo_cap => fifo_A_PE_0_1_fifo_cap,
        fifo_A_PE_0_1_full_n => fifo_A_PE_0_1_full_n,
        fifo_A_PE_0_1_write => PE_wrapper_U0_fifo_A_PE_0_1_write,
        fifo_B_PE_0_0_dout => fifo_B_PE_0_0_dout,
        fifo_B_PE_0_0_num_data_valid => fifo_B_PE_0_0_num_data_valid,
        fifo_B_PE_0_0_fifo_cap => fifo_B_PE_0_0_fifo_cap,
        fifo_B_PE_0_0_empty_n => fifo_B_PE_0_0_empty_n,
        fifo_B_PE_0_0_read => PE_wrapper_U0_fifo_B_PE_0_0_read,
        fifo_B_PE_1_0_din => PE_wrapper_U0_fifo_B_PE_1_0_din,
        fifo_B_PE_1_0_num_data_valid => fifo_B_PE_1_0_num_data_valid,
        fifo_B_PE_1_0_fifo_cap => fifo_B_PE_1_0_fifo_cap,
        fifo_B_PE_1_0_full_n => fifo_B_PE_1_0_full_n,
        fifo_B_PE_1_0_write => PE_wrapper_U0_fifo_B_PE_1_0_write,
        fifo_C_drain_PE_0_0_din => PE_wrapper_U0_fifo_C_drain_PE_0_0_din,
        fifo_C_drain_PE_0_0_num_data_valid => fifo_C_drain_PE_0_0_num_data_valid,
        fifo_C_drain_PE_0_0_fifo_cap => fifo_C_drain_PE_0_0_fifo_cap,
        fifo_C_drain_PE_0_0_full_n => fifo_C_drain_PE_0_0_full_n,
        fifo_C_drain_PE_0_0_write => PE_wrapper_U0_fifo_C_drain_PE_0_0_write);

    PE_wrapper_3_U0 : component kernel0_PE_wrapper_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PE_wrapper_3_U0_ap_start,
        start_full_n => PE_wrapper_3_U0_start_full_n,
        ap_done => PE_wrapper_3_U0_ap_done,
        ap_continue => PE_wrapper_3_U0_ap_continue,
        ap_idle => PE_wrapper_3_U0_ap_idle,
        ap_ready => PE_wrapper_3_U0_ap_ready,
        start_out => PE_wrapper_3_U0_start_out,
        start_write => PE_wrapper_3_U0_start_write,
        fifo_A_PE_0_1_dout => fifo_A_PE_0_1_dout,
        fifo_A_PE_0_1_num_data_valid => fifo_A_PE_0_1_num_data_valid,
        fifo_A_PE_0_1_fifo_cap => fifo_A_PE_0_1_fifo_cap,
        fifo_A_PE_0_1_empty_n => fifo_A_PE_0_1_empty_n,
        fifo_A_PE_0_1_read => PE_wrapper_3_U0_fifo_A_PE_0_1_read,
        fifo_A_PE_0_2_din => PE_wrapper_3_U0_fifo_A_PE_0_2_din,
        fifo_A_PE_0_2_num_data_valid => fifo_A_PE_0_2_num_data_valid,
        fifo_A_PE_0_2_fifo_cap => fifo_A_PE_0_2_fifo_cap,
        fifo_A_PE_0_2_full_n => fifo_A_PE_0_2_full_n,
        fifo_A_PE_0_2_write => PE_wrapper_3_U0_fifo_A_PE_0_2_write,
        fifo_B_PE_0_1_dout => fifo_B_PE_0_1_dout,
        fifo_B_PE_0_1_num_data_valid => fifo_B_PE_0_1_num_data_valid,
        fifo_B_PE_0_1_fifo_cap => fifo_B_PE_0_1_fifo_cap,
        fifo_B_PE_0_1_empty_n => fifo_B_PE_0_1_empty_n,
        fifo_B_PE_0_1_read => PE_wrapper_3_U0_fifo_B_PE_0_1_read,
        fifo_B_PE_1_1_din => PE_wrapper_3_U0_fifo_B_PE_1_1_din,
        fifo_B_PE_1_1_num_data_valid => fifo_B_PE_1_1_num_data_valid,
        fifo_B_PE_1_1_fifo_cap => fifo_B_PE_1_1_fifo_cap,
        fifo_B_PE_1_1_full_n => fifo_B_PE_1_1_full_n,
        fifo_B_PE_1_1_write => PE_wrapper_3_U0_fifo_B_PE_1_1_write,
        fifo_C_drain_PE_0_1_din => PE_wrapper_3_U0_fifo_C_drain_PE_0_1_din,
        fifo_C_drain_PE_0_1_num_data_valid => fifo_C_drain_PE_0_1_num_data_valid,
        fifo_C_drain_PE_0_1_fifo_cap => fifo_C_drain_PE_0_1_fifo_cap,
        fifo_C_drain_PE_0_1_full_n => fifo_C_drain_PE_0_1_full_n,
        fifo_C_drain_PE_0_1_write => PE_wrapper_3_U0_fifo_C_drain_PE_0_1_write);

    PE_wrapper_4_U0 : component kernel0_PE_wrapper_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PE_wrapper_4_U0_ap_start,
        start_full_n => PE_wrapper_4_U0_start_full_n,
        ap_done => PE_wrapper_4_U0_ap_done,
        ap_continue => PE_wrapper_4_U0_ap_continue,
        ap_idle => PE_wrapper_4_U0_ap_idle,
        ap_ready => PE_wrapper_4_U0_ap_ready,
        start_out => PE_wrapper_4_U0_start_out,
        start_write => PE_wrapper_4_U0_start_write,
        fifo_A_PE_1_0_dout => fifo_A_PE_1_0_dout,
        fifo_A_PE_1_0_num_data_valid => fifo_A_PE_1_0_num_data_valid,
        fifo_A_PE_1_0_fifo_cap => fifo_A_PE_1_0_fifo_cap,
        fifo_A_PE_1_0_empty_n => fifo_A_PE_1_0_empty_n,
        fifo_A_PE_1_0_read => PE_wrapper_4_U0_fifo_A_PE_1_0_read,
        fifo_A_PE_1_1_din => PE_wrapper_4_U0_fifo_A_PE_1_1_din,
        fifo_A_PE_1_1_num_data_valid => fifo_A_PE_1_1_num_data_valid,
        fifo_A_PE_1_1_fifo_cap => fifo_A_PE_1_1_fifo_cap,
        fifo_A_PE_1_1_full_n => fifo_A_PE_1_1_full_n,
        fifo_A_PE_1_1_write => PE_wrapper_4_U0_fifo_A_PE_1_1_write,
        fifo_B_PE_1_0_dout => fifo_B_PE_1_0_dout,
        fifo_B_PE_1_0_num_data_valid => fifo_B_PE_1_0_num_data_valid,
        fifo_B_PE_1_0_fifo_cap => fifo_B_PE_1_0_fifo_cap,
        fifo_B_PE_1_0_empty_n => fifo_B_PE_1_0_empty_n,
        fifo_B_PE_1_0_read => PE_wrapper_4_U0_fifo_B_PE_1_0_read,
        fifo_B_PE_2_0_din => PE_wrapper_4_U0_fifo_B_PE_2_0_din,
        fifo_B_PE_2_0_num_data_valid => fifo_B_PE_2_0_num_data_valid,
        fifo_B_PE_2_0_fifo_cap => fifo_B_PE_2_0_fifo_cap,
        fifo_B_PE_2_0_full_n => fifo_B_PE_2_0_full_n,
        fifo_B_PE_2_0_write => PE_wrapper_4_U0_fifo_B_PE_2_0_write,
        fifo_C_drain_PE_1_0_din => PE_wrapper_4_U0_fifo_C_drain_PE_1_0_din,
        fifo_C_drain_PE_1_0_num_data_valid => fifo_C_drain_PE_1_0_num_data_valid,
        fifo_C_drain_PE_1_0_fifo_cap => fifo_C_drain_PE_1_0_fifo_cap,
        fifo_C_drain_PE_1_0_full_n => fifo_C_drain_PE_1_0_full_n,
        fifo_C_drain_PE_1_0_write => PE_wrapper_4_U0_fifo_C_drain_PE_1_0_write);

    PE_wrapper_5_U0 : component kernel0_PE_wrapper_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PE_wrapper_5_U0_ap_start,
        start_full_n => PE_wrapper_5_U0_start_full_n,
        ap_done => PE_wrapper_5_U0_ap_done,
        ap_continue => PE_wrapper_5_U0_ap_continue,
        ap_idle => PE_wrapper_5_U0_ap_idle,
        ap_ready => PE_wrapper_5_U0_ap_ready,
        start_out => PE_wrapper_5_U0_start_out,
        start_write => PE_wrapper_5_U0_start_write,
        fifo_A_PE_1_1_dout => fifo_A_PE_1_1_dout,
        fifo_A_PE_1_1_num_data_valid => fifo_A_PE_1_1_num_data_valid,
        fifo_A_PE_1_1_fifo_cap => fifo_A_PE_1_1_fifo_cap,
        fifo_A_PE_1_1_empty_n => fifo_A_PE_1_1_empty_n,
        fifo_A_PE_1_1_read => PE_wrapper_5_U0_fifo_A_PE_1_1_read,
        fifo_A_PE_1_2_din => PE_wrapper_5_U0_fifo_A_PE_1_2_din,
        fifo_A_PE_1_2_num_data_valid => fifo_A_PE_1_2_num_data_valid,
        fifo_A_PE_1_2_fifo_cap => fifo_A_PE_1_2_fifo_cap,
        fifo_A_PE_1_2_full_n => fifo_A_PE_1_2_full_n,
        fifo_A_PE_1_2_write => PE_wrapper_5_U0_fifo_A_PE_1_2_write,
        fifo_B_PE_1_1_dout => fifo_B_PE_1_1_dout,
        fifo_B_PE_1_1_num_data_valid => fifo_B_PE_1_1_num_data_valid,
        fifo_B_PE_1_1_fifo_cap => fifo_B_PE_1_1_fifo_cap,
        fifo_B_PE_1_1_empty_n => fifo_B_PE_1_1_empty_n,
        fifo_B_PE_1_1_read => PE_wrapper_5_U0_fifo_B_PE_1_1_read,
        fifo_B_PE_2_1_din => PE_wrapper_5_U0_fifo_B_PE_2_1_din,
        fifo_B_PE_2_1_num_data_valid => fifo_B_PE_2_1_num_data_valid,
        fifo_B_PE_2_1_fifo_cap => fifo_B_PE_2_1_fifo_cap,
        fifo_B_PE_2_1_full_n => fifo_B_PE_2_1_full_n,
        fifo_B_PE_2_1_write => PE_wrapper_5_U0_fifo_B_PE_2_1_write,
        fifo_C_drain_PE_1_1_din => PE_wrapper_5_U0_fifo_C_drain_PE_1_1_din,
        fifo_C_drain_PE_1_1_num_data_valid => fifo_C_drain_PE_1_1_num_data_valid,
        fifo_C_drain_PE_1_1_fifo_cap => fifo_C_drain_PE_1_1_fifo_cap,
        fifo_C_drain_PE_1_1_full_n => fifo_C_drain_PE_1_1_full_n,
        fifo_C_drain_PE_1_1_write => PE_wrapper_5_U0_fifo_C_drain_PE_1_1_write);

    A_PE_dummy_in_1_U0 : component kernel0_A_PE_dummy_in_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_PE_dummy_in_1_U0_ap_start,
        ap_done => A_PE_dummy_in_1_U0_ap_done,
        ap_continue => A_PE_dummy_in_1_U0_ap_continue,
        ap_idle => A_PE_dummy_in_1_U0_ap_idle,
        ap_ready => A_PE_dummy_in_1_U0_ap_ready,
        fifo_A_PE_0_2_dout => fifo_A_PE_0_2_dout,
        fifo_A_PE_0_2_num_data_valid => fifo_A_PE_0_2_num_data_valid,
        fifo_A_PE_0_2_fifo_cap => fifo_A_PE_0_2_fifo_cap,
        fifo_A_PE_0_2_empty_n => fifo_A_PE_0_2_empty_n,
        fifo_A_PE_0_2_read => A_PE_dummy_in_1_U0_fifo_A_PE_0_2_read);

    A_PE_dummy_in_U0 : component kernel0_A_PE_dummy_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => A_PE_dummy_in_U0_ap_start,
        ap_done => A_PE_dummy_in_U0_ap_done,
        ap_continue => A_PE_dummy_in_U0_ap_continue,
        ap_idle => A_PE_dummy_in_U0_ap_idle,
        ap_ready => A_PE_dummy_in_U0_ap_ready,
        fifo_A_PE_1_2_dout => fifo_A_PE_1_2_dout,
        fifo_A_PE_1_2_num_data_valid => fifo_A_PE_1_2_num_data_valid,
        fifo_A_PE_1_2_fifo_cap => fifo_A_PE_1_2_fifo_cap,
        fifo_A_PE_1_2_empty_n => fifo_A_PE_1_2_empty_n,
        fifo_A_PE_1_2_read => A_PE_dummy_in_U0_fifo_A_PE_1_2_read);

    B_PE_dummy_in_2_U0 : component kernel0_B_PE_dummy_in_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_PE_dummy_in_2_U0_ap_start,
        ap_done => B_PE_dummy_in_2_U0_ap_done,
        ap_continue => B_PE_dummy_in_2_U0_ap_continue,
        ap_idle => B_PE_dummy_in_2_U0_ap_idle,
        ap_ready => B_PE_dummy_in_2_U0_ap_ready,
        fifo_B_PE_2_0_dout => fifo_B_PE_2_0_dout,
        fifo_B_PE_2_0_num_data_valid => fifo_B_PE_2_0_num_data_valid,
        fifo_B_PE_2_0_fifo_cap => fifo_B_PE_2_0_fifo_cap,
        fifo_B_PE_2_0_empty_n => fifo_B_PE_2_0_empty_n,
        fifo_B_PE_2_0_read => B_PE_dummy_in_2_U0_fifo_B_PE_2_0_read);

    B_PE_dummy_in_U0 : component kernel0_B_PE_dummy_in
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => B_PE_dummy_in_U0_ap_start,
        ap_done => B_PE_dummy_in_U0_ap_done,
        ap_continue => B_PE_dummy_in_U0_ap_continue,
        ap_idle => B_PE_dummy_in_U0_ap_idle,
        ap_ready => B_PE_dummy_in_U0_ap_ready,
        fifo_B_PE_2_1_dout => fifo_B_PE_2_1_dout,
        fifo_B_PE_2_1_num_data_valid => fifo_B_PE_2_1_num_data_valid,
        fifo_B_PE_2_1_fifo_cap => fifo_B_PE_2_1_fifo_cap,
        fifo_B_PE_2_1_empty_n => fifo_B_PE_2_1_empty_n,
        fifo_B_PE_2_1_read => B_PE_dummy_in_U0_fifo_B_PE_2_1_read);

    C_drain_IO_L1_out_boundary_wrapper_U0 : component kernel0_C_drain_IO_L1_out_boundary_wrapper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L1_out_boundary_wrapper_U0_ap_start,
        ap_done => C_drain_IO_L1_out_boundary_wrapper_U0_ap_done,
        ap_continue => C_drain_IO_L1_out_boundary_wrapper_U0_ap_continue,
        ap_idle => C_drain_IO_L1_out_boundary_wrapper_U0_ap_idle,
        ap_ready => C_drain_IO_L1_out_boundary_wrapper_U0_ap_ready,
        fifo_C_drain_C_drain_IO_L1_out_0_1_din => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_din,
        fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_0_1_full_n => fifo_C_drain_C_drain_IO_L1_out_0_1_full_n,
        fifo_C_drain_C_drain_IO_L1_out_0_1_write => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_write,
        fifo_C_drain_PE_1_0_dout => fifo_C_drain_PE_1_0_dout,
        fifo_C_drain_PE_1_0_num_data_valid => fifo_C_drain_PE_1_0_num_data_valid,
        fifo_C_drain_PE_1_0_fifo_cap => fifo_C_drain_PE_1_0_fifo_cap,
        fifo_C_drain_PE_1_0_empty_n => fifo_C_drain_PE_1_0_empty_n,
        fifo_C_drain_PE_1_0_read => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_PE_1_0_read);

    C_drain_IO_L1_out_wrapper_U0 : component kernel0_C_drain_IO_L1_out_wrapper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L1_out_wrapper_U0_ap_start,
        start_full_n => start_for_C_drain_IO_L2_out_U0_full_n,
        ap_done => C_drain_IO_L1_out_wrapper_U0_ap_done,
        ap_continue => C_drain_IO_L1_out_wrapper_U0_ap_continue,
        ap_idle => C_drain_IO_L1_out_wrapper_U0_ap_idle,
        ap_ready => C_drain_IO_L1_out_wrapper_U0_ap_ready,
        start_out => C_drain_IO_L1_out_wrapper_U0_start_out,
        start_write => C_drain_IO_L1_out_wrapper_U0_start_write,
        fifo_C_drain_C_drain_IO_L1_out_0_1_dout => fifo_C_drain_C_drain_IO_L1_out_0_1_dout,
        fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_0_1_empty_n => fifo_C_drain_C_drain_IO_L1_out_0_1_empty_n,
        fifo_C_drain_C_drain_IO_L1_out_0_1_read => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_read,
        fifo_C_drain_C_drain_IO_L1_out_0_0_din => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_din,
        fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_0_0_full_n => fifo_C_drain_C_drain_IO_L1_out_0_0_full_n,
        fifo_C_drain_C_drain_IO_L1_out_0_0_write => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_write,
        fifo_C_drain_PE_0_0_dout => fifo_C_drain_PE_0_0_dout,
        fifo_C_drain_PE_0_0_num_data_valid => fifo_C_drain_PE_0_0_num_data_valid,
        fifo_C_drain_PE_0_0_fifo_cap => fifo_C_drain_PE_0_0_fifo_cap,
        fifo_C_drain_PE_0_0_empty_n => fifo_C_drain_PE_0_0_empty_n,
        fifo_C_drain_PE_0_0_read => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_PE_0_0_read);

    C_drain_IO_L1_out_boundary_wrapper_6_U0 : component kernel0_C_drain_IO_L1_out_boundary_wrapper_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_start,
        ap_done => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_done,
        ap_continue => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_continue,
        ap_idle => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_idle,
        ap_ready => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_ready,
        fifo_C_drain_C_drain_IO_L1_out_1_1_din => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_din,
        fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_1_1_full_n => fifo_C_drain_C_drain_IO_L1_out_1_1_full_n,
        fifo_C_drain_C_drain_IO_L1_out_1_1_write => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_write,
        fifo_C_drain_PE_1_1_dout => fifo_C_drain_PE_1_1_dout,
        fifo_C_drain_PE_1_1_num_data_valid => fifo_C_drain_PE_1_1_num_data_valid,
        fifo_C_drain_PE_1_1_fifo_cap => fifo_C_drain_PE_1_1_fifo_cap,
        fifo_C_drain_PE_1_1_empty_n => fifo_C_drain_PE_1_1_empty_n,
        fifo_C_drain_PE_1_1_read => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_PE_1_1_read);

    C_drain_IO_L1_out_wrapper_7_U0 : component kernel0_C_drain_IO_L1_out_wrapper_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L1_out_wrapper_7_U0_ap_start,
        start_full_n => start_for_C_drain_IO_L2_out_boundary_U0_full_n,
        ap_done => C_drain_IO_L1_out_wrapper_7_U0_ap_done,
        ap_continue => C_drain_IO_L1_out_wrapper_7_U0_ap_continue,
        ap_idle => C_drain_IO_L1_out_wrapper_7_U0_ap_idle,
        ap_ready => C_drain_IO_L1_out_wrapper_7_U0_ap_ready,
        start_out => C_drain_IO_L1_out_wrapper_7_U0_start_out,
        start_write => C_drain_IO_L1_out_wrapper_7_U0_start_write,
        fifo_C_drain_C_drain_IO_L1_out_1_1_dout => fifo_C_drain_C_drain_IO_L1_out_1_1_dout,
        fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_1_1_empty_n => fifo_C_drain_C_drain_IO_L1_out_1_1_empty_n,
        fifo_C_drain_C_drain_IO_L1_out_1_1_read => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_read,
        fifo_C_drain_C_drain_IO_L1_out_1_0_din => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_din,
        fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_1_0_full_n => fifo_C_drain_C_drain_IO_L1_out_1_0_full_n,
        fifo_C_drain_C_drain_IO_L1_out_1_0_write => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_write,
        fifo_C_drain_PE_0_1_dout => fifo_C_drain_PE_0_1_dout,
        fifo_C_drain_PE_0_1_num_data_valid => fifo_C_drain_PE_0_1_num_data_valid,
        fifo_C_drain_PE_0_1_fifo_cap => fifo_C_drain_PE_0_1_fifo_cap,
        fifo_C_drain_PE_0_1_empty_n => fifo_C_drain_PE_0_1_empty_n,
        fifo_C_drain_PE_0_1_read => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_PE_0_1_read);

    C_drain_IO_L2_out_boundary_U0 : component kernel0_C_drain_IO_L2_out_boundary
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L2_out_boundary_U0_ap_start,
        ap_done => C_drain_IO_L2_out_boundary_U0_ap_done,
        ap_continue => C_drain_IO_L2_out_boundary_U0_ap_continue,
        ap_idle => C_drain_IO_L2_out_boundary_U0_ap_idle,
        ap_ready => C_drain_IO_L2_out_boundary_U0_ap_ready,
        fifo_C_drain_C_drain_IO_L1_out_1_0_dout => fifo_C_drain_C_drain_IO_L1_out_1_0_dout,
        fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_1_0_empty_n => fifo_C_drain_C_drain_IO_L1_out_1_0_empty_n,
        fifo_C_drain_C_drain_IO_L1_out_1_0_read => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_read,
        fifo_C_drain_C_drain_IO_L2_out_1_din => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_din,
        fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L2_out_1_full_n => fifo_C_drain_C_drain_IO_L2_out_1_full_n,
        fifo_C_drain_C_drain_IO_L2_out_1_write => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_write);

    C_drain_IO_L2_out_U0 : component kernel0_C_drain_IO_L2_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L2_out_U0_ap_start,
        start_full_n => start_for_C_drain_IO_L3_out_U0_full_n,
        ap_done => C_drain_IO_L2_out_U0_ap_done,
        ap_continue => C_drain_IO_L2_out_U0_ap_continue,
        ap_idle => C_drain_IO_L2_out_U0_ap_idle,
        ap_ready => C_drain_IO_L2_out_U0_ap_ready,
        start_out => C_drain_IO_L2_out_U0_start_out,
        start_write => C_drain_IO_L2_out_U0_start_write,
        fifo_C_drain_C_drain_IO_L2_out_1_dout => fifo_C_drain_C_drain_IO_L2_out_1_dout,
        fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid,
        fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap,
        fifo_C_drain_C_drain_IO_L2_out_1_empty_n => fifo_C_drain_C_drain_IO_L2_out_1_empty_n,
        fifo_C_drain_C_drain_IO_L2_out_1_read => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_1_read,
        fifo_C_drain_C_drain_IO_L2_out_0_din => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_din,
        fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L2_out_0_full_n => fifo_C_drain_C_drain_IO_L2_out_0_full_n,
        fifo_C_drain_C_drain_IO_L2_out_0_write => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_write,
        fifo_C_drain_C_drain_IO_L1_out_0_0_dout => fifo_C_drain_C_drain_IO_L1_out_0_0_dout,
        fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L1_out_0_0_empty_n => fifo_C_drain_C_drain_IO_L1_out_0_0_empty_n,
        fifo_C_drain_C_drain_IO_L1_out_0_0_read => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_read);

    C_drain_IO_L3_out_U0 : component kernel0_C_drain_IO_L3_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L3_out_U0_ap_start,
        ap_done => C_drain_IO_L3_out_U0_ap_done,
        ap_continue => C_drain_IO_L3_out_U0_ap_continue,
        ap_idle => C_drain_IO_L3_out_U0_ap_idle,
        ap_ready => C_drain_IO_L3_out_U0_ap_ready,
        fifo_C_drain_C_drain_IO_L2_out_0_dout => fifo_C_drain_C_drain_IO_L2_out_0_dout,
        fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid,
        fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap,
        fifo_C_drain_C_drain_IO_L2_out_0_empty_n => fifo_C_drain_C_drain_IO_L2_out_0_empty_n,
        fifo_C_drain_C_drain_IO_L2_out_0_read => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_read,
        fifo_C_drain_C_drain_IO_L3_out_serialize_din => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_din,
        fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid => fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid,
        fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap => fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap,
        fifo_C_drain_C_drain_IO_L3_out_serialize_full_n => fifo_C_drain_C_drain_IO_L3_out_serialize_full_n,
        fifo_C_drain_C_drain_IO_L3_out_serialize_write => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_write);

    C_drain_IO_L3_out_serialize_U0 : component kernel0_C_drain_IO_L3_out_serialize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => C_drain_IO_L3_out_serialize_U0_ap_start,
        ap_done => C_drain_IO_L3_out_serialize_U0_ap_done,
        ap_continue => C_drain_IO_L3_out_serialize_U0_ap_continue,
        ap_idle => C_drain_IO_L3_out_serialize_U0_ap_idle,
        ap_ready => C_drain_IO_L3_out_serialize_U0_ap_ready,
        fifo_C_drain_C_drain_IO_L3_out_serialize_dout => fifo_C_drain_C_drain_IO_L3_out_serialize_dout,
        fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid => fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid,
        fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap => fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap,
        fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n => fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n,
        fifo_C_drain_C_drain_IO_L3_out_serialize_read => C_drain_IO_L3_out_serialize_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_read,
        m_axi_gmem_C_AWVALID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWVALID,
        m_axi_gmem_C_AWREADY => gmem_C_AWREADY,
        m_axi_gmem_C_AWADDR => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWADDR,
        m_axi_gmem_C_AWID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWID,
        m_axi_gmem_C_AWLEN => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWLEN,
        m_axi_gmem_C_AWSIZE => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWSIZE,
        m_axi_gmem_C_AWBURST => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWBURST,
        m_axi_gmem_C_AWLOCK => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWLOCK,
        m_axi_gmem_C_AWCACHE => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWCACHE,
        m_axi_gmem_C_AWPROT => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWPROT,
        m_axi_gmem_C_AWQOS => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWQOS,
        m_axi_gmem_C_AWREGION => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWREGION,
        m_axi_gmem_C_AWUSER => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_AWUSER,
        m_axi_gmem_C_WVALID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WVALID,
        m_axi_gmem_C_WREADY => gmem_C_WREADY,
        m_axi_gmem_C_WDATA => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WDATA,
        m_axi_gmem_C_WSTRB => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WSTRB,
        m_axi_gmem_C_WLAST => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WLAST,
        m_axi_gmem_C_WID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WID,
        m_axi_gmem_C_WUSER => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_WUSER,
        m_axi_gmem_C_ARVALID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARVALID,
        m_axi_gmem_C_ARREADY => ap_const_logic_0,
        m_axi_gmem_C_ARADDR => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARADDR,
        m_axi_gmem_C_ARID => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARID,
        m_axi_gmem_C_ARLEN => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARLEN,
        m_axi_gmem_C_ARSIZE => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARSIZE,
        m_axi_gmem_C_ARBURST => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARBURST,
        m_axi_gmem_C_ARLOCK => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARLOCK,
        m_axi_gmem_C_ARCACHE => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARCACHE,
        m_axi_gmem_C_ARPROT => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARPROT,
        m_axi_gmem_C_ARQOS => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARQOS,
        m_axi_gmem_C_ARREGION => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARREGION,
        m_axi_gmem_C_ARUSER => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_ARUSER,
        m_axi_gmem_C_RVALID => ap_const_logic_0,
        m_axi_gmem_C_RREADY => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_RREADY,
        m_axi_gmem_C_RDATA => ap_const_lv512_lc_1,
        m_axi_gmem_C_RLAST => ap_const_logic_0,
        m_axi_gmem_C_RID => ap_const_lv1_0,
        m_axi_gmem_C_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_C_RUSER => ap_const_lv1_0,
        m_axi_gmem_C_RRESP => ap_const_lv2_0,
        m_axi_gmem_C_BVALID => gmem_C_BVALID,
        m_axi_gmem_C_BREADY => C_drain_IO_L3_out_serialize_U0_m_axi_gmem_C_BREADY,
        m_axi_gmem_C_BRESP => gmem_C_BRESP,
        m_axi_gmem_C_BID => gmem_C_BID,
        m_axi_gmem_C_BUSER => gmem_C_BUSER,
        C_dout => C_c_dout,
        C_num_data_valid => C_c_num_data_valid,
        C_fifo_cap => C_c_fifo_cap,
        C_empty_n => C_c_empty_n,
        C_read => C_drain_IO_L3_out_serialize_U0_C_read);

    C_c_U : component kernel0_fifo_w64_d13_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_C_c_din,
        if_full_n => C_c_full_n,
        if_write => entry_proc_U0_C_c_write,
        if_dout => C_c_dout,
        if_num_data_valid => C_c_num_data_valid,
        if_fifo_cap => C_c_fifo_cap,
        if_empty_n => C_c_empty_n,
        if_read => C_drain_IO_L3_out_serialize_U0_C_read);

    fifo_A_A_IO_L3_in_serialize_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_din,
        if_full_n => fifo_A_A_IO_L3_in_serialize_full_n,
        if_write => A_IO_L3_in_serialize_U0_fifo_A_A_IO_L3_in_serialize_write,
        if_dout => fifo_A_A_IO_L3_in_serialize_dout,
        if_num_data_valid => fifo_A_A_IO_L3_in_serialize_num_data_valid,
        if_fifo_cap => fifo_A_A_IO_L3_in_serialize_fifo_cap,
        if_empty_n => fifo_A_A_IO_L3_in_serialize_empty_n,
        if_read => A_IO_L3_in_U0_fifo_A_A_IO_L3_in_serialize_read);

    fifo_A_A_IO_L2_in_0_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_din,
        if_full_n => fifo_A_A_IO_L2_in_0_full_n,
        if_write => A_IO_L3_in_U0_fifo_A_A_IO_L2_in_0_write,
        if_dout => fifo_A_A_IO_L2_in_0_dout,
        if_num_data_valid => fifo_A_A_IO_L2_in_0_num_data_valid,
        if_fifo_cap => fifo_A_A_IO_L2_in_0_fifo_cap,
        if_empty_n => fifo_A_A_IO_L2_in_0_empty_n,
        if_read => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_0_read);

    fifo_A_A_IO_L2_in_1_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_din,
        if_full_n => fifo_A_A_IO_L2_in_1_full_n,
        if_write => A_IO_L2_in_U0_fifo_A_A_IO_L2_in_1_write,
        if_dout => fifo_A_A_IO_L2_in_1_dout,
        if_num_data_valid => fifo_A_A_IO_L2_in_1_num_data_valid,
        if_fifo_cap => fifo_A_A_IO_L2_in_1_fifo_cap,
        if_empty_n => fifo_A_A_IO_L2_in_1_empty_n,
        if_read => A_IO_L2_in_boundary_U0_fifo_A_A_IO_L2_in_1_read);

    fifo_A_PE_0_0_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => A_IO_L2_in_U0_fifo_A_PE_0_0_din,
        if_full_n => fifo_A_PE_0_0_full_n,
        if_write => A_IO_L2_in_U0_fifo_A_PE_0_0_write,
        if_dout => fifo_A_PE_0_0_dout,
        if_num_data_valid => fifo_A_PE_0_0_num_data_valid,
        if_fifo_cap => fifo_A_PE_0_0_fifo_cap,
        if_empty_n => fifo_A_PE_0_0_empty_n,
        if_read => PE_wrapper_U0_fifo_A_PE_0_0_read);

    fifo_A_PE_1_0_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_din,
        if_full_n => fifo_A_PE_1_0_full_n,
        if_write => A_IO_L2_in_boundary_U0_fifo_A_PE_1_0_write,
        if_dout => fifo_A_PE_1_0_dout,
        if_num_data_valid => fifo_A_PE_1_0_num_data_valid,
        if_fifo_cap => fifo_A_PE_1_0_fifo_cap,
        if_empty_n => fifo_A_PE_1_0_empty_n,
        if_read => PE_wrapper_4_U0_fifo_A_PE_1_0_read);

    fifo_B_B_IO_L3_in_serialize_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_din,
        if_full_n => fifo_B_B_IO_L3_in_serialize_full_n,
        if_write => B_IO_L3_in_serialize_U0_fifo_B_B_IO_L3_in_serialize_write,
        if_dout => fifo_B_B_IO_L3_in_serialize_dout,
        if_num_data_valid => fifo_B_B_IO_L3_in_serialize_num_data_valid,
        if_fifo_cap => fifo_B_B_IO_L3_in_serialize_fifo_cap,
        if_empty_n => fifo_B_B_IO_L3_in_serialize_empty_n,
        if_read => B_IO_L3_in_U0_fifo_B_B_IO_L3_in_serialize_read);

    fifo_B_B_IO_L2_in_0_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_din,
        if_full_n => fifo_B_B_IO_L2_in_0_full_n,
        if_write => B_IO_L3_in_U0_fifo_B_B_IO_L2_in_0_write,
        if_dout => fifo_B_B_IO_L2_in_0_dout,
        if_num_data_valid => fifo_B_B_IO_L2_in_0_num_data_valid,
        if_fifo_cap => fifo_B_B_IO_L2_in_0_fifo_cap,
        if_empty_n => fifo_B_B_IO_L2_in_0_empty_n,
        if_read => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_0_read);

    fifo_B_B_IO_L2_in_1_U : component kernel0_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_din,
        if_full_n => fifo_B_B_IO_L2_in_1_full_n,
        if_write => B_IO_L2_in_U0_fifo_B_B_IO_L2_in_1_write,
        if_dout => fifo_B_B_IO_L2_in_1_dout,
        if_num_data_valid => fifo_B_B_IO_L2_in_1_num_data_valid,
        if_fifo_cap => fifo_B_B_IO_L2_in_1_fifo_cap,
        if_empty_n => fifo_B_B_IO_L2_in_1_empty_n,
        if_read => B_IO_L2_in_boundary_U0_fifo_B_B_IO_L2_in_1_read);

    fifo_B_PE_0_0_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => B_IO_L2_in_U0_fifo_B_PE_0_0_din,
        if_full_n => fifo_B_PE_0_0_full_n,
        if_write => B_IO_L2_in_U0_fifo_B_PE_0_0_write,
        if_dout => fifo_B_PE_0_0_dout,
        if_num_data_valid => fifo_B_PE_0_0_num_data_valid,
        if_fifo_cap => fifo_B_PE_0_0_fifo_cap,
        if_empty_n => fifo_B_PE_0_0_empty_n,
        if_read => PE_wrapper_U0_fifo_B_PE_0_0_read);

    fifo_B_PE_0_1_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_din,
        if_full_n => fifo_B_PE_0_1_full_n,
        if_write => B_IO_L2_in_boundary_U0_fifo_B_PE_0_1_write,
        if_dout => fifo_B_PE_0_1_dout,
        if_num_data_valid => fifo_B_PE_0_1_num_data_valid,
        if_fifo_cap => fifo_B_PE_0_1_fifo_cap,
        if_empty_n => fifo_B_PE_0_1_empty_n,
        if_read => PE_wrapper_3_U0_fifo_B_PE_0_1_read);

    fifo_A_PE_0_1_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_U0_fifo_A_PE_0_1_din,
        if_full_n => fifo_A_PE_0_1_full_n,
        if_write => PE_wrapper_U0_fifo_A_PE_0_1_write,
        if_dout => fifo_A_PE_0_1_dout,
        if_num_data_valid => fifo_A_PE_0_1_num_data_valid,
        if_fifo_cap => fifo_A_PE_0_1_fifo_cap,
        if_empty_n => fifo_A_PE_0_1_empty_n,
        if_read => PE_wrapper_3_U0_fifo_A_PE_0_1_read);

    fifo_B_PE_1_0_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_U0_fifo_B_PE_1_0_din,
        if_full_n => fifo_B_PE_1_0_full_n,
        if_write => PE_wrapper_U0_fifo_B_PE_1_0_write,
        if_dout => fifo_B_PE_1_0_dout,
        if_num_data_valid => fifo_B_PE_1_0_num_data_valid,
        if_fifo_cap => fifo_B_PE_1_0_fifo_cap,
        if_empty_n => fifo_B_PE_1_0_empty_n,
        if_read => PE_wrapper_4_U0_fifo_B_PE_1_0_read);

    fifo_C_drain_PE_0_0_U : component kernel0_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_U0_fifo_C_drain_PE_0_0_din,
        if_full_n => fifo_C_drain_PE_0_0_full_n,
        if_write => PE_wrapper_U0_fifo_C_drain_PE_0_0_write,
        if_dout => fifo_C_drain_PE_0_0_dout,
        if_num_data_valid => fifo_C_drain_PE_0_0_num_data_valid,
        if_fifo_cap => fifo_C_drain_PE_0_0_fifo_cap,
        if_empty_n => fifo_C_drain_PE_0_0_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_PE_0_0_read);

    fifo_A_PE_0_2_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_3_U0_fifo_A_PE_0_2_din,
        if_full_n => fifo_A_PE_0_2_full_n,
        if_write => PE_wrapper_3_U0_fifo_A_PE_0_2_write,
        if_dout => fifo_A_PE_0_2_dout,
        if_num_data_valid => fifo_A_PE_0_2_num_data_valid,
        if_fifo_cap => fifo_A_PE_0_2_fifo_cap,
        if_empty_n => fifo_A_PE_0_2_empty_n,
        if_read => A_PE_dummy_in_1_U0_fifo_A_PE_0_2_read);

    fifo_B_PE_1_1_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_3_U0_fifo_B_PE_1_1_din,
        if_full_n => fifo_B_PE_1_1_full_n,
        if_write => PE_wrapper_3_U0_fifo_B_PE_1_1_write,
        if_dout => fifo_B_PE_1_1_dout,
        if_num_data_valid => fifo_B_PE_1_1_num_data_valid,
        if_fifo_cap => fifo_B_PE_1_1_fifo_cap,
        if_empty_n => fifo_B_PE_1_1_empty_n,
        if_read => PE_wrapper_5_U0_fifo_B_PE_1_1_read);

    fifo_C_drain_PE_0_1_U : component kernel0_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_3_U0_fifo_C_drain_PE_0_1_din,
        if_full_n => fifo_C_drain_PE_0_1_full_n,
        if_write => PE_wrapper_3_U0_fifo_C_drain_PE_0_1_write,
        if_dout => fifo_C_drain_PE_0_1_dout,
        if_num_data_valid => fifo_C_drain_PE_0_1_num_data_valid,
        if_fifo_cap => fifo_C_drain_PE_0_1_fifo_cap,
        if_empty_n => fifo_C_drain_PE_0_1_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_PE_0_1_read);

    fifo_A_PE_1_1_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_4_U0_fifo_A_PE_1_1_din,
        if_full_n => fifo_A_PE_1_1_full_n,
        if_write => PE_wrapper_4_U0_fifo_A_PE_1_1_write,
        if_dout => fifo_A_PE_1_1_dout,
        if_num_data_valid => fifo_A_PE_1_1_num_data_valid,
        if_fifo_cap => fifo_A_PE_1_1_fifo_cap,
        if_empty_n => fifo_A_PE_1_1_empty_n,
        if_read => PE_wrapper_5_U0_fifo_A_PE_1_1_read);

    fifo_B_PE_2_0_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_4_U0_fifo_B_PE_2_0_din,
        if_full_n => fifo_B_PE_2_0_full_n,
        if_write => PE_wrapper_4_U0_fifo_B_PE_2_0_write,
        if_dout => fifo_B_PE_2_0_dout,
        if_num_data_valid => fifo_B_PE_2_0_num_data_valid,
        if_fifo_cap => fifo_B_PE_2_0_fifo_cap,
        if_empty_n => fifo_B_PE_2_0_empty_n,
        if_read => B_PE_dummy_in_2_U0_fifo_B_PE_2_0_read);

    fifo_C_drain_PE_1_0_U : component kernel0_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_4_U0_fifo_C_drain_PE_1_0_din,
        if_full_n => fifo_C_drain_PE_1_0_full_n,
        if_write => PE_wrapper_4_U0_fifo_C_drain_PE_1_0_write,
        if_dout => fifo_C_drain_PE_1_0_dout,
        if_num_data_valid => fifo_C_drain_PE_1_0_num_data_valid,
        if_fifo_cap => fifo_C_drain_PE_1_0_fifo_cap,
        if_empty_n => fifo_C_drain_PE_1_0_empty_n,
        if_read => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_PE_1_0_read);

    fifo_A_PE_1_2_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_5_U0_fifo_A_PE_1_2_din,
        if_full_n => fifo_A_PE_1_2_full_n,
        if_write => PE_wrapper_5_U0_fifo_A_PE_1_2_write,
        if_dout => fifo_A_PE_1_2_dout,
        if_num_data_valid => fifo_A_PE_1_2_num_data_valid,
        if_fifo_cap => fifo_A_PE_1_2_fifo_cap,
        if_empty_n => fifo_A_PE_1_2_empty_n,
        if_read => A_PE_dummy_in_U0_fifo_A_PE_1_2_read);

    fifo_B_PE_2_1_U : component kernel0_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_5_U0_fifo_B_PE_2_1_din,
        if_full_n => fifo_B_PE_2_1_full_n,
        if_write => PE_wrapper_5_U0_fifo_B_PE_2_1_write,
        if_dout => fifo_B_PE_2_1_dout,
        if_num_data_valid => fifo_B_PE_2_1_num_data_valid,
        if_fifo_cap => fifo_B_PE_2_1_fifo_cap,
        if_empty_n => fifo_B_PE_2_1_empty_n,
        if_read => B_PE_dummy_in_U0_fifo_B_PE_2_1_read);

    fifo_C_drain_PE_1_1_U : component kernel0_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_wrapper_5_U0_fifo_C_drain_PE_1_1_din,
        if_full_n => fifo_C_drain_PE_1_1_full_n,
        if_write => PE_wrapper_5_U0_fifo_C_drain_PE_1_1_write,
        if_dout => fifo_C_drain_PE_1_1_dout,
        if_num_data_valid => fifo_C_drain_PE_1_1_num_data_valid,
        if_fifo_cap => fifo_C_drain_PE_1_1_fifo_cap,
        if_empty_n => fifo_C_drain_PE_1_1_empty_n,
        if_read => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_PE_1_1_read);

    fifo_C_drain_C_drain_IO_L1_out_0_1_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_din,
        if_full_n => fifo_C_drain_C_drain_IO_L1_out_0_1_full_n,
        if_write => C_drain_IO_L1_out_boundary_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_write,
        if_dout => fifo_C_drain_C_drain_IO_L1_out_0_1_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_1_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_1_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L1_out_0_1_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_1_read);

    fifo_C_drain_C_drain_IO_L1_out_0_0_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_din,
        if_full_n => fifo_C_drain_C_drain_IO_L1_out_0_0_full_n,
        if_write => C_drain_IO_L1_out_wrapper_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_write,
        if_dout => fifo_C_drain_C_drain_IO_L1_out_0_0_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_0_0_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_0_0_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L1_out_0_0_empty_n,
        if_read => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L1_out_0_0_read);

    fifo_C_drain_C_drain_IO_L1_out_1_1_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_din,
        if_full_n => fifo_C_drain_C_drain_IO_L1_out_1_1_full_n,
        if_write => C_drain_IO_L1_out_boundary_wrapper_6_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_write,
        if_dout => fifo_C_drain_C_drain_IO_L1_out_1_1_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_1_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_1_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L1_out_1_1_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_1_read);

    fifo_C_drain_C_drain_IO_L1_out_1_0_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_din,
        if_full_n => fifo_C_drain_C_drain_IO_L1_out_1_0_full_n,
        if_write => C_drain_IO_L1_out_wrapper_7_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_write,
        if_dout => fifo_C_drain_C_drain_IO_L1_out_1_0_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L1_out_1_0_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L1_out_1_0_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L1_out_1_0_empty_n,
        if_read => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L1_out_1_0_read);

    fifo_C_drain_C_drain_IO_L2_out_1_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_din,
        if_full_n => fifo_C_drain_C_drain_IO_L2_out_1_full_n,
        if_write => C_drain_IO_L2_out_boundary_U0_fifo_C_drain_C_drain_IO_L2_out_1_write,
        if_dout => fifo_C_drain_C_drain_IO_L2_out_1_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_1_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_1_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L2_out_1_empty_n,
        if_read => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_1_read);

    fifo_C_drain_C_drain_IO_L2_out_0_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_din,
        if_full_n => fifo_C_drain_C_drain_IO_L2_out_0_full_n,
        if_write => C_drain_IO_L2_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_write,
        if_dout => fifo_C_drain_C_drain_IO_L2_out_0_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L2_out_0_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L2_out_0_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L2_out_0_empty_n,
        if_read => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L2_out_0_read);

    fifo_C_drain_C_drain_IO_L3_out_serialize_U : component kernel0_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_din,
        if_full_n => fifo_C_drain_C_drain_IO_L3_out_serialize_full_n,
        if_write => C_drain_IO_L3_out_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_write,
        if_dout => fifo_C_drain_C_drain_IO_L3_out_serialize_dout,
        if_num_data_valid => fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid,
        if_fifo_cap => fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap,
        if_empty_n => fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n,
        if_read => C_drain_IO_L3_out_serialize_U0_fifo_C_drain_C_drain_IO_L3_out_serialize_read);

    start_for_C_drain_IO_L3_out_serialize_U0_U : component kernel0_start_for_C_drain_IO_L3_out_serialize_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L3_out_serialize_U0_din,
        if_full_n => start_for_C_drain_IO_L3_out_serialize_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_C_drain_IO_L3_out_serialize_U0_dout,
        if_empty_n => start_for_C_drain_IO_L3_out_serialize_U0_empty_n,
        if_read => C_drain_IO_L3_out_serialize_U0_ap_ready);

    start_for_A_IO_L3_in_U0_U : component kernel0_start_for_A_IO_L3_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_A_IO_L3_in_U0_din,
        if_full_n => start_for_A_IO_L3_in_U0_full_n,
        if_write => A_IO_L3_in_serialize_U0_start_write,
        if_dout => start_for_A_IO_L3_in_U0_dout,
        if_empty_n => start_for_A_IO_L3_in_U0_empty_n,
        if_read => A_IO_L3_in_U0_ap_ready);

    start_for_A_IO_L2_in_U0_U : component kernel0_start_for_A_IO_L2_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_A_IO_L2_in_U0_din,
        if_full_n => start_for_A_IO_L2_in_U0_full_n,
        if_write => A_IO_L3_in_U0_start_write,
        if_dout => start_for_A_IO_L2_in_U0_dout,
        if_empty_n => start_for_A_IO_L2_in_U0_empty_n,
        if_read => A_IO_L2_in_U0_ap_ready);

    start_for_A_IO_L2_in_boundary_U0_U : component kernel0_start_for_A_IO_L2_in_boundary_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_A_IO_L2_in_boundary_U0_din,
        if_full_n => start_for_A_IO_L2_in_boundary_U0_full_n,
        if_write => A_IO_L2_in_U0_start_write,
        if_dout => start_for_A_IO_L2_in_boundary_U0_dout,
        if_empty_n => start_for_A_IO_L2_in_boundary_U0_empty_n,
        if_read => A_IO_L2_in_boundary_U0_ap_ready);

    start_for_PE_wrapper_U0_U : component kernel0_start_for_PE_wrapper_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PE_wrapper_U0_din,
        if_full_n => start_for_PE_wrapper_U0_full_n,
        if_write => A_IO_L2_in_U0_start_write,
        if_dout => start_for_PE_wrapper_U0_dout,
        if_empty_n => start_for_PE_wrapper_U0_empty_n,
        if_read => PE_wrapper_U0_ap_ready);

    start_for_PE_wrapper_4_U0_U : component kernel0_start_for_PE_wrapper_4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PE_wrapper_4_U0_din,
        if_full_n => start_for_PE_wrapper_4_U0_full_n,
        if_write => A_IO_L2_in_boundary_U0_start_write,
        if_dout => start_for_PE_wrapper_4_U0_dout,
        if_empty_n => start_for_PE_wrapper_4_U0_empty_n,
        if_read => PE_wrapper_4_U0_ap_ready);

    start_for_B_IO_L3_in_U0_U : component kernel0_start_for_B_IO_L3_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_B_IO_L3_in_U0_din,
        if_full_n => start_for_B_IO_L3_in_U0_full_n,
        if_write => B_IO_L3_in_serialize_U0_start_write,
        if_dout => start_for_B_IO_L3_in_U0_dout,
        if_empty_n => start_for_B_IO_L3_in_U0_empty_n,
        if_read => B_IO_L3_in_U0_ap_ready);

    start_for_B_IO_L2_in_U0_U : component kernel0_start_for_B_IO_L2_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_B_IO_L2_in_U0_din,
        if_full_n => start_for_B_IO_L2_in_U0_full_n,
        if_write => B_IO_L3_in_U0_start_write,
        if_dout => start_for_B_IO_L2_in_U0_dout,
        if_empty_n => start_for_B_IO_L2_in_U0_empty_n,
        if_read => B_IO_L2_in_U0_ap_ready);

    start_for_B_IO_L2_in_boundary_U0_U : component kernel0_start_for_B_IO_L2_in_boundary_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_B_IO_L2_in_boundary_U0_din,
        if_full_n => start_for_B_IO_L2_in_boundary_U0_full_n,
        if_write => B_IO_L2_in_U0_start_write,
        if_dout => start_for_B_IO_L2_in_boundary_U0_dout,
        if_empty_n => start_for_B_IO_L2_in_boundary_U0_empty_n,
        if_read => B_IO_L2_in_boundary_U0_ap_ready);

    start_for_PE_wrapper_3_U0_U : component kernel0_start_for_PE_wrapper_3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PE_wrapper_3_U0_din,
        if_full_n => start_for_PE_wrapper_3_U0_full_n,
        if_write => B_IO_L2_in_boundary_U0_start_write,
        if_dout => start_for_PE_wrapper_3_U0_dout,
        if_empty_n => start_for_PE_wrapper_3_U0_empty_n,
        if_read => PE_wrapper_3_U0_ap_ready);

    start_for_C_drain_IO_L1_out_wrapper_U0_U : component kernel0_start_for_C_drain_IO_L1_out_wrapper_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L1_out_wrapper_U0_din,
        if_full_n => start_for_C_drain_IO_L1_out_wrapper_U0_full_n,
        if_write => PE_wrapper_U0_start_write,
        if_dout => start_for_C_drain_IO_L1_out_wrapper_U0_dout,
        if_empty_n => start_for_C_drain_IO_L1_out_wrapper_U0_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_U0_ap_ready);

    start_for_PE_wrapper_5_U0_U : component kernel0_start_for_PE_wrapper_5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PE_wrapper_5_U0_din,
        if_full_n => start_for_PE_wrapper_5_U0_full_n,
        if_write => PE_wrapper_3_U0_start_write,
        if_dout => start_for_PE_wrapper_5_U0_dout,
        if_empty_n => start_for_PE_wrapper_5_U0_empty_n,
        if_read => PE_wrapper_5_U0_ap_ready);

    start_for_A_PE_dummy_in_1_U0_U : component kernel0_start_for_A_PE_dummy_in_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_A_PE_dummy_in_1_U0_din,
        if_full_n => start_for_A_PE_dummy_in_1_U0_full_n,
        if_write => PE_wrapper_3_U0_start_write,
        if_dout => start_for_A_PE_dummy_in_1_U0_dout,
        if_empty_n => start_for_A_PE_dummy_in_1_U0_empty_n,
        if_read => A_PE_dummy_in_1_U0_ap_ready);

    start_for_C_drain_IO_L1_out_wrapper_7_U0_U : component kernel0_start_for_C_drain_IO_L1_out_wrapper_7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L1_out_wrapper_7_U0_din,
        if_full_n => start_for_C_drain_IO_L1_out_wrapper_7_U0_full_n,
        if_write => PE_wrapper_3_U0_start_write,
        if_dout => start_for_C_drain_IO_L1_out_wrapper_7_U0_dout,
        if_empty_n => start_for_C_drain_IO_L1_out_wrapper_7_U0_empty_n,
        if_read => C_drain_IO_L1_out_wrapper_7_U0_ap_ready);

    start_for_B_PE_dummy_in_2_U0_U : component kernel0_start_for_B_PE_dummy_in_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_B_PE_dummy_in_2_U0_din,
        if_full_n => start_for_B_PE_dummy_in_2_U0_full_n,
        if_write => PE_wrapper_4_U0_start_write,
        if_dout => start_for_B_PE_dummy_in_2_U0_dout,
        if_empty_n => start_for_B_PE_dummy_in_2_U0_empty_n,
        if_read => B_PE_dummy_in_2_U0_ap_ready);

    start_for_C_drain_IO_L1_out_boundary_wrapper_U0_U : component kernel0_start_for_C_drain_IO_L1_out_boundary_wrapper_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L1_out_boundary_wrapper_U0_din,
        if_full_n => start_for_C_drain_IO_L1_out_boundary_wrapper_U0_full_n,
        if_write => PE_wrapper_4_U0_start_write,
        if_dout => start_for_C_drain_IO_L1_out_boundary_wrapper_U0_dout,
        if_empty_n => start_for_C_drain_IO_L1_out_boundary_wrapper_U0_empty_n,
        if_read => C_drain_IO_L1_out_boundary_wrapper_U0_ap_ready);

    start_for_A_PE_dummy_in_U0_U : component kernel0_start_for_A_PE_dummy_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_A_PE_dummy_in_U0_din,
        if_full_n => start_for_A_PE_dummy_in_U0_full_n,
        if_write => PE_wrapper_5_U0_start_write,
        if_dout => start_for_A_PE_dummy_in_U0_dout,
        if_empty_n => start_for_A_PE_dummy_in_U0_empty_n,
        if_read => A_PE_dummy_in_U0_ap_ready);

    start_for_B_PE_dummy_in_U0_U : component kernel0_start_for_B_PE_dummy_in_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_B_PE_dummy_in_U0_din,
        if_full_n => start_for_B_PE_dummy_in_U0_full_n,
        if_write => PE_wrapper_5_U0_start_write,
        if_dout => start_for_B_PE_dummy_in_U0_dout,
        if_empty_n => start_for_B_PE_dummy_in_U0_empty_n,
        if_read => B_PE_dummy_in_U0_ap_ready);

    start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_U : component kernel0_start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_din,
        if_full_n => start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_full_n,
        if_write => PE_wrapper_5_U0_start_write,
        if_dout => start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_dout,
        if_empty_n => start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_empty_n,
        if_read => C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_ready);

    start_for_C_drain_IO_L2_out_U0_U : component kernel0_start_for_C_drain_IO_L2_out_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L2_out_U0_din,
        if_full_n => start_for_C_drain_IO_L2_out_U0_full_n,
        if_write => C_drain_IO_L1_out_wrapper_U0_start_write,
        if_dout => start_for_C_drain_IO_L2_out_U0_dout,
        if_empty_n => start_for_C_drain_IO_L2_out_U0_empty_n,
        if_read => C_drain_IO_L2_out_U0_ap_ready);

    start_for_C_drain_IO_L2_out_boundary_U0_U : component kernel0_start_for_C_drain_IO_L2_out_boundary_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L2_out_boundary_U0_din,
        if_full_n => start_for_C_drain_IO_L2_out_boundary_U0_full_n,
        if_write => C_drain_IO_L1_out_wrapper_7_U0_start_write,
        if_dout => start_for_C_drain_IO_L2_out_boundary_U0_dout,
        if_empty_n => start_for_C_drain_IO_L2_out_boundary_U0_empty_n,
        if_read => C_drain_IO_L2_out_boundary_U0_ap_ready);

    start_for_C_drain_IO_L3_out_U0_U : component kernel0_start_for_C_drain_IO_L3_out_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_C_drain_IO_L3_out_U0_din,
        if_full_n => start_for_C_drain_IO_L3_out_U0_full_n,
        if_write => C_drain_IO_L2_out_U0_start_write,
        if_dout => start_for_C_drain_IO_L3_out_U0_dout,
        if_empty_n => start_for_C_drain_IO_L3_out_U0_empty_n,
        if_read => C_drain_IO_L3_out_U0_ap_ready);





    ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready <= ap_sync_A_IO_L3_in_serialize_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready <= ap_sync_B_IO_L3_in_serialize_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    A_IO_L2_in_U0_ap_continue <= ap_const_logic_1;
    A_IO_L2_in_U0_ap_start <= start_for_A_IO_L2_in_U0_empty_n;
    A_IO_L2_in_U0_start_full_n <= (start_for_PE_wrapper_U0_full_n and start_for_A_IO_L2_in_boundary_U0_full_n);
    A_IO_L2_in_boundary_U0_ap_continue <= ap_const_logic_1;
    A_IO_L2_in_boundary_U0_ap_start <= start_for_A_IO_L2_in_boundary_U0_empty_n;
    A_IO_L3_in_U0_ap_continue <= ap_const_logic_1;
    A_IO_L3_in_U0_ap_start <= start_for_A_IO_L3_in_U0_empty_n;
    A_IO_L3_in_serialize_U0_ap_continue <= ap_const_logic_1;
    A_IO_L3_in_serialize_U0_ap_start <= ((ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready xor ap_const_logic_1) and ap_start);
    A_PE_dummy_in_1_U0_ap_continue <= ap_sync_done;
    A_PE_dummy_in_1_U0_ap_start <= start_for_A_PE_dummy_in_1_U0_empty_n;
    A_PE_dummy_in_U0_ap_continue <= ap_sync_done;
    A_PE_dummy_in_U0_ap_start <= start_for_A_PE_dummy_in_U0_empty_n;
    B_IO_L2_in_U0_ap_continue <= ap_const_logic_1;
    B_IO_L2_in_U0_ap_start <= start_for_B_IO_L2_in_U0_empty_n;
    B_IO_L2_in_boundary_U0_ap_continue <= ap_const_logic_1;
    B_IO_L2_in_boundary_U0_ap_start <= start_for_B_IO_L2_in_boundary_U0_empty_n;
    B_IO_L3_in_U0_ap_continue <= ap_const_logic_1;
    B_IO_L3_in_U0_ap_start <= start_for_B_IO_L3_in_U0_empty_n;
    B_IO_L3_in_serialize_U0_ap_continue <= ap_const_logic_1;
    B_IO_L3_in_serialize_U0_ap_start <= ((ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready xor ap_const_logic_1) and ap_start);
    B_PE_dummy_in_2_U0_ap_continue <= ap_sync_done;
    B_PE_dummy_in_2_U0_ap_start <= start_for_B_PE_dummy_in_2_U0_empty_n;
    B_PE_dummy_in_U0_ap_continue <= ap_sync_done;
    B_PE_dummy_in_U0_ap_start <= start_for_B_PE_dummy_in_U0_empty_n;
    C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_start <= start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_empty_n;
    C_drain_IO_L1_out_boundary_wrapper_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L1_out_boundary_wrapper_U0_ap_start <= start_for_C_drain_IO_L1_out_boundary_wrapper_U0_empty_n;
    C_drain_IO_L1_out_wrapper_7_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L1_out_wrapper_7_U0_ap_start <= start_for_C_drain_IO_L1_out_wrapper_7_U0_empty_n;
    C_drain_IO_L1_out_wrapper_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L1_out_wrapper_U0_ap_start <= start_for_C_drain_IO_L1_out_wrapper_U0_empty_n;
    C_drain_IO_L2_out_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L2_out_U0_ap_start <= start_for_C_drain_IO_L2_out_U0_empty_n;
    C_drain_IO_L2_out_boundary_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L2_out_boundary_U0_ap_start <= start_for_C_drain_IO_L2_out_boundary_U0_empty_n;
    C_drain_IO_L3_out_U0_ap_continue <= ap_const_logic_1;
    C_drain_IO_L3_out_U0_ap_start <= start_for_C_drain_IO_L3_out_U0_empty_n;
    C_drain_IO_L3_out_serialize_U0_ap_continue <= ap_sync_done;
    C_drain_IO_L3_out_serialize_U0_ap_start <= start_for_C_drain_IO_L3_out_serialize_U0_empty_n;
    PE_wrapper_3_U0_ap_continue <= ap_const_logic_1;
    PE_wrapper_3_U0_ap_start <= start_for_PE_wrapper_3_U0_empty_n;
    PE_wrapper_3_U0_start_full_n <= (start_for_PE_wrapper_5_U0_full_n and start_for_C_drain_IO_L1_out_wrapper_7_U0_full_n and start_for_A_PE_dummy_in_1_U0_full_n);
    PE_wrapper_4_U0_ap_continue <= ap_const_logic_1;
    PE_wrapper_4_U0_ap_start <= start_for_PE_wrapper_4_U0_empty_n;
    PE_wrapper_4_U0_start_full_n <= (start_for_C_drain_IO_L1_out_boundary_wrapper_U0_full_n and start_for_B_PE_dummy_in_2_U0_full_n);
    PE_wrapper_5_U0_ap_continue <= ap_const_logic_1;
    PE_wrapper_5_U0_ap_start <= start_for_PE_wrapper_5_U0_empty_n;
    PE_wrapper_5_U0_start_full_n <= (start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_full_n and start_for_B_PE_dummy_in_U0_full_n and start_for_A_PE_dummy_in_U0_full_n);
    PE_wrapper_U0_ap_continue <= ap_const_logic_1;
    PE_wrapper_U0_ap_start <= start_for_PE_wrapper_U0_empty_n;
    ap_done <= ap_sync_done;
    ap_idle <= (entry_proc_U0_ap_idle and PE_wrapper_U0_ap_idle and PE_wrapper_5_U0_ap_idle and PE_wrapper_4_U0_ap_idle and PE_wrapper_3_U0_ap_idle and C_drain_IO_L3_out_serialize_U0_ap_idle and C_drain_IO_L3_out_U0_ap_idle and C_drain_IO_L2_out_boundary_U0_ap_idle and C_drain_IO_L2_out_U0_ap_idle and C_drain_IO_L1_out_wrapper_U0_ap_idle and C_drain_IO_L1_out_wrapper_7_U0_ap_idle and C_drain_IO_L1_out_boundary_wrapper_U0_ap_idle and C_drain_IO_L1_out_boundary_wrapper_6_U0_ap_idle and B_PE_dummy_in_U0_ap_idle and B_PE_dummy_in_2_U0_ap_idle and B_IO_L3_in_serialize_U0_ap_idle and B_IO_L3_in_U0_ap_idle and B_IO_L2_in_boundary_U0_ap_idle and B_IO_L2_in_U0_ap_idle and A_PE_dummy_in_U0_ap_idle and A_PE_dummy_in_1_U0_ap_idle and A_IO_L3_in_serialize_U0_ap_idle and A_IO_L3_in_U0_ap_idle and A_IO_L2_in_boundary_U0_ap_idle and A_IO_L2_in_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_A_IO_L3_in_serialize_U0_ap_ready <= (ap_sync_reg_A_IO_L3_in_serialize_U0_ap_ready or A_IO_L3_in_serialize_U0_ap_ready);
    ap_sync_B_IO_L3_in_serialize_U0_ap_ready <= (ap_sync_reg_B_IO_L3_in_serialize_U0_ap_ready or B_IO_L3_in_serialize_U0_ap_ready);
    ap_sync_done <= (C_drain_IO_L3_out_serialize_U0_ap_done and B_PE_dummy_in_U0_ap_done and B_PE_dummy_in_2_U0_ap_done and A_PE_dummy_in_U0_ap_done and A_PE_dummy_in_1_U0_ap_done);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_B_IO_L3_in_serialize_U0_ap_ready and ap_sync_A_IO_L3_in_serialize_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gmem_A_RID <= ap_const_lv1_0;
    gmem_A_RLAST <= ap_const_logic_0;
    gmem_A_RRESP <= ap_const_lv2_0;
    gmem_A_RUSER <= ap_const_lv1_0;
    gmem_B_RID <= ap_const_lv1_0;
    gmem_B_RLAST <= ap_const_logic_0;
    gmem_B_RRESP <= ap_const_lv2_0;
    gmem_B_RUSER <= ap_const_lv1_0;
    gmem_C_BID <= ap_const_lv1_0;
    gmem_C_BRESP <= ap_const_lv2_0;
    gmem_C_BUSER <= ap_const_lv1_0;
    start_for_A_IO_L2_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_A_IO_L2_in_boundary_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_A_IO_L3_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_A_PE_dummy_in_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_A_PE_dummy_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_B_IO_L2_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_B_IO_L2_in_boundary_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_B_IO_L3_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_B_PE_dummy_in_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_B_PE_dummy_in_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L1_out_boundary_wrapper_6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L1_out_boundary_wrapper_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L1_out_wrapper_7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L1_out_wrapper_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L2_out_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L2_out_boundary_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L3_out_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_C_drain_IO_L3_out_serialize_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PE_wrapper_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PE_wrapper_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PE_wrapper_5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PE_wrapper_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
