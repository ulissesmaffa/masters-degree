-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_C_drain_IO_L3_out_serialize is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_C_drain_C_drain_IO_L3_out_serialize_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n : IN STD_LOGIC;
    fifo_C_drain_C_drain_IO_L3_out_serialize_read : OUT STD_LOGIC;
    m_axi_gmem_C_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_C_AWREADY : IN STD_LOGIC;
    m_axi_gmem_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_WVALID : OUT STD_LOGIC;
    m_axi_gmem_C_WREADY : IN STD_LOGIC;
    m_axi_gmem_C_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_C_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_C_WLAST : OUT STD_LOGIC;
    m_axi_gmem_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_C_ARREADY : IN STD_LOGIC;
    m_axi_gmem_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_RVALID : IN STD_LOGIC;
    m_axi_gmem_C_RREADY : OUT STD_LOGIC;
    m_axi_gmem_C_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_C_RLAST : IN STD_LOGIC;
    m_axi_gmem_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BVALID : IN STD_LOGIC;
    m_axi_gmem_C_BREADY : OUT STD_LOGIC;
    m_axi_gmem_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    C_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    C_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    C_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    C_empty_n : IN STD_LOGIC;
    C_read : OUT STD_LOGIC );
end;


architecture behav of kernel0_C_drain_IO_L3_out_serialize is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal icmp_ln1164_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_C_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal first_iter_0_reg_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_C_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_C_blk_n_B : STD_LOGIC;
    signal icmp_ln1164_1_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1164_1_reg_220_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal C_blk_n : STD_LOGIC;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1164_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1164_reg_216_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1164_1_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1164_1_reg_220_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1164_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1164_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op31_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229 : STD_LOGIC_VECTOR (127 downto 0);
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_predicate_op37_writereq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal i_fu_76 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1164_fu_142_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_fu_159_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage2 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_400 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component kernel0_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    first_iter_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    first_iter_0_reg_116 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_400)) then 
                    first_iter_0_reg_116 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_303)) then
                if ((icmp_ln1164_fu_136_p2 = ap_const_lv1_0)) then 
                    i_fu_76 <= add_ln1164_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1164_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1164_1_reg_220 <= icmp_ln1164_1_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1164_1_reg_220_pp0_iter1_reg <= icmp_ln1164_1_reg_220;
                icmp_ln1164_1_reg_220_pp0_iter2_reg <= icmp_ln1164_1_reg_220_pp0_iter1_reg;
                icmp_ln1164_reg_216 <= icmp_ln1164_fu_136_p2;
                icmp_ln1164_reg_216_pp0_iter1_reg <= icmp_ln1164_reg_216;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_0_reg_116 = ap_const_lv1_1))) then
                sext_ln1164_reg_224 <= sext_ln1164_fu_169_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage2, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    C_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1164_reg_216, C_empty_n, first_iter_0_reg_116, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_0_reg_116 = ap_const_lv1_1))) then 
            C_blk_n <= C_empty_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op31_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op31_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            C_read <= ap_const_logic_1;
        else 
            C_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1164_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, C_empty_n, ap_predicate_op31_read_state2)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)) or ((ap_const_logic_0 = C_empty_n) and (ap_predicate_op31_read_state2 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, m_axi_gmem_C_WREADY, C_empty_n, ap_predicate_op31_read_state2)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)) or ((ap_const_logic_0 = C_empty_n) and (ap_predicate_op31_read_state2 = ap_const_boolean_1)))) or ((m_axi_gmem_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, m_axi_gmem_C_WREADY, C_empty_n, ap_predicate_op31_read_state2)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)) or ((ap_const_logic_0 = C_empty_n) and (ap_predicate_op31_read_state2 = ap_const_boolean_1)))) or ((m_axi_gmem_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, m_axi_gmem_C_BVALID, icmp_ln1164_1_reg_220_pp0_iter2_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1164_1_reg_220_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_gmem_C_BVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, m_axi_gmem_C_BVALID, icmp_ln1164_1_reg_220_pp0_iter2_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1164_1_reg_220_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_gmem_C_BVALID = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, ap_done_reg)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, ap_done_reg)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage2_iter2_assign_proc : process(m_axi_gmem_C_BVALID, icmp_ln1164_1_reg_220_pp0_iter2_reg)
    begin
                ap_block_state11_pp0_stage2_iter2 <= ((icmp_ln1164_1_reg_220_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_gmem_C_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, C_empty_n, ap_predicate_op31_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0)) or ((ap_const_logic_0 = C_empty_n) and (ap_predicate_op31_read_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem_C_AWREADY, ap_predicate_op37_writereq_state3)
    begin
                ap_block_state3_io <= ((m_axi_gmem_C_AWREADY = ap_const_logic_0) and (ap_predicate_op37_writereq_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n = ap_const_logic_0);
    end process;

        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_303_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_303 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_400_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1164_reg_216, ap_block_pp0_stage0_11001)
    begin
                ap_condition_400 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, icmp_ln1164_reg_216, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (icmp_ln1164_reg_216 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln1164_reg_216_pp0_iter1_reg, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1164_reg_216_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter1_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_predicate_op31_read_state2_assign_proc : process(icmp_ln1164_reg_216, first_iter_0_reg_116)
    begin
                ap_predicate_op31_read_state2 <= ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (first_iter_0_reg_116 = ap_const_lv1_1));
    end process;


    ap_predicate_op37_writereq_state3_assign_proc : process(icmp_ln1164_reg_216, first_iter_0_reg_116)
    begin
                ap_predicate_op37_writereq_state3 <= ((icmp_ln1164_reg_216 = ap_const_lv1_0) and (first_iter_0_reg_116 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_76;
        end if; 
    end process;


    fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n, icmp_ln1164_reg_216, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n <= fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n;
        else 
            fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_C_drain_IO_L3_out_serialize_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln1164_reg_216, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fifo_C_drain_C_drain_IO_L3_out_serialize_read <= ap_const_logic_1;
        else 
            fifo_C_drain_C_drain_IO_L3_out_serialize_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem_C_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1164_reg_216, m_axi_gmem_C_AWREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, first_iter_0_reg_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln1164_reg_216 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (first_iter_0_reg_116 = ap_const_lv1_1))) then 
            gmem_C_blk_n_AW <= m_axi_gmem_C_AWREADY;
        else 
            gmem_C_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_C_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_C_BVALID, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, icmp_ln1164_1_reg_220_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1164_1_reg_220_pp0_iter2_reg = ap_const_lv1_1))) then 
            gmem_C_blk_n_B <= m_axi_gmem_C_BVALID;
        else 
            gmem_C_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_C_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_C_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_C_blk_n_W <= m_axi_gmem_C_WREADY;
        else 
            gmem_C_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln1164_1_fu_148_p2 <= "1" when (add_ln1164_fu_142_p2 = ap_const_lv9_100) else "0";
    icmp_ln1164_fu_136_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv9_100) else "0";
    m_axi_gmem_C_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_C_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_C_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_C_ARID <= ap_const_lv1_0;
    m_axi_gmem_C_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_C_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_C_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_C_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_C_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_C_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_C_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_C_ARVALID <= ap_const_logic_0;
    m_axi_gmem_C_AWADDR <= sext_ln1164_reg_224;
    m_axi_gmem_C_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_C_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_C_AWID <= ap_const_lv1_0;
    m_axi_gmem_C_AWLEN <= ap_const_lv32_100;
    m_axi_gmem_C_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_C_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_C_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_C_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_C_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_C_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_C_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_predicate_op37_writereq_state3, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op37_writereq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            m_axi_gmem_C_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_C_BREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, icmp_ln1164_1_reg_220_pp0_iter2_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1164_1_reg_220_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_gmem_C_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_C_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_C_RREADY <= ap_const_logic_0;
    m_axi_gmem_C_WDATA <= (((fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244 & fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239) & fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234) & fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229);
    m_axi_gmem_C_WID <= ap_const_lv1_0;
    m_axi_gmem_C_WLAST <= ap_const_logic_0;
    m_axi_gmem_C_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_C_WUSER <= ap_const_lv1_0;

    m_axi_gmem_C_WVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_C_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1164_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_159_p4),64));

    trunc_ln_fu_159_p4 <= C_dout(63 downto 6);
end behav;
