-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_A_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_62_1_VI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_1_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_PE_1_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo_A_PE_1_0_full_n : IN STD_LOGIC;
    fifo_A_PE_1_0_write : OUT STD_LOGIC;
    local_A_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_A_ce0 : OUT STD_LOGIC;
    local_A_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of kernel0_A_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_62_1_VI is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln62_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_A_PE_1_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln62_fu_212_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln62_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln72_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln66_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c7_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln64_1_fu_275_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c5_fu_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln62_fu_192_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_c5_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten10_fu_112 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_1_fu_165_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten10_load : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_fu_377_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln64_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_fu_180_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln62_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln62_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln64_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_240_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln72_fu_248_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln62_fu_208_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln72_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln64_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_377_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_mux_8_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_8_3_64_1_1_U15 : component kernel0_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => p_0_fu_377_p1,
        din1 => p_0_fu_377_p2,
        din2 => p_0_fu_377_p3,
        din3 => p_0_fu_377_p4,
        din4 => p_0_fu_377_p5,
        din5 => p_0_fu_377_p6,
        din6 => p_0_fu_377_p7,
        din7 => p_0_fu_377_p8,
        din8 => trunc_ln62_reg_430,
        dout => p_0_fu_377_p10);

    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    c5_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln62_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c5_fu_108 <= select_ln62_fu_192_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c5_fu_108 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    c7_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln62_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c7_fu_100 <= add_ln66_fu_263_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c7_fu_100 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten10_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln62_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten10_fu_112 <= add_ln62_1_fu_165_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten10_fu_112 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln62_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_104 <= select_ln64_1_fu_275_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_159_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln62_reg_430 <= trunc_ln62_fu_212_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln62_1_fu_165_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten10_load) + unsigned(ap_const_lv10_1));
    add_ln62_fu_180_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c5_load) + unsigned(ap_const_lv4_1));
    add_ln64_fu_269_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln66_fu_263_p2 <= std_logic_vector(unsigned(select_ln64_fu_240_p3) + unsigned(ap_const_lv4_1));
    add_ln72_fu_252_p2 <= std_logic_vector(unsigned(trunc_ln72_fu_248_p1) + unsigned(zext_ln62_fu_208_p1));
    and_ln62_fu_228_p2 <= (xor_ln62_fu_216_p2 and icmp_ln66_fu_222_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, fifo_A_PE_1_0_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((fifo_A_PE_1_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, fifo_A_PE_1_0_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((fifo_A_PE_1_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, fifo_A_PE_1_0_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((fifo_A_PE_1_0_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(fifo_A_PE_1_0_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (fifo_A_PE_1_0_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln62_fu_159_p2)
    begin
        if (((icmp_ln62_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c5_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c5_fu_108)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c5_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c5_load <= c5_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_c7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c7_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c7_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c7_load <= c7_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten10_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten10_fu_112)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten10_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten10_load <= indvar_flatten10_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_104;
        end if; 
    end process;


    fifo_A_PE_1_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_A_PE_1_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_1_0_blk_n <= fifo_A_PE_1_0_full_n;
        else 
            fifo_A_PE_1_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_1_0_din <= p_0_fu_377_p10;

    fifo_A_PE_1_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_1_0_write <= ap_const_logic_1;
        else 
            fifo_A_PE_1_0_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln62_fu_159_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten10_load = ap_const_lv10_200) else "0";
    icmp_ln64_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_40) else "0";
    icmp_ln66_fu_222_p2 <= "1" when (ap_sig_allocacmp_c7_load = ap_const_lv4_8) else "0";
    local_A_address0 <= zext_ln72_fu_258_p1(3 - 1 downto 0);

    local_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_A_ce0 <= ap_const_logic_1;
        else 
            local_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln64_fu_234_p2 <= (icmp_ln64_fu_186_p2 or and_ln62_fu_228_p2);
    p_0_fu_377_p1 <= local_A_q0(64 - 1 downto 0);
    p_0_fu_377_p2 <= local_A_q0(127 downto 64);
    p_0_fu_377_p3 <= local_A_q0(191 downto 128);
    p_0_fu_377_p4 <= local_A_q0(255 downto 192);
    p_0_fu_377_p5 <= local_A_q0(319 downto 256);
    p_0_fu_377_p6 <= local_A_q0(383 downto 320);
    p_0_fu_377_p7 <= local_A_q0(447 downto 384);
    p_0_fu_377_p8 <= local_A_q0(511 downto 448);
    select_ln62_fu_192_p3 <= 
        add_ln62_fu_180_p2 when (icmp_ln64_fu_186_p2(0) = '1') else 
        ap_sig_allocacmp_c5_load;
    select_ln64_1_fu_275_p3 <= 
        ap_const_lv8_1 when (icmp_ln64_fu_186_p2(0) = '1') else 
        add_ln64_fu_269_p2;
    select_ln64_fu_240_p3 <= 
        ap_const_lv4_0 when (or_ln64_fu_234_p2(0) = '1') else 
        ap_sig_allocacmp_c7_load;
    tmp_fu_200_p3 <= select_ln62_fu_192_p3(3 downto 3);
    trunc_ln62_fu_212_p1 <= select_ln62_fu_192_p3(3 - 1 downto 0);
    trunc_ln72_fu_248_p1 <= select_ln64_fu_240_p3(3 - 1 downto 0);
    xor_ln62_fu_216_p2 <= (icmp_ln64_fu_186_p2 xor ap_const_lv1_1);
    zext_ln62_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_200_p3),3));
    zext_ln72_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_252_p2),64));
end behav;
