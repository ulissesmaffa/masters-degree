// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel0_C_drain_IO_L3_out_serialize (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifo_C_drain_C_drain_IO_L3_out_serialize_dout,
        fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid,
        fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap,
        fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n,
        fifo_C_drain_C_drain_IO_L3_out_serialize_read,
        m_axi_gmem_C_AWVALID,
        m_axi_gmem_C_AWREADY,
        m_axi_gmem_C_AWADDR,
        m_axi_gmem_C_AWID,
        m_axi_gmem_C_AWLEN,
        m_axi_gmem_C_AWSIZE,
        m_axi_gmem_C_AWBURST,
        m_axi_gmem_C_AWLOCK,
        m_axi_gmem_C_AWCACHE,
        m_axi_gmem_C_AWPROT,
        m_axi_gmem_C_AWQOS,
        m_axi_gmem_C_AWREGION,
        m_axi_gmem_C_AWUSER,
        m_axi_gmem_C_WVALID,
        m_axi_gmem_C_WREADY,
        m_axi_gmem_C_WDATA,
        m_axi_gmem_C_WSTRB,
        m_axi_gmem_C_WLAST,
        m_axi_gmem_C_WID,
        m_axi_gmem_C_WUSER,
        m_axi_gmem_C_ARVALID,
        m_axi_gmem_C_ARREADY,
        m_axi_gmem_C_ARADDR,
        m_axi_gmem_C_ARID,
        m_axi_gmem_C_ARLEN,
        m_axi_gmem_C_ARSIZE,
        m_axi_gmem_C_ARBURST,
        m_axi_gmem_C_ARLOCK,
        m_axi_gmem_C_ARCACHE,
        m_axi_gmem_C_ARPROT,
        m_axi_gmem_C_ARQOS,
        m_axi_gmem_C_ARREGION,
        m_axi_gmem_C_ARUSER,
        m_axi_gmem_C_RVALID,
        m_axi_gmem_C_RREADY,
        m_axi_gmem_C_RDATA,
        m_axi_gmem_C_RLAST,
        m_axi_gmem_C_RID,
        m_axi_gmem_C_RFIFONUM,
        m_axi_gmem_C_RUSER,
        m_axi_gmem_C_RRESP,
        m_axi_gmem_C_BVALID,
        m_axi_gmem_C_BREADY,
        m_axi_gmem_C_BRESP,
        m_axi_gmem_C_BID,
        m_axi_gmem_C_BUSER,
        C_dout,
        C_num_data_valid,
        C_fifo_cap,
        C_empty_n,
        C_read
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
input  [1:0] fifo_C_drain_C_drain_IO_L3_out_serialize_num_data_valid;
input  [1:0] fifo_C_drain_C_drain_IO_L3_out_serialize_fifo_cap;
input   fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n;
output   fifo_C_drain_C_drain_IO_L3_out_serialize_read;
output   m_axi_gmem_C_AWVALID;
input   m_axi_gmem_C_AWREADY;
output  [63:0] m_axi_gmem_C_AWADDR;
output  [0:0] m_axi_gmem_C_AWID;
output  [31:0] m_axi_gmem_C_AWLEN;
output  [2:0] m_axi_gmem_C_AWSIZE;
output  [1:0] m_axi_gmem_C_AWBURST;
output  [1:0] m_axi_gmem_C_AWLOCK;
output  [3:0] m_axi_gmem_C_AWCACHE;
output  [2:0] m_axi_gmem_C_AWPROT;
output  [3:0] m_axi_gmem_C_AWQOS;
output  [3:0] m_axi_gmem_C_AWREGION;
output  [0:0] m_axi_gmem_C_AWUSER;
output   m_axi_gmem_C_WVALID;
input   m_axi_gmem_C_WREADY;
output  [511:0] m_axi_gmem_C_WDATA;
output  [63:0] m_axi_gmem_C_WSTRB;
output   m_axi_gmem_C_WLAST;
output  [0:0] m_axi_gmem_C_WID;
output  [0:0] m_axi_gmem_C_WUSER;
output   m_axi_gmem_C_ARVALID;
input   m_axi_gmem_C_ARREADY;
output  [63:0] m_axi_gmem_C_ARADDR;
output  [0:0] m_axi_gmem_C_ARID;
output  [31:0] m_axi_gmem_C_ARLEN;
output  [2:0] m_axi_gmem_C_ARSIZE;
output  [1:0] m_axi_gmem_C_ARBURST;
output  [1:0] m_axi_gmem_C_ARLOCK;
output  [3:0] m_axi_gmem_C_ARCACHE;
output  [2:0] m_axi_gmem_C_ARPROT;
output  [3:0] m_axi_gmem_C_ARQOS;
output  [3:0] m_axi_gmem_C_ARREGION;
output  [0:0] m_axi_gmem_C_ARUSER;
input   m_axi_gmem_C_RVALID;
output   m_axi_gmem_C_RREADY;
input  [511:0] m_axi_gmem_C_RDATA;
input   m_axi_gmem_C_RLAST;
input  [0:0] m_axi_gmem_C_RID;
input  [8:0] m_axi_gmem_C_RFIFONUM;
input  [0:0] m_axi_gmem_C_RUSER;
input  [1:0] m_axi_gmem_C_RRESP;
input   m_axi_gmem_C_BVALID;
output   m_axi_gmem_C_BREADY;
input  [1:0] m_axi_gmem_C_BRESP;
input  [0:0] m_axi_gmem_C_BID;
input  [0:0] m_axi_gmem_C_BUSER;
input  [63:0] C_dout;
input  [4:0] C_num_data_valid;
input  [4:0] C_fifo_cap;
input   C_empty_n;
output   C_read;

reg ap_idle;
reg fifo_C_drain_C_drain_IO_L3_out_serialize_read;
reg m_axi_gmem_C_AWVALID;
reg m_axi_gmem_C_WVALID;
reg m_axi_gmem_C_BREADY;
reg C_read;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg   [0:0] icmp_ln1164_reg_216;
reg    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_done_reg;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_C_blk_n_AW;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] first_iter_0_reg_116;
reg    gmem_C_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_C_blk_n_B;
reg   [0:0] icmp_ln1164_1_reg_220;
reg   [0:0] icmp_ln1164_1_reg_220_pp0_iter2_reg;
reg    C_blk_n;
reg    fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1164_fu_136_p2;
reg   [0:0] icmp_ln1164_reg_216_pp0_iter1_reg;
wire   [0:0] icmp_ln1164_1_fu_148_p2;
reg   [0:0] icmp_ln1164_1_reg_220_pp0_iter1_reg;
wire  signed [63:0] sext_ln1164_fu_169_p1;
reg  signed [63:0] sext_ln1164_reg_224;
reg    ap_predicate_op31_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229;
reg   [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_predicate_op37_writereq_state3;
reg    ap_block_state3_io;
wire    ap_block_state7_pp0_stage2_iter1;
reg    ap_block_state11_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
reg   [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239;
reg    ap_block_pp0_stage3_11001;
reg   [127:0] fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_01001;
reg   [8:0] i_fu_76;
wire   [8:0] add_ln1164_fu_142_p2;
reg   [8:0] ap_sig_allocacmp_i_1;
wire   [57:0] trunc_ln_fu_159_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_400;
reg    ap_condition_303;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

kernel0_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            first_iter_0_reg_116 <= 1'd1;
        end else if ((1'b1 == ap_condition_400)) begin
            first_iter_0_reg_116 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_303)) begin
        if ((icmp_ln1164_fu_136_p2 == 1'd0)) begin
            i_fu_76 <= add_ln1164_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229 <= fifo_C_drain_C_drain_IO_L3_out_serialize_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1164_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1164_1_reg_220 <= icmp_ln1164_1_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1164_1_reg_220_pp0_iter1_reg <= icmp_ln1164_1_reg_220;
        icmp_ln1164_1_reg_220_pp0_iter2_reg <= icmp_ln1164_1_reg_220_pp0_iter1_reg;
        icmp_ln1164_reg_216 <= icmp_ln1164_fu_136_p2;
        icmp_ln1164_reg_216_pp0_iter1_reg <= icmp_ln1164_reg_216;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1164_reg_216 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_0_reg_116 == 1'd1))) begin
        sext_ln1164_reg_224 <= sext_ln1164_fu_169_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_0_reg_116 == 1'd1))) begin
        C_blk_n = C_empty_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op31_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_read = 1'b1;
    end else begin
        C_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln1164_reg_216 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1164_reg_216_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n = fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n;
    end else begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read = 1'b1;
    end else begin
        fifo_C_drain_C_drain_IO_L3_out_serialize_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (first_iter_0_reg_116 == 1'd1))) begin
        gmem_C_blk_n_AW = m_axi_gmem_C_AWREADY;
    end else begin
        gmem_C_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1164_1_reg_220_pp0_iter2_reg == 1'd1))) begin
        gmem_C_blk_n_B = m_axi_gmem_C_BVALID;
    end else begin
        gmem_C_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_C_blk_n_W = m_axi_gmem_C_WREADY;
    end else begin
        gmem_C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op37_writereq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_axi_gmem_C_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1164_1_reg_220_pp0_iter2_reg == 1'd1))) begin
        m_axi_gmem_C_BREADY = 1'b1;
    end else begin
        m_axi_gmem_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_C_WVALID = 1'b1;
    end else begin
        m_axi_gmem_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1164_fu_142_p2 = (ap_sig_allocacmp_i_1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)) | ((1'b0 == C_empty_n) & (ap_predicate_op31_read_state2 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)) | ((1'b0 == C_empty_n) & (ap_predicate_op31_read_state2 == 1'b1)))) | ((m_axi_gmem_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)) | ((1'b0 == C_empty_n) & (ap_predicate_op31_read_state2 == 1'b1)))) | ((m_axi_gmem_C_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1164_1_reg_220_pp0_iter2_reg == 1'd1) & (m_axi_gmem_C_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1164_1_reg_220_pp0_iter2_reg == 1'd1) & (m_axi_gmem_C_BVALID == 1'b0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_done_reg == 1'b1) | ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_done_reg == 1'b1) | ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage2_iter2 = ((icmp_ln1164_1_reg_220_pp0_iter2_reg == 1'd1) & (m_axi_gmem_C_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0)) | ((1'b0 == C_empty_n) & (ap_predicate_op31_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_C_AWREADY == 1'b0) & (ap_predicate_op37_writereq_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln1164_reg_216 == 1'd0) & (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (fifo_C_drain_C_drain_IO_L3_out_serialize_empty_n == 1'b0);
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_303 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_400 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1164_reg_216 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

always @ (*) begin
    ap_predicate_op31_read_state2 = ((icmp_ln1164_reg_216 == 1'd0) & (first_iter_0_reg_116 == 1'd1));
end

always @ (*) begin
    ap_predicate_op37_writereq_state3 = ((icmp_ln1164_reg_216 == 1'd0) & (first_iter_0_reg_116 == 1'd1));
end

assign icmp_ln1164_1_fu_148_p2 = ((add_ln1164_fu_142_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln1164_fu_136_p2 = ((ap_sig_allocacmp_i_1 == 9'd256) ? 1'b1 : 1'b0);

assign m_axi_gmem_C_ARADDR = 64'd0;

assign m_axi_gmem_C_ARBURST = 2'd0;

assign m_axi_gmem_C_ARCACHE = 4'd0;

assign m_axi_gmem_C_ARID = 1'd0;

assign m_axi_gmem_C_ARLEN = 32'd0;

assign m_axi_gmem_C_ARLOCK = 2'd0;

assign m_axi_gmem_C_ARPROT = 3'd0;

assign m_axi_gmem_C_ARQOS = 4'd0;

assign m_axi_gmem_C_ARREGION = 4'd0;

assign m_axi_gmem_C_ARSIZE = 3'd0;

assign m_axi_gmem_C_ARUSER = 1'd0;

assign m_axi_gmem_C_ARVALID = 1'b0;

assign m_axi_gmem_C_AWADDR = sext_ln1164_reg_224;

assign m_axi_gmem_C_AWBURST = 2'd0;

assign m_axi_gmem_C_AWCACHE = 4'd0;

assign m_axi_gmem_C_AWID = 1'd0;

assign m_axi_gmem_C_AWLEN = 32'd256;

assign m_axi_gmem_C_AWLOCK = 2'd0;

assign m_axi_gmem_C_AWPROT = 3'd0;

assign m_axi_gmem_C_AWQOS = 4'd0;

assign m_axi_gmem_C_AWREGION = 4'd0;

assign m_axi_gmem_C_AWSIZE = 3'd0;

assign m_axi_gmem_C_AWUSER = 1'd0;

assign m_axi_gmem_C_RREADY = 1'b0;

assign m_axi_gmem_C_WDATA = {{{{fifo_C_drain_C_drain_IO_L3_out_serialize_read_3_reg_244}, {fifo_C_drain_C_drain_IO_L3_out_serialize_read_2_reg_239}}, {fifo_C_drain_C_drain_IO_L3_out_serialize_read_1_reg_234}}, {fifo_C_drain_C_drain_IO_L3_out_serialize_read_reg_229}};

assign m_axi_gmem_C_WID = 1'd0;

assign m_axi_gmem_C_WLAST = 1'b0;

assign m_axi_gmem_C_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_C_WUSER = 1'd0;

assign sext_ln1164_fu_169_p1 = $signed(trunc_ln_fu_159_p4);

assign trunc_ln_fu_159_p4 = {{C_dout[63:6]}};

endmodule //kernel0_C_drain_IO_L3_out_serialize
