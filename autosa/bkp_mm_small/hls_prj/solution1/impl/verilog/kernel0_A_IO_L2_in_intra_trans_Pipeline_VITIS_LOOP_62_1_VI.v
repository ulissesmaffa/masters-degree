// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel0_A_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_62_1_VI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_A_PE_1_0_din,
        fifo_A_PE_1_0_num_data_valid,
        fifo_A_PE_1_0_fifo_cap,
        fifo_A_PE_1_0_full_n,
        fifo_A_PE_1_0_write,
        local_A_address0,
        local_A_ce0,
        local_A_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] fifo_A_PE_1_0_din;
input  [1:0] fifo_A_PE_1_0_num_data_valid;
input  [1:0] fifo_A_PE_1_0_fifo_cap;
input   fifo_A_PE_1_0_full_n;
output   fifo_A_PE_1_0_write;
output  [2:0] local_A_address0;
output   local_A_ce0;
input  [511:0] local_A_q0;

reg ap_idle;
reg fifo_A_PE_1_0_write;
reg local_A_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_A_PE_1_0_blk_n;
wire    ap_block_pp0_stage0;
wire   [2:0] trunc_ln62_fu_212_p1;
reg   [2:0] trunc_ln62_reg_430;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln72_fu_258_p1;
reg   [3:0] c7_fu_100;
wire   [3:0] add_ln66_fu_263_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_c7_load;
reg   [7:0] indvar_flatten_fu_104;
wire   [7:0] select_ln64_1_fu_275_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] c5_fu_108;
wire   [3:0] select_ln62_fu_192_p3;
reg   [3:0] ap_sig_allocacmp_c5_load;
reg   [9:0] indvar_flatten10_fu_112;
wire   [9:0] add_ln62_1_fu_165_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten10_load;
wire   [63:0] p_0_fu_377_p10;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln64_fu_186_p2;
wire   [3:0] add_ln62_fu_180_p2;
wire   [0:0] tmp_fu_200_p3;
wire   [0:0] icmp_ln66_fu_222_p2;
wire   [0:0] xor_ln62_fu_216_p2;
wire   [0:0] and_ln62_fu_228_p2;
wire   [0:0] or_ln64_fu_234_p2;
wire   [3:0] select_ln64_fu_240_p3;
wire   [2:0] trunc_ln72_fu_248_p1;
wire   [2:0] zext_ln62_fu_208_p1;
wire   [2:0] add_ln72_fu_252_p2;
wire   [7:0] add_ln64_fu_269_p2;
wire   [63:0] p_0_fu_377_p1;
wire   [63:0] p_0_fu_377_p2;
wire   [63:0] p_0_fu_377_p3;
wire   [63:0] p_0_fu_377_p4;
wire   [63:0] p_0_fu_377_p5;
wire   [63:0] p_0_fu_377_p6;
wire   [63:0] p_0_fu_377_p7;
wire   [63:0] p_0_fu_377_p8;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel0_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U15(
    .din0(p_0_fu_377_p1),
    .din1(p_0_fu_377_p2),
    .din2(p_0_fu_377_p3),
    .din3(p_0_fu_377_p4),
    .din4(p_0_fu_377_p5),
    .din5(p_0_fu_377_p6),
    .din6(p_0_fu_377_p7),
    .din7(p_0_fu_377_p8),
    .din8(trunc_ln62_reg_430),
    .dout(p_0_fu_377_p10)
);

kernel0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c5_fu_108 <= select_ln62_fu_192_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c5_fu_108 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c7_fu_100 <= add_ln66_fu_263_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c7_fu_100 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten10_fu_112 <= add_ln62_1_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_112 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_104 <= select_ln64_1_fu_275_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln62_reg_430 <= trunc_ln62_fu_212_p1;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c5_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c5_load = c5_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c7_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c7_load = c7_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_A_PE_1_0_blk_n = fifo_A_PE_1_0_full_n;
    end else begin
        fifo_A_PE_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_A_PE_1_0_write = 1'b1;
    end else begin
        fifo_A_PE_1_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_A_ce0 = 1'b1;
    end else begin
        local_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_1_fu_165_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 10'd1);

assign add_ln62_fu_180_p2 = (ap_sig_allocacmp_c5_load + 4'd1);

assign add_ln64_fu_269_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln66_fu_263_p2 = (select_ln64_fu_240_p3 + 4'd1);

assign add_ln72_fu_252_p2 = (trunc_ln72_fu_248_p1 + zext_ln62_fu_208_p1);

assign and_ln62_fu_228_p2 = (xor_ln62_fu_216_p2 & icmp_ln66_fu_222_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((fifo_A_PE_1_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((fifo_A_PE_1_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((fifo_A_PE_1_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (fifo_A_PE_1_0_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign fifo_A_PE_1_0_din = p_0_fu_377_p10;

assign icmp_ln62_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_222_p2 = ((ap_sig_allocacmp_c7_load == 4'd8) ? 1'b1 : 1'b0);

assign local_A_address0 = zext_ln72_fu_258_p1;

assign or_ln64_fu_234_p2 = (icmp_ln64_fu_186_p2 | and_ln62_fu_228_p2);

assign p_0_fu_377_p1 = local_A_q0[63:0];

assign p_0_fu_377_p2 = {{local_A_q0[127:64]}};

assign p_0_fu_377_p3 = {{local_A_q0[191:128]}};

assign p_0_fu_377_p4 = {{local_A_q0[255:192]}};

assign p_0_fu_377_p5 = {{local_A_q0[319:256]}};

assign p_0_fu_377_p6 = {{local_A_q0[383:320]}};

assign p_0_fu_377_p7 = {{local_A_q0[447:384]}};

assign p_0_fu_377_p8 = {{local_A_q0[511:448]}};

assign select_ln62_fu_192_p3 = ((icmp_ln64_fu_186_p2[0:0] == 1'b1) ? add_ln62_fu_180_p2 : ap_sig_allocacmp_c5_load);

assign select_ln64_1_fu_275_p3 = ((icmp_ln64_fu_186_p2[0:0] == 1'b1) ? 8'd1 : add_ln64_fu_269_p2);

assign select_ln64_fu_240_p3 = ((or_ln64_fu_234_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_c7_load);

assign tmp_fu_200_p3 = select_ln62_fu_192_p3[32'd3];

assign trunc_ln62_fu_212_p1 = select_ln62_fu_192_p3[2:0];

assign trunc_ln72_fu_248_p1 = select_ln64_fu_240_p3[2:0];

assign xor_ln62_fu_216_p2 = (icmp_ln64_fu_186_p2 ^ 1'd1);

assign zext_ln62_fu_208_p1 = tmp_fu_200_p3;

assign zext_ln72_fu_258_p1 = add_ln72_fu_252_p2;

endmodule //kernel0_A_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_62_1_VI
