// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel0_B_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_407_1_V (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_B_PE_0_1_din,
        fifo_B_PE_0_1_num_data_valid,
        fifo_B_PE_0_1_fifo_cap,
        fifo_B_PE_0_1_full_n,
        fifo_B_PE_0_1_write,
        local_B_address0,
        local_B_ce0,
        local_B_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] fifo_B_PE_0_1_din;
input  [1:0] fifo_B_PE_0_1_num_data_valid;
input  [1:0] fifo_B_PE_0_1_fifo_cap;
input   fifo_B_PE_0_1_full_n;
output   fifo_B_PE_0_1_write;
output  [2:0] local_B_address0;
output   local_B_ce0;
input  [511:0] local_B_q0;

reg ap_idle;
reg fifo_B_PE_0_1_write;
reg[2:0] local_B_address0;
reg local_B_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln407_reg_609;
reg   [0:0] icmp_ln407_reg_609_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln407_fu_269_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_B_PE_0_1_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_598;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] empty_fu_265_p1;
reg   [2:0] empty_reg_604;
reg   [2:0] empty_reg_604_pp0_iter1_reg;
wire   [0:0] icmp_ln409_fu_293_p2;
reg   [0:0] icmp_ln409_reg_613;
reg   [0:0] icmp_ln409_reg_613_pp0_iter1_reg;
reg   [0:0] tmp_4_reg_620;
wire   [2:0] empty_142_fu_307_p1;
reg   [2:0] empty_142_reg_626;
reg   [2:0] empty_142_reg_626_pp0_iter1_reg;
wire   [2:0] select_ln407_2_fu_311_p3;
reg   [2:0] select_ln407_2_reg_631;
reg   [2:0] select_ln407_2_reg_631_pp0_iter1_reg;
wire   [0:0] icmp_ln411_fu_325_p2;
reg   [0:0] icmp_ln411_reg_636;
wire   [0:0] and_ln407_fu_331_p2;
reg   [0:0] and_ln407_reg_640;
reg   [0:0] and_ln407_reg_640_pp0_iter1_reg;
wire   [63:0] p_cast_fu_415_p1;
wire   [63:0] conv_i52_mid1_fu_427_p1;
wire   [63:0] p_cast1_fu_456_p1;
reg   [3:0] c7_fu_100;
wire   [3:0] c7_1_fu_357_p3;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_c7_load;
reg   [3:0] c6_fu_104;
wire   [3:0] select_ln409_1_fu_461_p3;
reg   [7:0] indvar_flatten_fu_108;
wire   [7:0] select_ln409_2_fu_371_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] c5_fu_112;
wire   [3:0] select_ln407_4_fu_337_p3;
reg   [3:0] ap_sig_allocacmp_c5_4;
reg   [9:0] indvar_flatten35_fu_116;
wire   [9:0] add_ln407_1_fu_275_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten35_load;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] add_ln407_fu_287_p2;
wire   [0:0] xor_ln407_fu_319_p2;
wire   [0:0] or_ln411_fu_351_p2;
wire   [3:0] add_ln411_fu_345_p2;
wire   [7:0] add_ln409_1_fu_365_p2;
wire   [2:0] empty_140_fu_405_p1;
wire   [2:0] div_i_i_cast_fu_402_p1;
wire   [2:0] empty_141_fu_409_p2;
wire   [0:0] select_ln407_1_fu_431_p3;
wire   [3:0] select_ln407_fu_420_p3;
wire   [3:0] add_ln409_fu_440_p2;
wire   [2:0] empty_143_fu_446_p1;
wire   [2:0] select_ln407_1_cast_fu_436_p1;
wire   [2:0] empty_144_fu_450_p2;
wire   [63:0] tmp_s_fu_477_p1;
wire   [63:0] tmp_s_fu_477_p2;
wire   [63:0] tmp_s_fu_477_p3;
wire   [63:0] tmp_s_fu_477_p4;
wire   [63:0] tmp_s_fu_477_p5;
wire   [63:0] tmp_s_fu_477_p6;
wire   [63:0] tmp_s_fu_477_p7;
wire   [63:0] tmp_s_fu_477_p8;
wire   [63:0] tmp_mid_fu_502_p1;
wire   [63:0] tmp_mid_fu_502_p2;
wire   [63:0] tmp_mid_fu_502_p3;
wire   [63:0] tmp_mid_fu_502_p4;
wire   [63:0] tmp_mid_fu_502_p5;
wire   [63:0] tmp_mid_fu_502_p6;
wire   [63:0] tmp_mid_fu_502_p7;
wire   [63:0] tmp_mid_fu_502_p8;
wire   [63:0] tmp_mid_fu_502_p10;
wire   [63:0] tmp_s_fu_477_p10;
wire   [63:0] tmp_mid1_fu_534_p1;
wire   [63:0] tmp_mid1_fu_534_p2;
wire   [63:0] tmp_mid1_fu_534_p3;
wire   [63:0] tmp_mid1_fu_534_p4;
wire   [63:0] tmp_mid1_fu_534_p5;
wire   [63:0] tmp_mid1_fu_534_p6;
wire   [63:0] tmp_mid1_fu_534_p7;
wire   [63:0] tmp_mid1_fu_534_p8;
wire   [63:0] tmp_mid1_fu_534_p10;
wire   [63:0] select_ln407_3_fu_523_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_222;
reg    ap_condition_255;
reg    ap_condition_292;
reg    ap_condition_131;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel0_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U42(
    .din0(tmp_s_fu_477_p1),
    .din1(tmp_s_fu_477_p2),
    .din2(tmp_s_fu_477_p3),
    .din3(tmp_s_fu_477_p4),
    .din4(tmp_s_fu_477_p5),
    .din5(tmp_s_fu_477_p6),
    .din6(tmp_s_fu_477_p7),
    .din7(tmp_s_fu_477_p8),
    .din8(empty_reg_604_pp0_iter1_reg),
    .dout(tmp_s_fu_477_p10)
);

kernel0_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U43(
    .din0(tmp_mid_fu_502_p1),
    .din1(tmp_mid_fu_502_p2),
    .din2(tmp_mid_fu_502_p3),
    .din3(tmp_mid_fu_502_p4),
    .din4(tmp_mid_fu_502_p5),
    .din5(tmp_mid_fu_502_p6),
    .din6(tmp_mid_fu_502_p7),
    .din7(tmp_mid_fu_502_p8),
    .din8(empty_142_reg_626_pp0_iter1_reg),
    .dout(tmp_mid_fu_502_p10)
);

kernel0_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U44(
    .din0(tmp_mid1_fu_534_p1),
    .din1(tmp_mid1_fu_534_p2),
    .din2(tmp_mid1_fu_534_p3),
    .din3(tmp_mid1_fu_534_p4),
    .din4(tmp_mid1_fu_534_p5),
    .din5(tmp_mid1_fu_534_p6),
    .din6(tmp_mid1_fu_534_p7),
    .din7(tmp_mid1_fu_534_p8),
    .din8(select_ln407_2_reg_631_pp0_iter1_reg),
    .dout(tmp_mid1_fu_534_p10)
);

kernel0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln407_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c5_fu_112 <= select_ln407_4_fu_337_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c5_fu_112 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c6_fu_104 <= 4'd0;
        end else if (((icmp_ln407_reg_609 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c6_fu_104 <= select_ln409_1_fu_461_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln407_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c7_fu_100 <= c7_1_fu_357_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c7_fu_100 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln407_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten35_fu_116 <= add_ln407_1_fu_275_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten35_fu_116 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln407_fu_269_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_108 <= select_ln409_2_fu_371_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln407_fu_269_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln407_reg_640 <= and_ln407_fu_331_p2;
        empty_142_reg_626 <= empty_142_fu_307_p1;
        icmp_ln409_reg_613 <= icmp_ln409_fu_293_p2;
        icmp_ln411_reg_636 <= icmp_ln411_fu_325_p2;
        select_ln407_2_reg_631 <= select_ln407_2_fu_311_p3;
        tmp_4_reg_620 <= add_ln407_fu_287_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln407_reg_640_pp0_iter1_reg <= and_ln407_reg_640;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        empty_142_reg_626_pp0_iter1_reg <= empty_142_reg_626;
        empty_reg_604 <= empty_fu_265_p1;
        empty_reg_604_pp0_iter1_reg <= empty_reg_604;
        icmp_ln407_reg_609 <= icmp_ln407_fu_269_p2;
        icmp_ln407_reg_609_pp0_iter1_reg <= icmp_ln407_reg_609;
        icmp_ln409_reg_613_pp0_iter1_reg <= icmp_ln409_reg_613;
        select_ln407_2_reg_631_pp0_iter1_reg <= select_ln407_2_reg_631;
        tmp_reg_598 <= ap_sig_allocacmp_c5_4[32'd3];
    end
end

always @ (*) begin
    if (((icmp_ln407_fu_269_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c5_4 = 4'd0;
    end else begin
        ap_sig_allocacmp_c5_4 = c5_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c7_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c7_load = c7_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten35_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten35_load = indvar_flatten35_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fifo_B_PE_0_1_blk_n = fifo_B_PE_0_1_full_n;
    end else begin
        fifo_B_PE_0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fifo_B_PE_0_1_write = 1'b1;
    end else begin
        fifo_B_PE_0_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((1'b1 == ap_condition_292)) begin
            local_B_address0 = p_cast1_fu_456_p1;
        end else if ((1'b1 == ap_condition_255)) begin
            local_B_address0 = conv_i52_mid1_fu_427_p1;
        end else if ((1'b1 == ap_condition_222)) begin
            local_B_address0 = p_cast_fu_415_p1;
        end else begin
            local_B_address0 = 'bx;
        end
    end else begin
        local_B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((((((((select_ln407_2_reg_631 == 3'd6) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1)) | ((select_ln407_2_reg_631 == 3'd7) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd5) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd4) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd3) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd2) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 
    == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd1) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd0) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1)))) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((((((((empty_142_reg_626 == 3'd6) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0)) | ((empty_142_reg_626 == 3'd7) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd5) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd4) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd3) & (icmp_ln409_reg_613 
    == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd2) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd1) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd0) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0)))) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((((((((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd6) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0)) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd7) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd5) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 
    == 1'd0) & (empty_reg_604 == 3'd4) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd3) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd2) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd0) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0)))))) begin
        local_B_ce0 = 1'b1;
    end else begin
        local_B_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln407_1_fu_275_p2 = (ap_sig_allocacmp_indvar_flatten35_load + 10'd1);

assign add_ln407_fu_287_p2 = (ap_sig_allocacmp_c5_4 + 4'd1);

assign add_ln409_1_fu_365_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln409_fu_440_p2 = (select_ln407_fu_420_p3 + 4'd1);

assign add_ln411_fu_345_p2 = (ap_sig_allocacmp_c7_load + 4'd1);

assign and_ln407_fu_331_p2 = (xor_ln407_fu_319_p2 & icmp_ln411_fu_325_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (fifo_B_PE_0_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (fifo_B_PE_0_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (fifo_B_PE_0_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln407_reg_609_pp0_iter1_reg == 1'd0) & (fifo_B_PE_0_1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_131 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_222 = (((((((((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd6) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0)) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd7) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd5) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd4) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd3) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd2) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 
    == 1'd0) & (icmp_ln411_reg_636 == 1'd0))) | ((icmp_ln409_reg_613 == 1'd0) & (empty_reg_604 == 3'd0) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd0)));
end

always @ (*) begin
    ap_condition_255 = (((((((((empty_142_reg_626 == 3'd6) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0)) | ((empty_142_reg_626 == 3'd7) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd5) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd4) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd3) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd2) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd1) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0))) | ((empty_142_reg_626 == 3'd0) & (icmp_ln409_reg_613 == 1'd1) & (1'd0 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0)));
end

always @ (*) begin
    ap_condition_292 = (((((((((select_ln407_2_reg_631 == 3'd6) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1)) | ((select_ln407_2_reg_631 == 3'd7) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd5) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd4) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd3) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd2) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd1) & (icmp_ln409_reg_613 
    == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1))) | ((select_ln407_2_reg_631 == 3'd0) & (icmp_ln409_reg_613 == 1'd0) & (1'd1 == and_ln407_reg_640) & (icmp_ln407_reg_609 == 1'd0) & (icmp_ln411_reg_636 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c7_1_fu_357_p3 = ((or_ln411_fu_351_p2[0:0] == 1'b1) ? 4'd1 : add_ln411_fu_345_p2);

assign conv_i52_mid1_fu_427_p1 = tmp_4_reg_620;

assign div_i_i_cast_fu_402_p1 = tmp_reg_598;

assign empty_140_fu_405_p1 = c6_fu_104[2:0];

assign empty_141_fu_409_p2 = (empty_140_fu_405_p1 + div_i_i_cast_fu_402_p1);

assign empty_142_fu_307_p1 = add_ln407_fu_287_p2[2:0];

assign empty_143_fu_446_p1 = add_ln409_fu_440_p2[2:0];

assign empty_144_fu_450_p2 = (empty_143_fu_446_p1 + select_ln407_1_cast_fu_436_p1);

assign empty_fu_265_p1 = ap_sig_allocacmp_c5_4[2:0];

assign fifo_B_PE_0_1_din = ((and_ln407_reg_640_pp0_iter1_reg[0:0] == 1'b1) ? tmp_mid1_fu_534_p10 : select_ln407_3_fu_523_p3);

assign icmp_ln407_fu_269_p2 = ((ap_sig_allocacmp_indvar_flatten35_load == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln409_fu_293_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln411_fu_325_p2 = ((ap_sig_allocacmp_c7_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln411_fu_351_p2 = (icmp_ln409_fu_293_p2 | and_ln407_fu_331_p2);

assign p_cast1_fu_456_p1 = empty_144_fu_450_p2;

assign p_cast_fu_415_p1 = empty_141_fu_409_p2;

assign select_ln407_1_cast_fu_436_p1 = select_ln407_1_fu_431_p3;

assign select_ln407_1_fu_431_p3 = ((icmp_ln409_reg_613[0:0] == 1'b1) ? tmp_4_reg_620 : tmp_reg_598);

assign select_ln407_2_fu_311_p3 = ((icmp_ln409_fu_293_p2[0:0] == 1'b1) ? empty_142_fu_307_p1 : empty_fu_265_p1);

assign select_ln407_3_fu_523_p3 = ((icmp_ln409_reg_613_pp0_iter1_reg[0:0] == 1'b1) ? tmp_mid_fu_502_p10 : tmp_s_fu_477_p10);

assign select_ln407_4_fu_337_p3 = ((icmp_ln409_fu_293_p2[0:0] == 1'b1) ? add_ln407_fu_287_p2 : ap_sig_allocacmp_c5_4);

assign select_ln407_fu_420_p3 = ((icmp_ln409_reg_613[0:0] == 1'b1) ? 4'd0 : c6_fu_104);

assign select_ln409_1_fu_461_p3 = ((and_ln407_reg_640[0:0] == 1'b1) ? add_ln409_fu_440_p2 : select_ln407_fu_420_p3);

assign select_ln409_2_fu_371_p3 = ((icmp_ln409_fu_293_p2[0:0] == 1'b1) ? 8'd1 : add_ln409_1_fu_365_p2);

assign tmp_mid1_fu_534_p1 = local_B_q0[63:0];

assign tmp_mid1_fu_534_p2 = {{local_B_q0[127:64]}};

assign tmp_mid1_fu_534_p3 = {{local_B_q0[191:128]}};

assign tmp_mid1_fu_534_p4 = {{local_B_q0[255:192]}};

assign tmp_mid1_fu_534_p5 = {{local_B_q0[319:256]}};

assign tmp_mid1_fu_534_p6 = {{local_B_q0[383:320]}};

assign tmp_mid1_fu_534_p7 = {{local_B_q0[447:384]}};

assign tmp_mid1_fu_534_p8 = {{local_B_q0[511:448]}};

assign tmp_mid_fu_502_p1 = local_B_q0[63:0];

assign tmp_mid_fu_502_p2 = {{local_B_q0[127:64]}};

assign tmp_mid_fu_502_p3 = {{local_B_q0[191:128]}};

assign tmp_mid_fu_502_p4 = {{local_B_q0[255:192]}};

assign tmp_mid_fu_502_p5 = {{local_B_q0[319:256]}};

assign tmp_mid_fu_502_p6 = {{local_B_q0[383:320]}};

assign tmp_mid_fu_502_p7 = {{local_B_q0[447:384]}};

assign tmp_mid_fu_502_p8 = {{local_B_q0[511:448]}};

assign tmp_s_fu_477_p1 = local_B_q0[63:0];

assign tmp_s_fu_477_p2 = {{local_B_q0[127:64]}};

assign tmp_s_fu_477_p3 = {{local_B_q0[191:128]}};

assign tmp_s_fu_477_p4 = {{local_B_q0[255:192]}};

assign tmp_s_fu_477_p5 = {{local_B_q0[319:256]}};

assign tmp_s_fu_477_p6 = {{local_B_q0[383:320]}};

assign tmp_s_fu_477_p7 = {{local_B_q0[447:384]}};

assign tmp_s_fu_477_p8 = {{local_B_q0[511:448]}};

assign xor_ln407_fu_319_p2 = (icmp_ln409_fu_293_p2 ^ 1'd1);

endmodule //kernel0_B_IO_L2_in_intra_trans_Pipeline_VITIS_LOOP_407_1_V
