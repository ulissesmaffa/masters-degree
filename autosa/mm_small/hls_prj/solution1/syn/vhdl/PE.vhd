-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_in_V_V_empty_n : IN STD_LOGIC;
    fifo_A_in_V_V_read : OUT STD_LOGIC;
    fifo_A_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_out_V_V_full_n : IN STD_LOGIC;
    fifo_A_out_V_V_write : OUT STD_LOGIC;
    fifo_B_in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_in_V_V_empty_n : IN STD_LOGIC;
    fifo_B_in_V_V_read : OUT STD_LOGIC;
    fifo_B_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_out_V_V_full_n : IN STD_LOGIC;
    fifo_B_out_V_V_write : OUT STD_LOGIC;
    fifo_C_drain_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_C_drain_out_V_full_n : IN STD_LOGIC;
    fifo_C_drain_out_V_write : OUT STD_LOGIC );
end;


architecture behav of PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_A_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln705_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_A_out_V_V_blk_n : STD_LOGIC;
    signal fifo_B_in_V_V_blk_n : STD_LOGIC;
    signal fifo_B_out_V_V_blk_n : STD_LOGIC;
    signal fifo_C_drain_out_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal select_ln879_3_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten119_reg_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten75_reg_173 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten39_reg_184 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_0137_0_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_reg_206 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_084_0_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_074_0_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_064_0_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln705_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln705_reg_750_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln705_reg_750_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln705_fu_301_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln707_1_fu_499_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln879_3_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_3_reg_764_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_fu_571_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln544_fu_603_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln544_reg_773 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln544_1_fu_611_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln544_1_reg_778 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_V_fu_619_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln712_fu_631_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln710_1_fu_645_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln707_2_fu_659_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln706_fu_673_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Repl2_2_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_2_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_3_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_1_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_addr_reg_829 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_829_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_load_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_865_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_865_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_865_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_865_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal ap_phi_mux_p_074_0_phi_fu_243_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln742_1_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln706_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln706_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln744_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln714_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln712_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln710_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln707_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_5_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln707_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_2_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_3_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_4_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln707_fu_385_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln707_4_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_V_fu_435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln879_2_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_3_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln879_2_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_2_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_3_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_V_fu_507_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln879_1_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln744_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_4_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_2_fu_525_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln879_3_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_2_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_V_fu_579_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln712_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln710_fu_639_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln707_fu_653_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln706_fu_667_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_712_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln544_fu_681_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln742_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln742_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_261_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal grp_fu_273_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel0_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PE_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    local_C_U : component PE_local_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_addr_reg_829_pp0_iter2_reg,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_829_pp0_iter12_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => tmp_2_reg_875);

    kernel0_fadd_32ns_32ns_32_4_full_dsp_1_U47 : component kernel0_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => local_C_load_reg_855,
        din1 => tmp1_reg_860,
        ce => grp_fu_261_ce,
        dout => grp_fu_261_p2);

    kernel0_fadd_32ns_32ns_32_4_full_dsp_1_U48 : component kernel0_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_870,
        din1 => tmp_s_reg_865_pp0_iter8_reg,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    kernel0_fmul_32ns_32ns_32_3_max_dsp_1_U49 : component kernel0_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_269_p0,
        din1 => grp_fu_269_p1,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p2);

    kernel0_fmul_32ns_32ns_32_3_max_dsp_1_U50 : component kernel0_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_273_p0,
        din1 => grp_fu_273_p1,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten119_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten119_reg_162 <= add_ln705_fu_301_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten119_reg_162 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten13_reg_206 <= select_ln710_1_fu_645_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_206 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten39_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten39_reg_184 <= select_ln707_2_fu_659_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten39_reg_184 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten75_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten75_reg_173 <= select_ln706_fu_673_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten75_reg_173 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_228 <= select_ln712_fu_631_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_228 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0137_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_0137_0_reg_195 <= select_ln707_1_fu_499_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0137_0_reg_195 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_064_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_064_0_reg_250 <= c7_V_fu_619_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_064_0_reg_250 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_074_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_074_0_reg_239 <= select_ln544_1_reg_778;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_074_0_reg_239 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_084_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_084_0_reg_217 <= select_ln710_fu_571_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_084_0_reg_217 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln705_reg_750 <= icmp_ln705_fu_295_p2;
                icmp_ln705_reg_750_pp0_iter1_reg <= icmp_ln705_reg_750;
                select_ln879_3_reg_764_pp0_iter1_reg <= select_ln879_3_reg_764;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln705_reg_750_pp0_iter10_reg <= icmp_ln705_reg_750_pp0_iter9_reg;
                icmp_ln705_reg_750_pp0_iter11_reg <= icmp_ln705_reg_750_pp0_iter10_reg;
                icmp_ln705_reg_750_pp0_iter12_reg <= icmp_ln705_reg_750_pp0_iter11_reg;
                icmp_ln705_reg_750_pp0_iter2_reg <= icmp_ln705_reg_750_pp0_iter1_reg;
                icmp_ln705_reg_750_pp0_iter3_reg <= icmp_ln705_reg_750_pp0_iter2_reg;
                icmp_ln705_reg_750_pp0_iter4_reg <= icmp_ln705_reg_750_pp0_iter3_reg;
                icmp_ln705_reg_750_pp0_iter5_reg <= icmp_ln705_reg_750_pp0_iter4_reg;
                icmp_ln705_reg_750_pp0_iter6_reg <= icmp_ln705_reg_750_pp0_iter5_reg;
                icmp_ln705_reg_750_pp0_iter7_reg <= icmp_ln705_reg_750_pp0_iter6_reg;
                icmp_ln705_reg_750_pp0_iter8_reg <= icmp_ln705_reg_750_pp0_iter7_reg;
                icmp_ln705_reg_750_pp0_iter9_reg <= icmp_ln705_reg_750_pp0_iter8_reg;
                local_C_addr_reg_829_pp0_iter10_reg <= local_C_addr_reg_829_pp0_iter9_reg;
                local_C_addr_reg_829_pp0_iter11_reg <= local_C_addr_reg_829_pp0_iter10_reg;
                local_C_addr_reg_829_pp0_iter12_reg <= local_C_addr_reg_829_pp0_iter11_reg;
                local_C_addr_reg_829_pp0_iter2_reg <= local_C_addr_reg_829;
                local_C_addr_reg_829_pp0_iter3_reg <= local_C_addr_reg_829_pp0_iter2_reg;
                local_C_addr_reg_829_pp0_iter4_reg <= local_C_addr_reg_829_pp0_iter3_reg;
                local_C_addr_reg_829_pp0_iter5_reg <= local_C_addr_reg_829_pp0_iter4_reg;
                local_C_addr_reg_829_pp0_iter6_reg <= local_C_addr_reg_829_pp0_iter5_reg;
                local_C_addr_reg_829_pp0_iter7_reg <= local_C_addr_reg_829_pp0_iter6_reg;
                local_C_addr_reg_829_pp0_iter8_reg <= local_C_addr_reg_829_pp0_iter7_reg;
                local_C_addr_reg_829_pp0_iter9_reg <= local_C_addr_reg_829_pp0_iter8_reg;
                select_ln879_3_reg_764_pp0_iter10_reg <= select_ln879_3_reg_764_pp0_iter9_reg;
                select_ln879_3_reg_764_pp0_iter11_reg <= select_ln879_3_reg_764_pp0_iter10_reg;
                select_ln879_3_reg_764_pp0_iter12_reg <= select_ln879_3_reg_764_pp0_iter11_reg;
                select_ln879_3_reg_764_pp0_iter2_reg <= select_ln879_3_reg_764_pp0_iter1_reg;
                select_ln879_3_reg_764_pp0_iter3_reg <= select_ln879_3_reg_764_pp0_iter2_reg;
                select_ln879_3_reg_764_pp0_iter4_reg <= select_ln879_3_reg_764_pp0_iter3_reg;
                select_ln879_3_reg_764_pp0_iter5_reg <= select_ln879_3_reg_764_pp0_iter4_reg;
                select_ln879_3_reg_764_pp0_iter6_reg <= select_ln879_3_reg_764_pp0_iter5_reg;
                select_ln879_3_reg_764_pp0_iter7_reg <= select_ln879_3_reg_764_pp0_iter6_reg;
                select_ln879_3_reg_764_pp0_iter8_reg <= select_ln879_3_reg_764_pp0_iter7_reg;
                select_ln879_3_reg_764_pp0_iter9_reg <= select_ln879_3_reg_764_pp0_iter8_reg;
                tmp_s_reg_865_pp0_iter5_reg <= tmp_s_reg_865;
                tmp_s_reg_865_pp0_iter6_reg <= tmp_s_reg_865_pp0_iter5_reg;
                tmp_s_reg_865_pp0_iter7_reg <= tmp_s_reg_865_pp0_iter6_reg;
                tmp_s_reg_865_pp0_iter8_reg <= tmp_s_reg_865_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                local_C_addr_reg_829 <= zext_ln742_1_fu_729_p1(6 - 1 downto 0);
                p_Repl2_1_reg_824 <= fifo_B_in_V_V_dout(63 downto 32);
                p_Repl2_2_reg_809 <= p_Repl2_2_fu_684_p1;
                p_Repl2_3_reg_814 <= fifo_A_in_V_V_dout(63 downto 32);
                p_Repl2_s_reg_819 <= p_Repl2_s_fu_698_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                local_C_load_reg_855 <= local_C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln544_1_reg_778 <= select_ln544_1_fu_611_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln544_reg_773 <= select_ln544_fu_603_p3;
                select_ln879_3_reg_764 <= select_ln879_3_fu_545_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp1_reg_860 <= grp_fu_269_p2;
                tmp_s_reg_865 <= grp_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_870 <= grp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln705_reg_750_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_875 <= grp_fu_265_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, icmp_ln705_fu_295_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln705_fu_295_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((icmp_ln705_fu_295_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln705_fu_301_p2 <= std_logic_vector(unsigned(indvar_flatten119_reg_162) + unsigned(ap_const_lv16_1));
    add_ln706_fu_667_p2 <= std_logic_vector(unsigned(indvar_flatten75_reg_173) + unsigned(ap_const_lv15_1));
    add_ln707_fu_653_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_184) + unsigned(ap_const_lv13_1));
    add_ln710_fu_639_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_206) + unsigned(ap_const_lv11_1));
    add_ln712_fu_625_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_228) + unsigned(ap_const_lv8_1));
    add_ln742_fu_723_p2 <= std_logic_vector(unsigned(zext_ln544_fu_681_p1) + unsigned(zext_ln742_fu_719_p1));
    and_ln706_1_fu_325_p2 <= (xor_ln706_fu_313_p2 and and_ln744_fu_289_p2);
    and_ln706_2_fu_337_p2 <= (xor_ln706_fu_313_p2 and icmp_ln714_fu_331_p2);
    and_ln706_3_fu_349_p2 <= (xor_ln706_fu_313_p2 and icmp_ln712_fu_343_p2);
    and_ln706_4_fu_361_p2 <= (xor_ln706_fu_313_p2 and icmp_ln710_fu_355_p2);
    and_ln706_5_fu_373_p2 <= (xor_ln706_fu_313_p2 and icmp_ln707_fu_367_p2);
    and_ln706_fu_319_p2 <= (xor_ln706_fu_313_p2 and icmp_ln879_fu_277_p2);
    and_ln707_1_fu_411_p2 <= (or_ln707_1_fu_399_p2 and and_ln706_1_fu_325_p2);
    and_ln707_2_fu_417_p2 <= (or_ln707_1_fu_399_p2 and and_ln706_2_fu_337_p2);
    and_ln707_3_fu_423_p2 <= (or_ln707_1_fu_399_p2 and and_ln706_3_fu_349_p2);
    and_ln707_4_fu_429_p2 <= (or_ln707_1_fu_399_p2 and and_ln706_4_fu_361_p2);
    and_ln707_fu_405_p2 <= (or_ln707_1_fu_399_p2 and and_ln706_fu_319_p2);
    and_ln744_1_fu_539_p2 <= (select_ln879_1_fu_467_p3 and icmp_ln879_3_fu_533_p2);
    and_ln744_fu_289_p2 <= (icmp_ln879_fu_277_p2 and icmp_ln879_1_fu_283_p2);
    and_ln879_1_fu_487_p2 <= (xor_ln879_fu_475_p2 and and_ln707_2_fu_417_p2);
    and_ln879_2_fu_493_p2 <= (xor_ln879_fu_475_p2 and and_ln707_3_fu_423_p2);
    and_ln879_3_fu_565_p2 <= (or_ln879_4_fu_559_p2 and and_ln879_1_fu_487_p2);
    and_ln879_fu_481_p2 <= (xor_ln879_fu_475_p2 and and_ln707_1_fu_411_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_enable_reg_pp0_iter13, select_ln879_3_reg_764_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_enable_reg_pp0_iter13, select_ln879_3_reg_764_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, fifo_C_drain_out_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_enable_reg_pp0_iter13, select_ln879_3_reg_764_pp0_iter12_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter13_assign_proc : process(fifo_C_drain_out_V_full_n, select_ln879_3_reg_764_pp0_iter12_reg)
    begin
                ap_block_state15_pp0_stage0_iter13 <= ((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (fifo_C_drain_out_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_A_in_V_V_empty_n, fifo_A_out_V_V_full_n, fifo_B_in_V_V_empty_n, fifo_B_out_V_V_full_n, icmp_ln705_reg_750)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_out_V_V_full_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_B_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_in_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln705_reg_750 = ap_const_lv1_0) and (fifo_A_out_V_V_full_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln705_fu_295_p2)
    begin
        if ((icmp_ln705_fu_295_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_074_0_phi_fu_243_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln705_reg_750, p_074_0_reg_239, select_ln544_1_reg_778)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_074_0_phi_fu_243_p4 <= select_ln544_1_reg_778;
        else 
            ap_phi_mux_p_074_0_phi_fu_243_p4 <= p_074_0_reg_239;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c2_V_fu_435_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln707_fu_385_p3));
    c5_V_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln879_fu_453_p3));
    c6_V_fu_579_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln879_2_fu_525_p3));
    c7_V_fu_619_p2 <= std_logic_vector(unsigned(select_ln544_fu_603_p3) + unsigned(ap_const_lv4_1));

    fifo_A_in_V_V_blk_n_assign_proc : process(fifo_A_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln705_reg_750)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_in_V_V_blk_n <= fifo_A_in_V_V_empty_n;
        else 
            fifo_A_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_A_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_out_V_V_blk_n_assign_proc : process(fifo_A_out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln705_reg_750)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_out_V_V_blk_n <= fifo_A_out_V_V_full_n;
        else 
            fifo_A_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_out_V_V_din <= fifo_A_in_V_V_dout;

    fifo_A_out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_A_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_in_V_V_blk_n_assign_proc : process(fifo_B_in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln705_reg_750)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_in_V_V_blk_n <= fifo_B_in_V_V_empty_n;
        else 
            fifo_B_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_in_V_V_read <= ap_const_logic_1;
        else 
            fifo_B_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_out_V_V_blk_n_assign_proc : process(fifo_B_out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln705_reg_750)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_out_V_V_blk_n <= fifo_B_out_V_V_full_n;
        else 
            fifo_B_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_out_V_V_din <= fifo_B_in_V_V_dout;

    fifo_B_out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln705_reg_750, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln705_reg_750 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_B_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_out_V_blk_n_assign_proc : process(fifo_C_drain_out_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, select_ln879_3_reg_764_pp0_iter12_reg)
    begin
        if (((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            fifo_C_drain_out_V_blk_n <= fifo_C_drain_out_V_full_n;
        else 
            fifo_C_drain_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_out_V_din <= tmp_2_reg_875;

    fifo_C_drain_out_V_write_assign_proc : process(ap_enable_reg_pp0_iter13, select_ln879_3_reg_764_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln879_3_reg_764_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_C_drain_out_V_write <= ap_const_logic_1;
        else 
            fifo_C_drain_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_261_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_261_ce <= ap_const_logic_1;
        else 
            grp_fu_261_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_269_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_269_ce <= ap_const_logic_1;
        else 
            grp_fu_269_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_269_p0 <= p_Repl2_2_reg_809;
    grp_fu_269_p1 <= p_Repl2_s_reg_819;

    grp_fu_273_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_273_p0 <= p_Repl2_3_reg_814;
    grp_fu_273_p1 <= p_Repl2_1_reg_824;
    icmp_ln705_fu_295_p2 <= "1" when (indvar_flatten119_reg_162 = ap_const_lv16_8000) else "0";
    icmp_ln706_fu_307_p2 <= "1" when (indvar_flatten75_reg_173 = ap_const_lv15_2000) else "0";
    icmp_ln707_fu_367_p2 <= "1" when (indvar_flatten39_reg_184 = ap_const_lv13_800) else "0";
    icmp_ln710_fu_355_p2 <= "1" when (indvar_flatten13_reg_206 = ap_const_lv11_200) else "0";
    icmp_ln712_fu_343_p2 <= "1" when (indvar_flatten_reg_228 = ap_const_lv8_40) else "0";
    icmp_ln714_fu_331_p2 <= "1" when (p_064_0_reg_250 = ap_const_lv4_8) else "0";
    icmp_ln879_1_fu_283_p2 <= "1" when (p_084_0_reg_217 = ap_const_lv4_7) else "0";
    icmp_ln879_2_fu_461_p2 <= "1" when (c2_V_fu_435_p2 = ap_const_lv3_3) else "0";
    icmp_ln879_3_fu_533_p2 <= "1" when (c5_V_fu_507_p2 = ap_const_lv4_7) else "0";
    icmp_ln879_fu_277_p2 <= "1" when (p_0137_0_reg_195 = ap_const_lv3_3) else "0";

    local_C_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, icmp_ln705_reg_750_pp0_iter12_reg)
    begin
        if (((icmp_ln705_reg_750_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln544_1_fu_591_p2 <= (or_ln879_fu_441_p2 or or_ln544_fu_585_p2);
    or_ln544_2_fu_597_p2 <= (or_ln544_1_fu_591_p2 or icmp_ln706_fu_307_p2);
    or_ln544_fu_585_p2 <= (and_ln879_3_fu_565_p2 or and_ln879_2_fu_493_p2);
    or_ln707_1_fu_399_p2 <= (xor_ln707_fu_393_p2 or icmp_ln706_fu_307_p2);
    or_ln707_fu_379_p2 <= (icmp_ln706_fu_307_p2 or and_ln706_5_fu_373_p2);
    or_ln879_1_fu_447_p2 <= (or_ln879_fu_441_p2 or icmp_ln706_fu_307_p2);
    or_ln879_2_fu_513_p2 <= (and_ln879_2_fu_493_p2 or and_ln707_4_fu_429_p2);
    or_ln879_3_fu_519_p2 <= (or_ln879_2_fu_513_p2 or or_ln707_fu_379_p2);
    or_ln879_4_fu_559_p2 <= (xor_ln879_1_fu_553_p2 or and_ln707_4_fu_429_p2);
    or_ln879_fu_441_p2 <= (and_ln707_4_fu_429_p2 or and_ln706_5_fu_373_p2);
    p_Repl2_2_fu_684_p1 <= fifo_A_in_V_V_dout(32 - 1 downto 0);
    p_Repl2_s_fu_698_p1 <= fifo_B_in_V_V_dout(32 - 1 downto 0);
    select_ln544_1_fu_611_p3 <= 
        c6_V_fu_579_p2 when (and_ln879_3_fu_565_p2(0) = '1') else 
        select_ln879_2_fu_525_p3;
    select_ln544_fu_603_p3 <= 
        ap_const_lv4_0 when (or_ln544_2_fu_597_p2(0) = '1') else 
        p_064_0_reg_250;
    select_ln706_fu_673_p3 <= 
        ap_const_lv15_1 when (icmp_ln706_fu_307_p2(0) = '1') else 
        add_ln706_fu_667_p2;
    select_ln707_1_fu_499_p3 <= 
        c2_V_fu_435_p2 when (and_ln707_4_fu_429_p2(0) = '1') else 
        select_ln707_fu_385_p3;
    select_ln707_2_fu_659_p3 <= 
        ap_const_lv13_1 when (or_ln707_fu_379_p2(0) = '1') else 
        add_ln707_fu_653_p2;
    select_ln707_fu_385_p3 <= 
        ap_const_lv3_0 when (or_ln707_fu_379_p2(0) = '1') else 
        p_0137_0_reg_195;
    select_ln710_1_fu_645_p3 <= 
        ap_const_lv11_1 when (or_ln879_1_fu_447_p2(0) = '1') else 
        add_ln710_fu_639_p2;
    select_ln710_fu_571_p3 <= 
        c5_V_fu_507_p2 when (and_ln879_2_fu_493_p2(0) = '1') else 
        select_ln879_fu_453_p3;
    select_ln712_fu_631_p3 <= 
        ap_const_lv8_1 when (or_ln879_3_fu_519_p2(0) = '1') else 
        add_ln712_fu_625_p2;
    select_ln879_1_fu_467_p3 <= 
        icmp_ln879_2_fu_461_p2 when (and_ln707_4_fu_429_p2(0) = '1') else 
        and_ln707_fu_405_p2;
    select_ln879_2_fu_525_p3 <= 
        ap_const_lv4_0 when (or_ln879_3_fu_519_p2(0) = '1') else 
        ap_phi_mux_p_074_0_phi_fu_243_p4;
    select_ln879_3_fu_545_p3 <= 
        and_ln744_1_fu_539_p2 when (and_ln879_2_fu_493_p2(0) = '1') else 
        and_ln879_fu_481_p2;
    select_ln879_fu_453_p3 <= 
        ap_const_lv4_0 when (or_ln879_1_fu_447_p2(0) = '1') else 
        p_084_0_reg_217;
    tmp_4_fu_712_p3 <= (select_ln544_reg_773 & ap_const_lv3_0);
    xor_ln706_fu_313_p2 <= (icmp_ln706_fu_307_p2 xor ap_const_lv1_1);
    xor_ln707_fu_393_p2 <= (icmp_ln707_fu_367_p2 xor ap_const_lv1_1);
    xor_ln879_1_fu_553_p2 <= (ap_const_lv1_1 xor and_ln707_3_fu_423_p2);
    xor_ln879_fu_475_p2 <= (ap_const_lv1_1 xor and_ln707_4_fu_429_p2);
    zext_ln544_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_1_reg_778),8));
    zext_ln742_1_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln742_fu_723_p2),64));
    zext_ln742_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_712_p3),8));
end behav;
