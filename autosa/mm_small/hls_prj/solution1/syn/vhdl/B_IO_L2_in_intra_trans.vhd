-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity B_IO_L2_in_intra_trans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    local_B_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    local_B_V_ce0 : OUT STD_LOGIC;
    local_B_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_local_out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_local_out_V_V_full_n : IN STD_LOGIC;
    fifo_B_local_out_V_V_write : OUT STD_LOGIC;
    intra_trans_en : IN STD_LOGIC );
end;


architecture behav of B_IO_L2_in_intra_trans is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_B_local_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln407_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten14_reg_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_088_0_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_076_0_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_066_0_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal intra_trans_en_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln407_fu_189_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln1371_4_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1371_4_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1371_fu_235_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1371_reg_434 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln544_fu_263_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln544_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal c7_V_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln409_fu_312_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_p_088_0_phi_fu_143_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_076_0_phi_fu_165_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln409_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_V_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln411_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1371_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1371_fu_207_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln1371_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c6_V_fu_257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln544_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1371_fu_231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln321_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln700_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_8_fu_286_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln409_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_V_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V_fu_394_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component kernel0_mux_83_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    kernel0_mux_83_64_1_1_U36 : component kernel0_mux_83_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => out_data_V_fu_394_p1,
        din1 => out_data_V_fu_394_p2,
        din2 => out_data_V_fu_394_p3,
        din3 => out_data_V_fu_394_p4,
        din4 => out_data_V_fu_394_p5,
        din5 => out_data_V_fu_394_p6,
        din6 => out_data_V_fu_394_p7,
        din7 => out_data_V_fu_394_p8,
        din8 => trunc_ln1371_reg_434,
        dout => out_data_V_fu_394_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten14_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten14_reg_128 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten14_reg_128 <= add_ln407_fu_189_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_150 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_150 <= select_ln409_fu_312_p3;
            end if; 
        end if;
    end process;

    p_066_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_066_0_reg_172 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_066_0_reg_172 <= c7_V_fu_298_p3;
            end if; 
        end if;
    end process;

    p_076_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_076_0_reg_161 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_076_0_reg_161 <= select_ln544_reg_439;
            end if; 
        end if;
    end process;

    p_088_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_088_0_reg_139 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_088_0_reg_139 <= select_ln1371_4_reg_429;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln407_reg_420 <= icmp_ln407_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln1371_4_reg_429 <= select_ln1371_4_fu_215_p3;
                select_ln544_reg_439 <= select_ln544_fu_263_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln1371_reg_434 <= trunc_ln1371_fu_235_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, intra_trans_en_read_read_fu_102_p2, icmp_ln407_fu_183_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (intra_trans_en_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln407_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln407_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln321_fu_275_p2 <= std_logic_vector(unsigned(zext_ln544_fu_271_p1) + unsigned(zext_ln1371_fu_231_p1));
    add_ln407_fu_189_p2 <= std_logic_vector(unsigned(indvar_flatten14_reg_128) + unsigned(ap_const_lv10_1));
    add_ln409_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_150));
    add_ln700_8_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(p_066_0_reg_172));
    and_ln1371_fu_251_p2 <= (xor_ln1371_fu_239_p2 and icmp_ln411_fu_245_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_420)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln407_reg_420 = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_420)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln407_reg_420 = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln407_reg_420)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln407_reg_420 = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifo_B_local_out_V_V_full_n, icmp_ln407_reg_420)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln407_reg_420 = ap_const_lv1_0) and (fifo_B_local_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln407_fu_183_p2)
    begin
        if ((icmp_ln407_fu_183_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_076_0_phi_fu_165_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_420, p_076_0_reg_161, select_ln544_reg_439)
    begin
        if (((icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_076_0_phi_fu_165_p4 <= select_ln544_reg_439;
        else 
            ap_phi_mux_p_076_0_phi_fu_165_p4 <= p_076_0_reg_161;
        end if; 
    end process;


    ap_phi_mux_p_088_0_phi_fu_143_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_420, p_088_0_reg_139, select_ln1371_4_reg_429)
    begin
        if (((icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_088_0_phi_fu_143_p4 <= select_ln1371_4_reg_429;
        else 
            ap_phi_mux_p_088_0_phi_fu_143_p4 <= p_088_0_reg_139;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c5_V_fu_195_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_p_088_0_phi_fu_143_p4));
    c6_V_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln1371_fu_207_p3));
    c7_V_fu_298_p3 <= 
        ap_const_lv4_1 when (or_ln700_fu_292_p2(0) = '1') else 
        add_ln700_8_fu_286_p2;

    fifo_B_local_out_V_V_blk_n_assign_proc : process(fifo_B_local_out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln407_reg_420)
    begin
        if (((icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_local_out_V_V_blk_n <= fifo_B_local_out_V_V_full_n;
        else 
            fifo_B_local_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_local_out_V_V_din <= out_data_V_fu_394_p10;

    fifo_B_local_out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln407_reg_420, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln407_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_local_out_V_V_write <= ap_const_logic_1;
        else 
            fifo_B_local_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln407_fu_183_p2 <= "1" when (indvar_flatten14_reg_128 = ap_const_lv10_200) else "0";
    icmp_ln409_fu_201_p2 <= "1" when (indvar_flatten_reg_150 = ap_const_lv8_40) else "0";
    icmp_ln411_fu_245_p2 <= "1" when (p_066_0_reg_172 = ap_const_lv4_8) else "0";
    intra_trans_en_read_read_fu_102_p2 <= (0=>intra_trans_en, others=>'-');
    local_B_V_address0 <= zext_ln321_fu_281_p1(3 - 1 downto 0);

    local_B_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_B_V_ce0 <= ap_const_logic_1;
        else 
            local_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln700_fu_292_p2 <= (icmp_ln409_fu_201_p2 or and_ln1371_fu_251_p2);
    out_data_V_fu_394_p1 <= local_B_V_q0(64 - 1 downto 0);
    out_data_V_fu_394_p2 <= local_B_V_q0(127 downto 64);
    out_data_V_fu_394_p3 <= local_B_V_q0(191 downto 128);
    out_data_V_fu_394_p4 <= local_B_V_q0(255 downto 192);
    out_data_V_fu_394_p5 <= local_B_V_q0(319 downto 256);
    out_data_V_fu_394_p6 <= local_B_V_q0(383 downto 320);
    out_data_V_fu_394_p7 <= local_B_V_q0(447 downto 384);
    out_data_V_fu_394_p8 <= local_B_V_q0(511 downto 448);
    select_ln1371_4_fu_215_p3 <= 
        c5_V_fu_195_p2 when (icmp_ln409_fu_201_p2(0) = '1') else 
        ap_phi_mux_p_088_0_phi_fu_143_p4;
    select_ln1371_fu_207_p3 <= 
        ap_const_lv4_0 when (icmp_ln409_fu_201_p2(0) = '1') else 
        ap_phi_mux_p_076_0_phi_fu_165_p4;
    select_ln409_fu_312_p3 <= 
        ap_const_lv8_1 when (icmp_ln409_fu_201_p2(0) = '1') else 
        add_ln409_fu_306_p2;
    select_ln544_fu_263_p3 <= 
        c6_V_fu_257_p2 when (and_ln1371_fu_251_p2(0) = '1') else 
        select_ln1371_fu_207_p3;
    tmp_9_fu_223_p3 <= select_ln1371_4_fu_215_p3(3 downto 3);
    trunc_ln1371_fu_235_p1 <= select_ln1371_4_fu_215_p3(3 - 1 downto 0);
    xor_ln1371_fu_239_p2 <= (icmp_ln409_fu_201_p2 xor ap_const_lv1_1);
    zext_ln1371_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_223_p3),5));
    zext_ln321_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_275_p2),64));
    zext_ln544_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_fu_263_p3),5));
end behav;
