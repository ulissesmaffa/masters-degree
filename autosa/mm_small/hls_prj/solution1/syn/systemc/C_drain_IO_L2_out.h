// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _C_drain_IO_L2_out_HH_
#define _C_drain_IO_L2_out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct C_drain_IO_L2_out : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<128> > fifo_C_drain_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_in_V_V_read;
    sc_out< sc_lv<128> > fifo_C_drain_out_V_V_din;
    sc_in< sc_logic > fifo_C_drain_out_V_V_full_n;
    sc_out< sc_logic > fifo_C_drain_out_V_V_write;
    sc_in< sc_lv<128> > fifo_C_drain_local_in_V_V_dout;
    sc_in< sc_logic > fifo_C_drain_local_in_V_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_local_in_V_V_read;


    // Module declarations
    C_drain_IO_L2_out(sc_module_name name);
    SC_HAS_PROCESS(C_drain_IO_L2_out);

    ~C_drain_IO_L2_out();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > fifo_C_drain_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln1067_reg_262;
    sc_signal< sc_logic > fifo_C_drain_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln1050_reg_281;
    sc_signal< sc_logic > fifo_C_drain_local_in_V_V_blk_n;
    sc_signal< sc_lv<6> > indvar_flatten30_reg_119;
    sc_signal< sc_lv<6> > indvar_flatten11_reg_130;
    sc_signal< sc_lv<1> > icmp_ln1043_fu_141_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > add_ln1043_fu_147_p2;
    sc_signal< sc_lv<6> > add_ln1043_reg_243;
    sc_signal< sc_lv<1> > icmp_ln1044_fu_153_p2;
    sc_signal< sc_lv<1> > icmp_ln1044_reg_248;
    sc_signal< sc_lv<2> > select_ln1047_fu_183_p3;
    sc_signal< sc_lv<2> > select_ln1047_reg_253;
    sc_signal< sc_lv<1> > icmp_ln879_fu_191_p2;
    sc_signal< sc_lv<1> > icmp_ln1067_fu_197_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > add_ln1067_fu_203_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > c3_V_fu_209_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<5> > select_ln1044_fu_220_p3;
    sc_signal< sc_lv<1> > icmp_ln1050_fu_227_p2;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<6> > add_ln1050_fu_233_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< sc_lv<6> > indvar_flatten49_reg_85;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<5> > indvar_flatten37_reg_96;
    sc_signal< sc_lv<2> > p_026_0_reg_108;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln1047_fu_165_p2;
    sc_signal< sc_lv<1> > xor_ln1044_fu_159_p2;
    sc_signal< sc_lv<1> > and_ln1044_fu_171_p2;
    sc_signal< sc_lv<1> > or_ln1047_fu_177_p2;
    sc_signal< sc_lv<5> > add_ln1044_fu_214_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1043_fu_147_p2();
    void thread_add_ln1044_fu_214_p2();
    void thread_add_ln1050_fu_233_p2();
    void thread_add_ln1067_fu_203_p2();
    void thread_and_ln1044_fu_171_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_c3_V_fu_209_p2();
    void thread_fifo_C_drain_in_V_V_blk_n();
    void thread_fifo_C_drain_in_V_V_read();
    void thread_fifo_C_drain_local_in_V_V_blk_n();
    void thread_fifo_C_drain_local_in_V_V_read();
    void thread_fifo_C_drain_out_V_V_blk_n();
    void thread_fifo_C_drain_out_V_V_din();
    void thread_fifo_C_drain_out_V_V_write();
    void thread_icmp_ln1043_fu_141_p2();
    void thread_icmp_ln1044_fu_153_p2();
    void thread_icmp_ln1047_fu_165_p2();
    void thread_icmp_ln1050_fu_227_p2();
    void thread_icmp_ln1067_fu_197_p2();
    void thread_icmp_ln879_fu_191_p2();
    void thread_internal_ap_ready();
    void thread_or_ln1047_fu_177_p2();
    void thread_real_start();
    void thread_select_ln1044_fu_220_p3();
    void thread_select_ln1047_fu_183_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_xor_ln1044_fu_159_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
