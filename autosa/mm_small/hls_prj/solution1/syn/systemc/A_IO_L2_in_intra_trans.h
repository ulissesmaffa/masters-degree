// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _A_IO_L2_in_intra_trans_HH_
#define _A_IO_L2_in_intra_trans_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel0_mux_83_64_1_1.h"

namespace ap_rtl {

struct A_IO_L2_in_intra_trans : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > local_A_V_address0;
    sc_out< sc_logic > local_A_V_ce0;
    sc_in< sc_lv<512> > local_A_V_q0;
    sc_out< sc_lv<64> > fifo_A_local_out_V_V_din;
    sc_in< sc_logic > fifo_A_local_out_V_V_full_n;
    sc_out< sc_logic > fifo_A_local_out_V_V_write;
    sc_in< sc_logic > intra_trans_en;


    // Module declarations
    A_IO_L2_in_intra_trans(sc_module_name name);
    SC_HAS_PROCESS(A_IO_L2_in_intra_trans);

    ~A_IO_L2_in_intra_trans();

    sc_trace_file* mVcdFile;

    kernel0_mux_83_64_1_1<1,1,64,64,64,64,64,64,64,64,3,64>* kernel0_mux_83_64_1_1_U15;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_A_local_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln62_reg_387;
    sc_signal< sc_lv<10> > indvar_flatten11_reg_128;
    sc_signal< sc_lv<4> > p_088_0_reg_139;
    sc_signal< sc_lv<8> > indvar_flatten_reg_150;
    sc_signal< sc_lv<4> > p_066_0_reg_161;
    sc_signal< sc_lv<1> > intra_trans_en_read_read_fu_102_p2;
    sc_signal< sc_lv<1> > icmp_ln62_fu_172_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > add_ln62_fu_178_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > select_ln1371_fu_196_p3;
    sc_signal< sc_lv<4> > select_ln1371_reg_396;
    sc_signal< sc_lv<3> > trunc_ln1371_fu_216_p1;
    sc_signal< sc_lv<3> > trunc_ln1371_reg_401;
    sc_signal< sc_lv<4> > c7_V_fu_267_p2;
    sc_signal< sc_lv<8> > select_ln64_fu_279_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<4> > ap_phi_mux_p_088_0_phi_fu_143_p4;
    sc_signal< sc_lv<64> > zext_ln321_7_fu_262_p1;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p10;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln64_fu_190_p2;
    sc_signal< sc_lv<4> > c5_V_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_10_fu_204_p3;
    sc_signal< sc_lv<1> > icmp_ln66_fu_226_p2;
    sc_signal< sc_lv<1> > xor_ln1371_fu_220_p2;
    sc_signal< sc_lv<1> > and_ln1371_fu_232_p2;
    sc_signal< sc_lv<1> > or_ln66_fu_238_p2;
    sc_signal< sc_lv<4> > select_ln66_fu_244_p3;
    sc_signal< sc_lv<5> > zext_ln321_fu_252_p1;
    sc_signal< sc_lv<5> > zext_ln1371_fu_212_p1;
    sc_signal< sc_lv<5> > add_ln321_fu_256_p2;
    sc_signal< sc_lv<8> > add_ln64_fu_273_p2;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p1;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p2;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p3;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p4;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p5;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p6;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p7;
    sc_signal< sc_lv<64> > out_data_V_fu_361_p8;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_40;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_BF;
    static const sc_lv<32> ap_const_lv32_C0;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<32> ap_const_lv32_100;
    static const sc_lv<32> ap_const_lv32_13F;
    static const sc_lv<32> ap_const_lv32_140;
    static const sc_lv<32> ap_const_lv32_17F;
    static const sc_lv<32> ap_const_lv32_180;
    static const sc_lv<32> ap_const_lv32_1BF;
    static const sc_lv<32> ap_const_lv32_1C0;
    static const sc_lv<32> ap_const_lv32_1FF;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln321_fu_256_p2();
    void thread_add_ln62_fu_178_p2();
    void thread_add_ln64_fu_273_p2();
    void thread_and_ln1371_fu_232_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_088_0_phi_fu_143_p4();
    void thread_ap_ready();
    void thread_c5_V_fu_184_p2();
    void thread_c7_V_fu_267_p2();
    void thread_fifo_A_local_out_V_V_blk_n();
    void thread_fifo_A_local_out_V_V_din();
    void thread_fifo_A_local_out_V_V_write();
    void thread_icmp_ln62_fu_172_p2();
    void thread_icmp_ln64_fu_190_p2();
    void thread_icmp_ln66_fu_226_p2();
    void thread_intra_trans_en_read_read_fu_102_p2();
    void thread_local_A_V_address0();
    void thread_local_A_V_ce0();
    void thread_or_ln66_fu_238_p2();
    void thread_out_data_V_fu_361_p1();
    void thread_out_data_V_fu_361_p2();
    void thread_out_data_V_fu_361_p3();
    void thread_out_data_V_fu_361_p4();
    void thread_out_data_V_fu_361_p5();
    void thread_out_data_V_fu_361_p6();
    void thread_out_data_V_fu_361_p7();
    void thread_out_data_V_fu_361_p8();
    void thread_select_ln1371_fu_196_p3();
    void thread_select_ln64_fu_279_p3();
    void thread_select_ln66_fu_244_p3();
    void thread_tmp_10_fu_204_p3();
    void thread_trunc_ln1371_fu_216_p1();
    void thread_xor_ln1371_fu_220_p2();
    void thread_zext_ln1371_fu_212_p1();
    void thread_zext_ln321_7_fu_262_p1();
    void thread_zext_ln321_fu_252_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
