// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _C_drain_IO_L1_out_boundary_wrapper_HH_
#define _C_drain_IO_L1_out_boundary_wrapper_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "C_drain_IO_L1_out_boundary_wrapper135_local_C_V.h"

namespace ap_rtl {

struct C_drain_IO_L1_out_boundary_wrapper : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<128> > fifo_C_drain_out_V_V_din;
    sc_in< sc_logic > fifo_C_drain_out_V_V_full_n;
    sc_out< sc_logic > fifo_C_drain_out_V_V_write;
    sc_in< sc_lv<32> > fifo_C_drain_local_in_V_dout;
    sc_in< sc_logic > fifo_C_drain_local_in_V_empty_n;
    sc_out< sc_logic > fifo_C_drain_local_in_V_read;


    // Module declarations
    C_drain_IO_L1_out_boundary_wrapper(sc_module_name name);
    SC_HAS_PROCESS(C_drain_IO_L1_out_boundary_wrapper);

    ~C_drain_IO_L1_out_boundary_wrapper();

    sc_trace_file* mVcdFile;

    C_drain_IO_L1_out_boundary_wrapper135_local_C_V* local_C_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_C_drain_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln927_reg_527;
    sc_signal< sc_logic > fifo_C_drain_local_in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln849_reg_498;
    sc_signal< sc_lv<7> > indvar_flatten_reg_148;
    sc_signal< sc_lv<4> > p_062_0_i_i_reg_159;
    sc_signal< sc_lv<4> > p_076_0_i_i_reg_170;
    sc_signal< sc_lv<5> > indvar_flatten6_reg_233;
    sc_signal< sc_lv<4> > p_064_0_i_i_0_reg_244;
    sc_signal< sc_lv<2> > p_054_0_i_i_0_reg_255;
    sc_signal< sc_lv<1> > icmp_ln1000_fu_266_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > add_ln1000_fu_272_p2;
    sc_signal< sc_lv<5> > add_ln1000_reg_493;
    sc_signal< sc_lv<1> > icmp_ln849_fu_278_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<7> > add_ln849_fu_284_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > select_ln1371_2_fu_310_p3;
    sc_signal< sc_lv<4> > select_ln1371_2_reg_507;
    sc_signal< sc_lv<2> > trunc_ln1371_fu_326_p1;
    sc_signal< sc_lv<2> > trunc_ln1371_reg_512;
    sc_signal< sc_lv<4> > local_C_V_addr_1_reg_516;
    sc_signal< sc_lv<4> > c7_V_fu_343_p2;
    sc_signal< sc_lv<1> > icmp_ln927_fu_416_p2;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<5> > add_ln927_fu_422_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<4> > select_ln544_3_fu_448_p3;
    sc_signal< sc_lv<4> > select_ln544_3_reg_536;
    sc_signal< sc_lv<2> > add_ln700_5_fu_483_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< sc_lv<4> > local_C_V_address0;
    sc_signal< sc_logic > local_C_V_ce0;
    sc_signal< sc_lv<128> > local_C_V_q0;
    sc_signal< sc_logic > local_C_V_ce1;
    sc_signal< sc_logic > local_C_V_we1;
    sc_signal< sc_lv<128> > local_C_V_d1;
    sc_signal< sc_lv<5> > indvar_flatten13_reg_137;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > ap_phi_mux_p_062_0_i_i_phi_fu_163_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_v1_V_phi_fu_184_p8;
    sc_signal< sc_lv<32> > data_split_0_V_4_fu_395_p1;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter1_v1_V_reg_181;
    sc_signal< sc_lv<32> > ap_phi_mux_v2_V_10_phi_fu_197_p8;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter1_v2_V_10_reg_194;
    sc_signal< sc_lv<32> > ap_phi_mux_v2_V_9_phi_fu_210_p8;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter1_v2_V_9_reg_207;
    sc_signal< sc_lv<32> > ap_phi_mux_v2_V_phi_fu_223_p8;
    sc_signal< sc_lv<32> > data_split_0_V_fu_349_p1;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter1_v2_V_reg_220;
    sc_signal< sc_lv<4> > ap_phi_mux_p_064_0_i_i_0_phi_fu_248_p4;
    sc_signal< sc_lv<64> > zext_ln321_fu_338_p1;
    sc_signal< sc_lv<64> > zext_ln321_4_fu_478_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln851_fu_296_p2;
    sc_signal< sc_lv<4> > c6_V_fu_290_p2;
    sc_signal< sc_lv<4> > select_ln1371_fu_302_p3;
    sc_signal< sc_lv<1> > tmp_fu_318_p3;
    sc_signal< sc_lv<5> > tmp_9_fu_330_p3;
    sc_signal< sc_lv<1> > icmp_ln929_fu_434_p2;
    sc_signal< sc_lv<4> > add_ln700_fu_428_p2;
    sc_signal< sc_lv<5> > tmp_s_fu_456_p3;
    sc_signal< sc_lv<2> > select_ln544_fu_440_p3;
    sc_signal< sc_lv<6> > zext_ln321_3_fu_468_p1;
    sc_signal< sc_lv<6> > zext_ln929_fu_464_p1;
    sc_signal< sc_lv<6> > add_ln321_fu_472_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1000_fu_272_p2();
    void thread_add_ln321_fu_472_p2();
    void thread_add_ln700_5_fu_483_p2();
    void thread_add_ln700_fu_428_p2();
    void thread_add_ln849_fu_284_p2();
    void thread_add_ln927_fu_422_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_p_062_0_i_i_phi_fu_163_p4();
    void thread_ap_phi_mux_p_064_0_i_i_0_phi_fu_248_p4();
    void thread_ap_phi_mux_v1_V_phi_fu_184_p8();
    void thread_ap_phi_mux_v2_V_10_phi_fu_197_p8();
    void thread_ap_phi_mux_v2_V_9_phi_fu_210_p8();
    void thread_ap_phi_mux_v2_V_phi_fu_223_p8();
    void thread_ap_phi_reg_pp0_iter1_v1_V_reg_181();
    void thread_ap_phi_reg_pp0_iter1_v2_V_10_reg_194();
    void thread_ap_phi_reg_pp0_iter1_v2_V_9_reg_207();
    void thread_ap_phi_reg_pp0_iter1_v2_V_reg_220();
    void thread_ap_ready();
    void thread_c6_V_fu_290_p2();
    void thread_c7_V_fu_343_p2();
    void thread_data_split_0_V_4_fu_395_p1();
    void thread_data_split_0_V_fu_349_p1();
    void thread_fifo_C_drain_local_in_V_blk_n();
    void thread_fifo_C_drain_local_in_V_read();
    void thread_fifo_C_drain_out_V_V_blk_n();
    void thread_fifo_C_drain_out_V_V_din();
    void thread_fifo_C_drain_out_V_V_write();
    void thread_icmp_ln1000_fu_266_p2();
    void thread_icmp_ln849_fu_278_p2();
    void thread_icmp_ln851_fu_296_p2();
    void thread_icmp_ln927_fu_416_p2();
    void thread_icmp_ln929_fu_434_p2();
    void thread_local_C_V_address0();
    void thread_local_C_V_ce0();
    void thread_local_C_V_ce1();
    void thread_local_C_V_d1();
    void thread_local_C_V_we1();
    void thread_select_ln1371_2_fu_310_p3();
    void thread_select_ln1371_fu_302_p3();
    void thread_select_ln544_3_fu_448_p3();
    void thread_select_ln544_fu_440_p3();
    void thread_tmp_9_fu_330_p3();
    void thread_tmp_fu_318_p3();
    void thread_tmp_s_fu_456_p3();
    void thread_trunc_ln1371_fu_326_p1();
    void thread_zext_ln321_3_fu_468_p1();
    void thread_zext_ln321_4_fu_478_p1();
    void thread_zext_ln321_fu_338_p1();
    void thread_zext_ln929_fu_464_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
