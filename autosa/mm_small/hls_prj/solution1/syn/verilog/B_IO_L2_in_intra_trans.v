// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module B_IO_L2_in_intra_trans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_B_V_address0,
        local_B_V_ce0,
        local_B_V_q0,
        fifo_B_local_out_V_V_din,
        fifo_B_local_out_V_V_full_n,
        fifo_B_local_out_V_V_write,
        intra_trans_en
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] local_B_V_address0;
output   local_B_V_ce0;
input  [511:0] local_B_V_q0;
output  [63:0] fifo_B_local_out_V_V_din;
input   fifo_B_local_out_V_V_full_n;
output   fifo_B_local_out_V_V_write;
input   intra_trans_en;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg local_B_V_ce0;
reg fifo_B_local_out_V_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_B_local_out_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln407_reg_420;
reg   [9:0] indvar_flatten14_reg_128;
reg   [3:0] p_088_0_reg_139;
reg   [7:0] indvar_flatten_reg_150;
reg   [3:0] p_076_0_reg_161;
reg   [3:0] p_066_0_reg_172;
wire   [0:0] intra_trans_en_read_read_fu_102_p2;
wire   [0:0] icmp_ln407_fu_183_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln407_fu_189_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln1371_4_fu_215_p3;
reg   [3:0] select_ln1371_4_reg_429;
wire   [2:0] trunc_ln1371_fu_235_p1;
reg   [2:0] trunc_ln1371_reg_434;
wire   [3:0] select_ln544_fu_263_p3;
reg   [3:0] select_ln544_reg_439;
wire   [3:0] c7_V_fu_298_p3;
wire   [7:0] select_ln409_fu_312_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [3:0] ap_phi_mux_p_088_0_phi_fu_143_p4;
reg   [3:0] ap_phi_mux_p_076_0_phi_fu_165_p4;
wire   [63:0] zext_ln321_fu_281_p1;
wire   [63:0] out_data_V_fu_394_p10;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln409_fu_201_p2;
wire   [3:0] c5_V_fu_195_p2;
wire   [0:0] tmp_9_fu_223_p3;
wire   [0:0] icmp_ln411_fu_245_p2;
wire   [0:0] xor_ln1371_fu_239_p2;
wire   [3:0] select_ln1371_fu_207_p3;
wire   [0:0] and_ln1371_fu_251_p2;
wire   [3:0] c6_V_fu_257_p2;
wire   [4:0] zext_ln544_fu_271_p1;
wire   [4:0] zext_ln1371_fu_231_p1;
wire   [4:0] add_ln321_fu_275_p2;
wire   [0:0] or_ln700_fu_292_p2;
wire   [3:0] add_ln700_8_fu_286_p2;
wire   [7:0] add_ln409_fu_306_p2;
wire   [63:0] out_data_V_fu_394_p1;
wire   [63:0] out_data_V_fu_394_p2;
wire   [63:0] out_data_V_fu_394_p3;
wire   [63:0] out_data_V_fu_394_p4;
wire   [63:0] out_data_V_fu_394_p5;
wire   [63:0] out_data_V_fu_394_p6;
wire   [63:0] out_data_V_fu_394_p7;
wire   [63:0] out_data_V_fu_394_p8;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

kernel0_mux_83_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
kernel0_mux_83_64_1_1_U36(
    .din0(out_data_V_fu_394_p1),
    .din1(out_data_V_fu_394_p2),
    .din2(out_data_V_fu_394_p3),
    .din3(out_data_V_fu_394_p4),
    .din4(out_data_V_fu_394_p5),
    .din5(out_data_V_fu_394_p6),
    .din6(out_data_V_fu_394_p7),
    .din7(out_data_V_fu_394_p8),
    .din8(trunc_ln1371_reg_434),
    .dout(out_data_V_fu_394_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_128 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_128 <= add_ln407_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_150 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_150 <= select_ln409_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_066_0_reg_172 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_066_0_reg_172 <= c7_V_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_076_0_reg_161 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_076_0_reg_161 <= select_ln544_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_088_0_reg_139 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_088_0_reg_139 <= select_ln1371_4_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln407_reg_420 <= icmp_ln407_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1371_4_reg_429 <= select_ln1371_4_fu_215_p3;
        select_ln544_reg_439 <= select_ln544_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1371_reg_434 <= trunc_ln1371_fu_235_p1;
    end
end

always @ (*) begin
    if ((icmp_ln407_fu_183_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_076_0_phi_fu_165_p4 = select_ln544_reg_439;
    end else begin
        ap_phi_mux_p_076_0_phi_fu_165_p4 = p_076_0_reg_161;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_088_0_phi_fu_143_p4 = select_ln1371_4_reg_429;
    end else begin
        ap_phi_mux_p_088_0_phi_fu_143_p4 = p_088_0_reg_139;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln407_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_B_local_out_V_V_blk_n = fifo_B_local_out_V_V_full_n;
    end else begin
        fifo_B_local_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln407_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_B_local_out_V_V_write = 1'b1;
    end else begin
        fifo_B_local_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_B_V_ce0 = 1'b1;
    end else begin
        local_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (intra_trans_en_read_read_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln407_fu_183_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln407_fu_183_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_275_p2 = (zext_ln544_fu_271_p1 + zext_ln1371_fu_231_p1);

assign add_ln407_fu_189_p2 = (indvar_flatten14_reg_128 + 10'd1);

assign add_ln409_fu_306_p2 = (8'd1 + indvar_flatten_reg_150);

assign add_ln700_8_fu_286_p2 = (4'd1 + p_066_0_reg_172);

assign and_ln1371_fu_251_p2 = (xor_ln1371_fu_239_p2 & icmp_ln411_fu_245_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln407_reg_420 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln407_reg_420 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln407_reg_420 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln407_reg_420 == 1'd0) & (fifo_B_local_out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c5_V_fu_195_p2 = (4'd1 + ap_phi_mux_p_088_0_phi_fu_143_p4);

assign c6_V_fu_257_p2 = (4'd1 + select_ln1371_fu_207_p3);

assign c7_V_fu_298_p3 = ((or_ln700_fu_292_p2[0:0] === 1'b1) ? 4'd1 : add_ln700_8_fu_286_p2);

assign fifo_B_local_out_V_V_din = out_data_V_fu_394_p10;

assign icmp_ln407_fu_183_p2 = ((indvar_flatten14_reg_128 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln409_fu_201_p2 = ((indvar_flatten_reg_150 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln411_fu_245_p2 = ((p_066_0_reg_172 == 4'd8) ? 1'b1 : 1'b0);

assign intra_trans_en_read_read_fu_102_p2 = intra_trans_en;

assign local_B_V_address0 = zext_ln321_fu_281_p1;

assign or_ln700_fu_292_p2 = (icmp_ln409_fu_201_p2 | and_ln1371_fu_251_p2);

assign out_data_V_fu_394_p1 = local_B_V_q0[63:0];

assign out_data_V_fu_394_p2 = {{local_B_V_q0[127:64]}};

assign out_data_V_fu_394_p3 = {{local_B_V_q0[191:128]}};

assign out_data_V_fu_394_p4 = {{local_B_V_q0[255:192]}};

assign out_data_V_fu_394_p5 = {{local_B_V_q0[319:256]}};

assign out_data_V_fu_394_p6 = {{local_B_V_q0[383:320]}};

assign out_data_V_fu_394_p7 = {{local_B_V_q0[447:384]}};

assign out_data_V_fu_394_p8 = {{local_B_V_q0[511:448]}};

assign select_ln1371_4_fu_215_p3 = ((icmp_ln409_fu_201_p2[0:0] === 1'b1) ? c5_V_fu_195_p2 : ap_phi_mux_p_088_0_phi_fu_143_p4);

assign select_ln1371_fu_207_p3 = ((icmp_ln409_fu_201_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_p_076_0_phi_fu_165_p4);

assign select_ln409_fu_312_p3 = ((icmp_ln409_fu_201_p2[0:0] === 1'b1) ? 8'd1 : add_ln409_fu_306_p2);

assign select_ln544_fu_263_p3 = ((and_ln1371_fu_251_p2[0:0] === 1'b1) ? c6_V_fu_257_p2 : select_ln1371_fu_207_p3);

assign tmp_9_fu_223_p3 = select_ln1371_4_fu_215_p3[32'd3];

assign trunc_ln1371_fu_235_p1 = select_ln1371_4_fu_215_p3[2:0];

assign xor_ln1371_fu_239_p2 = (icmp_ln409_fu_201_p2 ^ 1'd1);

assign zext_ln1371_fu_231_p1 = tmp_9_fu_223_p3;

assign zext_ln321_fu_281_p1 = add_ln321_fu_275_p2;

assign zext_ln544_fu_271_p1 = select_ln544_fu_263_p3;

endmodule //B_IO_L2_in_intra_trans
