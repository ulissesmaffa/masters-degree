// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module A_IO_L2_in_inter_trans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_A_V_address1,
        local_A_V_ce1,
        local_A_V_we1,
        local_A_V_d1,
        fifo_A_in_V_V_dout,
        fifo_A_in_V_V_empty_n,
        fifo_A_in_V_V_read,
        fifo_A_out_V_V_din,
        fifo_A_out_V_V_full_n,
        fifo_A_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_pp1_stage0 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] local_A_V_address1;
output   local_A_V_ce1;
output   local_A_V_we1;
output  [511:0] local_A_V_d1;
input  [511:0] fifo_A_in_V_V_dout;
input   fifo_A_in_V_V_empty_n;
output   fifo_A_in_V_V_read;
output  [511:0] fifo_A_out_V_V_din;
input   fifo_A_out_V_V_full_n;
output   fifo_A_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg local_A_V_ce1;
reg local_A_V_we1;
reg fifo_A_in_V_V_read;
reg fifo_A_out_V_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_A_in_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln100_reg_197;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln112_reg_188;
reg    fifo_A_out_V_V_blk_n;
reg   [3:0] p_047_0_reg_105;
reg   [3:0] p_069_0_reg_116;
wire   [0:0] icmp_ln97_fu_128_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] c3_V_fu_134_p2;
reg   [1:0] c3_V_reg_179;
wire   [0:0] icmp_ln879_fu_140_p2;
wire   [0:0] icmp_ln112_fu_146_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] c4_V_2_fu_152_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln100_fu_158_p2;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] c4_V_fu_164_p2;
reg   [3:0] c4_V_reg_201;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg   [1:0] p_084_0_reg_94;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_phi_mux_p_069_0_phi_fu_120_p4;
wire   [63:0] zext_ln544_fu_170_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln879_fu_140_p2 == 1'd0) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln879_fu_140_p2 == 1'd0) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln879_fu_140_p2 == 1'd1) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln879_fu_140_p2 == 1'd1) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_fu_140_p2 == 1'd0) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_047_0_reg_105 <= 4'd0;
    end else if (((icmp_ln112_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_047_0_reg_105 <= c4_V_2_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_fu_140_p2 == 1'd1) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_069_0_reg_116 <= 4'd0;
    end else if (((icmp_ln100_reg_197 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_069_0_reg_116 <= c4_V_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_084_0_reg_94 <= c3_V_reg_179;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_084_0_reg_94 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c3_V_reg_179 <= c3_V_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c4_V_reg_201 <= c4_V_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln100_reg_197 <= icmp_ln100_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln112_reg_188 <= icmp_ln112_fu_146_p2;
    end
end

always @ (*) begin
    if ((icmp_ln112_fu_146_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln100_fu_158_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln97_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_197 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_p_069_0_phi_fu_120_p4 = c4_V_reg_201;
    end else begin
        ap_phi_mux_p_069_0_phi_fu_120_p4 = p_069_0_reg_116;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln112_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln100_reg_197 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fifo_A_in_V_V_blk_n = fifo_A_in_V_V_empty_n;
    end else begin
        fifo_A_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln112_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln100_reg_197 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fifo_A_in_V_V_read = 1'b1;
    end else begin
        fifo_A_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln112_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_A_out_V_V_blk_n = fifo_A_out_V_V_full_n;
    end else begin
        fifo_A_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_A_out_V_V_write = 1'b1;
    end else begin
        fifo_A_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        local_A_V_ce1 = 1'b1;
    end else begin
        local_A_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_reg_197 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        local_A_V_we1 = 1'b1;
    end else begin
        local_A_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln97_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln879_fu_140_p2 == 1'd1) & (icmp_ln97_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln112_fu_146_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln112_fu_146_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln100_fu_158_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln100_fu_158_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_188 == 1'd0) & (fifo_A_out_V_V_full_n == 1'b0)) | ((icmp_ln112_reg_188 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_188 == 1'd0) & (fifo_A_out_V_V_full_n == 1'b0)) | ((icmp_ln112_reg_188 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_188 == 1'd0) & (fifo_A_out_V_V_full_n == 1'b0)) | ((icmp_ln112_reg_188 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln100_reg_197 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln100_reg_197 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln112_reg_188 == 1'd0) & (fifo_A_out_V_V_full_n == 1'b0)) | ((icmp_ln112_reg_188 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0)));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((icmp_ln100_reg_197 == 1'd0) & (fifo_A_in_V_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign c3_V_fu_134_p2 = (p_084_0_reg_94 + 2'd1);

assign c4_V_2_fu_152_p2 = (p_047_0_reg_105 + 4'd1);

assign c4_V_fu_164_p2 = (ap_phi_mux_p_069_0_phi_fu_120_p4 + 4'd1);

assign fifo_A_out_V_V_din = fifo_A_in_V_V_dout;

assign icmp_ln100_fu_158_p2 = ((ap_phi_mux_p_069_0_phi_fu_120_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_146_p2 = ((p_047_0_reg_105 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_140_p2 = ((p_084_0_reg_94 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_128_p2 = ((p_084_0_reg_94 == 2'd2) ? 1'b1 : 1'b0);

assign local_A_V_address1 = zext_ln544_fu_170_p1;

assign local_A_V_d1 = fifo_A_in_V_V_dout;

assign zext_ln544_fu_170_p1 = p_069_0_reg_116;

endmodule //A_IO_L2_in_inter_trans
