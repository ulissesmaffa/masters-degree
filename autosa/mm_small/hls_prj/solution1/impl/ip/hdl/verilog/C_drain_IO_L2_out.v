// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module C_drain_IO_L2_out (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fifo_C_drain_in_V_V_dout,
        fifo_C_drain_in_V_V_empty_n,
        fifo_C_drain_in_V_V_read,
        fifo_C_drain_out_V_V_din,
        fifo_C_drain_out_V_V_full_n,
        fifo_C_drain_out_V_V_write,
        fifo_C_drain_local_in_V_V_dout,
        fifo_C_drain_local_in_V_V_empty_n,
        fifo_C_drain_local_in_V_V_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_pp1_stage0 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] fifo_C_drain_in_V_V_dout;
input   fifo_C_drain_in_V_V_empty_n;
output   fifo_C_drain_in_V_V_read;
output  [127:0] fifo_C_drain_out_V_V_din;
input   fifo_C_drain_out_V_V_full_n;
output   fifo_C_drain_out_V_V_write;
input  [127:0] fifo_C_drain_local_in_V_V_dout;
input   fifo_C_drain_local_in_V_V_empty_n;
output   fifo_C_drain_local_in_V_V_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifo_C_drain_in_V_V_read;
reg[127:0] fifo_C_drain_out_V_V_din;
reg fifo_C_drain_out_V_V_write;
reg fifo_C_drain_local_in_V_V_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fifo_C_drain_in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1067_reg_262;
reg    fifo_C_drain_out_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln1050_reg_281;
reg    fifo_C_drain_local_in_V_V_blk_n;
reg   [5:0] indvar_flatten30_reg_119;
reg   [5:0] indvar_flatten11_reg_130;
wire   [0:0] icmp_ln1043_fu_141_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln1043_fu_147_p2;
reg   [5:0] add_ln1043_reg_243;
wire   [0:0] icmp_ln1044_fu_153_p2;
reg   [0:0] icmp_ln1044_reg_248;
wire   [1:0] select_ln1047_fu_183_p3;
reg   [1:0] select_ln1047_reg_253;
wire   [0:0] icmp_ln879_fu_191_p2;
wire   [0:0] icmp_ln1067_fu_197_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln1067_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] c3_V_fu_209_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] select_ln1044_fu_220_p3;
wire   [0:0] icmp_ln1050_fu_227_p2;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] add_ln1050_fu_233_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg   [5:0] indvar_flatten49_reg_85;
reg    ap_block_state1;
reg   [4:0] indvar_flatten37_reg_96;
reg   [1:0] p_026_0_reg_108;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln1047_fu_165_p2;
wire   [0:0] xor_ln1044_fu_159_p2;
wire   [0:0] and_ln1044_fu_171_p2;
wire   [0:0] or_ln1047_fu_177_p2;
wire   [4:0] add_ln1044_fu_214_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1043_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln1043_fu_141_p2 == 1'd0) & (icmp_ln879_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln1043_fu_141_p2 == 1'd0) & (icmp_ln879_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln1043_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln879_fu_191_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln1043_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln879_fu_191_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1043_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln879_fu_191_p2 == 1'd1))) begin
        indvar_flatten11_reg_130 <= 6'd0;
    end else if (((icmp_ln1050_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten11_reg_130 <= add_ln1050_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1043_fu_141_p2 == 1'd0) & (icmp_ln879_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten30_reg_119 <= 6'd0;
    end else if (((icmp_ln1067_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten30_reg_119 <= add_ln1067_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten37_reg_96 <= select_ln1044_fu_220_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten37_reg_96 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten49_reg_85 <= add_ln1043_reg_243;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten49_reg_85 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_026_0_reg_108 <= c3_V_fu_209_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_026_0_reg_108 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1043_reg_243 <= add_ln1043_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1043_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln1044_reg_248 <= icmp_ln1044_fu_153_p2;
        select_ln1047_reg_253 <= select_ln1047_fu_183_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln1050_reg_281 <= icmp_ln1050_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1067_reg_262 <= icmp_ln1067_fu_197_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1067_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1050_fu_227_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1043_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1067_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_in_V_V_blk_n = fifo_C_drain_in_V_V_empty_n;
    end else begin
        fifo_C_drain_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1067_reg_262 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_C_drain_in_V_V_read = 1'b1;
    end else begin
        fifo_C_drain_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln1050_reg_281 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fifo_C_drain_local_in_V_V_blk_n = fifo_C_drain_local_in_V_V_empty_n;
    end else begin
        fifo_C_drain_local_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1050_reg_281 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        fifo_C_drain_local_in_V_V_read = 1'b1;
    end else begin
        fifo_C_drain_local_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (icmp_ln1050_reg_281 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln1067_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fifo_C_drain_out_V_V_blk_n = fifo_C_drain_out_V_V_full_n;
    end else begin
        fifo_C_drain_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1050_reg_281 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fifo_C_drain_out_V_V_din = fifo_C_drain_local_in_V_V_dout;
    end else if (((icmp_ln1067_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_C_drain_out_V_V_din = fifo_C_drain_in_V_V_dout;
    end else begin
        fifo_C_drain_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1050_reg_281 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln1067_reg_262 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        fifo_C_drain_out_V_V_write = 1'b1;
    end else begin
        fifo_C_drain_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1043_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1043_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln1043_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln879_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1067_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1067_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln1050_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln1050_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1043_fu_147_p2 = (indvar_flatten49_reg_85 + 6'd1);

assign add_ln1044_fu_214_p2 = (indvar_flatten37_reg_96 + 5'd1);

assign add_ln1050_fu_233_p2 = (indvar_flatten11_reg_130 + 6'd1);

assign add_ln1067_fu_203_p2 = (indvar_flatten30_reg_119 + 6'd1);

assign and_ln1044_fu_171_p2 = (xor_ln1044_fu_159_p2 & icmp_ln1047_fu_165_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)) | ((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)) | ((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)) | ((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_in_V_V_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)) | ((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)) | ((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)) | ((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)) | ((icmp_ln1067_reg_262 == 1'd0) & (fifo_C_drain_in_V_V_empty_n == 1'b0)));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = (((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_local_in_V_V_empty_n == 1'b0)) | ((icmp_ln1050_reg_281 == 1'd0) & (fifo_C_drain_out_V_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign c3_V_fu_209_p2 = (select_ln1047_reg_253 + 2'd1);

assign icmp_ln1043_fu_141_p2 = ((indvar_flatten49_reg_85 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln1044_fu_153_p2 = ((indvar_flatten37_reg_96 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln1047_fu_165_p2 = ((p_026_0_reg_108 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1050_fu_227_p2 = ((indvar_flatten11_reg_130 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln1067_fu_197_p2 = ((indvar_flatten30_reg_119 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_191_p2 = ((select_ln1047_fu_183_p3 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln1047_fu_177_p2 = (icmp_ln1044_fu_153_p2 | and_ln1044_fu_171_p2);

assign select_ln1044_fu_220_p3 = ((icmp_ln1044_reg_248[0:0] === 1'b1) ? 5'd1 : add_ln1044_fu_214_p2);

assign select_ln1047_fu_183_p3 = ((or_ln1047_fu_177_p2[0:0] === 1'b1) ? 2'd0 : p_026_0_reg_108);

assign start_out = real_start;

assign xor_ln1044_fu_159_p2 = (icmp_ln1044_fu_153_p2 ^ 1'd1);

endmodule //C_drain_IO_L2_out
