-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sa_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sa_pe_li_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_pe_li_ce0 : OUT STD_LOGIC;
    sa_pe_li_we0 : OUT STD_LOGIC;
    sa_pe_li_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_li_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_tw_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_pe_tw_ce0 : OUT STD_LOGIC;
    sa_pe_tw_we0 : OUT STD_LOGIC;
    sa_pe_tw_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_tw_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_ri_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_pe_ri_ce0 : OUT STD_LOGIC;
    sa_pe_ri_we0 : OUT STD_LOGIC;
    sa_pe_ri_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_ri_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_bw_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_pe_bw_ce0 : OUT STD_LOGIC;
    sa_pe_bw_we0 : OUT STD_LOGIC;
    sa_pe_bw_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_bw_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_ba_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_pe_ba_ce0 : OUT STD_LOGIC;
    sa_pe_ba_we0 : OUT STD_LOGIC;
    sa_pe_ba_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sa_pe_ba_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_buffer_a_li_ready_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_a_li_ready_ce0 : OUT STD_LOGIC;
    sa_buffer_a_li_ready_we0 : OUT STD_LOGIC;
    sa_buffer_a_li_ready_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_a_li_ready_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_a_li_value_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_a_li_value_ce0 : OUT STD_LOGIC;
    sa_buffer_a_li_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_buffer_b_tw_ready_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_b_tw_ready_ce0 : OUT STD_LOGIC;
    sa_buffer_b_tw_ready_we0 : OUT STD_LOGIC;
    sa_buffer_b_tw_ready_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_b_tw_ready_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_b_tw_value_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sa_buffer_b_tw_value_ce0 : OUT STD_LOGIC;
    sa_buffer_b_tw_value_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sa_ba_sa_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sa_ba_sa_ce0 : OUT STD_LOGIC;
    sa_ba_sa_we0 : OUT STD_LOGIC;
    sa_ba_sa_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sa_compute is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sa_compute,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=177,HLS_SYN_LUT=624,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln35_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_378_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_636 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln43_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_395_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_653 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_fu_412_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_669 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln51_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_443_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_682 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln58_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_687 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln57_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_460_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_6_reg_701 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_1_fu_466_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_706 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln63_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_fu_499_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln71_reg_719 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln71_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_527_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_7_reg_732 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln78_fu_541_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln78_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln77_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_551_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_745 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln79_1_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln78_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sa_pe_ba_addr_reg_767 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sa_pe_li_load_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal sa_pe_tw_load_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_8_fu_588_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_8_reg_790 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln85_fu_602_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln85_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln84_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_6_reg_803 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln86_1_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_1_reg_808 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln85_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_reg_271 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_reg_282 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_1_reg_294 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_reg_305 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_3_0_reg_316 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_4_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_339 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_5_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_361 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln36_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_484_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_424_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln65_fu_479_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln72_fu_510_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_533_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln79_fu_557_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln79_fu_561_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_594_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln86_fu_618_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln86_fu_622_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sa_buffer_a_li_ready_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_260 <= i_reg_636;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_389_p2 = ap_const_lv1_1))) then 
                i_1_reg_282 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_282 <= i_3_reg_669;
            end if; 
        end if;
    end process;

    i_2_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln57_fu_437_p2 = ap_const_lv1_1))) then 
                i_2_reg_305 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_305 <= i_6_reg_701;
            end if; 
        end if;
    end process;

    i_4_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln71_fu_493_p2 = ap_const_lv1_1))) then 
                i_4_reg_328 <= ap_const_lv2_0;
            elsif (((icmp_ln78_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_4_reg_328 <= i_7_reg_732;
            end if; 
        end if;
    end process;

    i_5_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_5_reg_350 <= ap_const_lv2_0;
            elsif (((icmp_ln85_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_5_reg_350 <= i_8_reg_790;
            end if; 
        end if;
    end process;

    j_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln35_fu_372_p2 = ap_const_lv1_1))) then 
                j_0_reg_271 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (sa_buffer_b_tw_ready_q0 = ap_const_lv1_1))) then 
                j_0_reg_271 <= j_reg_653;
            end if; 
        end if;
    end process;

    j_1_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln51_fu_406_p2 = ap_const_lv1_1))) then 
                j_1_reg_294 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_294 <= j_2_reg_682;
            end if; 
        end if;
    end process;

    j_3_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln63_fu_454_p2 = ap_const_lv1_1))) then 
                j_3_0_reg_316 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_3_0_reg_316 <= add_ln71_reg_719;
            end if; 
        end if;
    end process;

    j_4_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln77_fu_521_p2 = ap_const_lv1_0))) then 
                j_4_reg_339 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_4_reg_339 <= j_3_reg_745;
            end if; 
        end if;
    end process;

    j_5_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln43_reg_649 = ap_const_lv1_1) and (icmp_ln84_fu_582_p2 = ap_const_lv1_0) and (icmp_ln35_reg_632 = ap_const_lv1_1))) then 
                j_5_reg_361 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j_5_reg_361 <= j_6_reg_803;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln71_reg_719 <= add_ln71_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_669 <= i_3_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_6_reg_701 <= i_6_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_7_reg_732 <= i_7_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln43_reg_649 = ap_const_lv1_1) and (icmp_ln35_reg_632 = ap_const_lv1_1))) then
                i_8_reg_790 <= i_8_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_636 <= i_fu_378_p2;
                icmp_ln35_reg_632 <= icmp_ln35_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln43_reg_649 <= icmp_ln43_fu_389_p2;
                j_reg_653 <= j_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_2_reg_682 <= j_2_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_3_reg_745 <= j_3_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_6_reg_803 <= j_6_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                mul_ln14_reg_782 <= mul_ln14_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                sa_pe_ba_addr_reg_767 <= zext_ln79_1_reg_750(2 - 1 downto 0);
                sa_pe_li_load_reg_772 <= sa_pe_li_q0;
                sa_pe_tw_load_reg_777 <= sa_pe_tw_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln63_fu_454_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_706(2 downto 1) <= tmp_1_fu_466_p3(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln57_fu_437_p2 = ap_const_lv1_0))) then
                    zext_ln58_reg_687(1 downto 0) <= zext_ln58_fu_449_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln77_fu_521_p2 = ap_const_lv1_0))) then
                    zext_ln78_reg_737(2 downto 1) <= zext_ln78_fu_541_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln78_fu_545_p2 = ap_const_lv1_0))) then
                    zext_ln79_1_reg_750(3 downto 0) <= zext_ln79_1_fu_566_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln43_reg_649 = ap_const_lv1_1) and (icmp_ln84_fu_582_p2 = ap_const_lv1_0) and (icmp_ln35_reg_632 = ap_const_lv1_1))) then
                    zext_ln85_reg_795(2 downto 1) <= zext_ln85_fu_602_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln85_fu_606_p2 = ap_const_lv1_0))) then
                    zext_ln86_1_reg_808(3 downto 0) <= zext_ln86_1_fu_627_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln58_reg_687(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_706(0) <= '0';
    zext_ln78_reg_737(0) <= '0';
    zext_ln78_reg_737(3) <= '0';
    zext_ln79_1_reg_750(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln85_reg_795(0) <= '0';
    zext_ln85_reg_795(3) <= '0';
    zext_ln86_1_reg_808(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, sa_buffer_a_li_ready_q0, sa_buffer_b_tw_ready_q0, icmp_ln35_fu_372_p2, icmp_ln35_reg_632, ap_CS_fsm_state2, icmp_ln43_fu_389_p2, icmp_ln43_reg_649, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln51_fu_406_p2, ap_CS_fsm_state8, icmp_ln57_fu_437_p2, ap_CS_fsm_state10, icmp_ln63_fu_454_p2, ap_CS_fsm_state12, icmp_ln71_fu_493_p2, ap_CS_fsm_state14, icmp_ln77_fu_521_p2, ap_CS_fsm_state15, icmp_ln78_fu_545_p2, ap_CS_fsm_state19, icmp_ln84_fu_582_p2, ap_CS_fsm_state20, icmp_ln85_fu_606_p2, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln35_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((sa_buffer_a_li_ready_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (sa_buffer_b_tw_ready_q0 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln51_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln57_fu_437_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln63_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln71_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln77_fu_521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln78_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln35_reg_632 = ap_const_lv1_0) or ((icmp_ln84_fu_582_p2 = ap_const_lv1_1) or (icmp_ln43_reg_649 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln85_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_fu_499_p2 <= std_logic_vector(unsigned(j_3_0_reg_316) + unsigned(ap_const_lv2_1));
    add_ln79_fu_561_p2 <= std_logic_vector(unsigned(zext_ln78_reg_737) + unsigned(zext_ln79_fu_557_p1));
    add_ln86_fu_622_p2 <= std_logic_vector(unsigned(zext_ln85_reg_795) + unsigned(zext_ln86_fu_618_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(icmp_ln35_reg_632, icmp_ln43_reg_649, ap_CS_fsm_state19, icmp_ln84_fu_582_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln35_reg_632 = ap_const_lv1_0) or ((icmp_ln84_fu_582_p2 = ap_const_lv1_1) or (icmp_ln43_reg_649 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln35_reg_632, icmp_ln43_reg_649, ap_CS_fsm_state19, icmp_ln84_fu_582_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln35_reg_632 = ap_const_lv1_0) or ((icmp_ln84_fu_582_p2 = ap_const_lv1_1) or (icmp_ln43_reg_649 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_412_p2 <= std_logic_vector(unsigned(i_1_reg_282) + unsigned(ap_const_lv2_1));
    i_6_fu_460_p2 <= std_logic_vector(unsigned(i_2_reg_305) + unsigned(ap_const_lv2_1));
    i_7_fu_527_p2 <= std_logic_vector(unsigned(i_4_reg_328) + unsigned(ap_const_lv2_1));
    i_8_fu_588_p2 <= std_logic_vector(unsigned(i_5_reg_350) + unsigned(ap_const_lv2_1));
    i_fu_378_p2 <= std_logic_vector(unsigned(i_0_reg_260) + unsigned(ap_const_lv2_1));
    icmp_ln35_fu_372_p2 <= "1" when (i_0_reg_260 = ap_const_lv2_2) else "0";
    icmp_ln43_fu_389_p2 <= "1" when (j_0_reg_271 = ap_const_lv2_2) else "0";
    icmp_ln51_fu_406_p2 <= "1" when (i_1_reg_282 = ap_const_lv2_2) else "0";
    icmp_ln57_fu_437_p2 <= "1" when (j_1_reg_294 = ap_const_lv2_2) else "0";
    icmp_ln63_fu_454_p2 <= "1" when (i_2_reg_305 = ap_const_lv2_2) else "0";
    icmp_ln71_fu_493_p2 <= "1" when (j_3_0_reg_316 = ap_const_lv2_2) else "0";
    icmp_ln77_fu_521_p2 <= "1" when (i_4_reg_328 = ap_const_lv2_2) else "0";
    icmp_ln78_fu_545_p2 <= "1" when (j_4_reg_339 = ap_const_lv2_2) else "0";
    icmp_ln84_fu_582_p2 <= "1" when (i_5_reg_350 = ap_const_lv2_2) else "0";
    icmp_ln85_fu_606_p2 <= "1" when (j_5_reg_361 = ap_const_lv2_2) else "0";
    j_2_fu_443_p2 <= std_logic_vector(unsigned(j_1_reg_294) + unsigned(ap_const_lv2_1));
    j_3_fu_551_p2 <= std_logic_vector(unsigned(j_4_reg_339) + unsigned(ap_const_lv2_1));
    j_6_fu_612_p2 <= std_logic_vector(unsigned(j_5_reg_361) + unsigned(ap_const_lv2_1));
    j_fu_395_p2 <= std_logic_vector(unsigned(j_0_reg_271) + unsigned(ap_const_lv2_1));
    mul_ln14_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sa_pe_tw_load_reg_777) * signed(sa_pe_li_load_reg_772))), 32));
    or_ln65_fu_479_p2 <= (tmp_1_reg_706 or ap_const_lv3_1);
    sa_ba_sa_address0 <= zext_ln86_1_reg_808(2 - 1 downto 0);

    sa_ba_sa_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sa_ba_sa_ce0 <= ap_const_logic_1;
        else 
            sa_ba_sa_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_ba_sa_d0 <= sa_pe_ba_q0;

    sa_ba_sa_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sa_ba_sa_we0 <= ap_const_logic_1;
        else 
            sa_ba_sa_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_buffer_a_li_ready_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln36_fu_384_p1, zext_ln52_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sa_buffer_a_li_ready_address0 <= zext_ln52_fu_418_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sa_buffer_a_li_ready_address0 <= zext_ln36_fu_384_p1(1 - 1 downto 0);
        else 
            sa_buffer_a_li_ready_address0 <= "X";
        end if; 
    end process;


    sa_buffer_a_li_ready_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sa_buffer_a_li_ready_ce0 <= ap_const_logic_1;
        else 
            sa_buffer_a_li_ready_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_buffer_a_li_ready_d0 <= ap_const_lv1_0;

    sa_buffer_a_li_ready_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln51_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln51_fu_406_p2 = ap_const_lv1_0))) then 
            sa_buffer_a_li_ready_we0 <= ap_const_logic_1;
        else 
            sa_buffer_a_li_ready_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_buffer_a_li_value_address0 <= zext_ln52_fu_418_p1(1 - 1 downto 0);

    sa_buffer_a_li_value_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sa_buffer_a_li_value_ce0 <= ap_const_logic_1;
        else 
            sa_buffer_a_li_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_buffer_b_tw_ready_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln58_reg_687, ap_CS_fsm_state9, zext_ln44_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sa_buffer_b_tw_ready_address0 <= zext_ln58_reg_687(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sa_buffer_b_tw_ready_address0 <= zext_ln44_fu_401_p1(1 - 1 downto 0);
        else 
            sa_buffer_b_tw_ready_address0 <= "X";
        end if; 
    end process;


    sa_buffer_b_tw_ready_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sa_buffer_b_tw_ready_ce0 <= ap_const_logic_1;
        else 
            sa_buffer_b_tw_ready_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_buffer_b_tw_ready_d0 <= ap_const_lv1_0;

    sa_buffer_b_tw_ready_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sa_buffer_b_tw_ready_we0 <= ap_const_logic_1;
        else 
            sa_buffer_b_tw_ready_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_buffer_b_tw_value_address0 <= zext_ln58_fu_449_p1(1 - 1 downto 0);

    sa_buffer_b_tw_value_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sa_buffer_b_tw_value_ce0 <= ap_const_logic_1;
        else 
            sa_buffer_b_tw_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_ba_address0_assign_proc : process(sa_pe_ba_addr_reg_767, ap_CS_fsm_state17, ap_CS_fsm_state20, zext_ln86_1_fu_627_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sa_pe_ba_address0 <= zext_ln86_1_fu_627_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            sa_pe_ba_address0 <= sa_pe_ba_addr_reg_767;
        else 
            sa_pe_ba_address0 <= "XX";
        end if; 
    end process;


    sa_pe_ba_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            sa_pe_ba_ce0 <= ap_const_logic_1;
        else 
            sa_pe_ba_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_pe_ba_d0 <= std_logic_vector(unsigned(mul_ln14_reg_782) + unsigned(sa_pe_ba_q0));

    sa_pe_ba_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sa_pe_ba_we0 <= ap_const_logic_1;
        else 
            sa_pe_ba_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_bw_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln79_1_reg_750, ap_CS_fsm_state16, zext_ln72_fu_505_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sa_pe_bw_address0 <= zext_ln79_1_reg_750(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sa_pe_bw_address0 <= zext_ln72_fu_505_p1(2 - 1 downto 0);
        else 
            sa_pe_bw_address0 <= "XX";
        end if; 
    end process;


    sa_pe_bw_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sa_pe_bw_ce0 <= ap_const_logic_1;
        else 
            sa_pe_bw_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_pe_bw_d0 <= sa_pe_tw_q0;

    sa_pe_bw_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sa_pe_bw_we0 <= ap_const_logic_1;
        else 
            sa_pe_bw_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_li_address0_assign_proc : process(ap_CS_fsm_state15, zext_ln79_1_fu_566_p1, ap_CS_fsm_state7, ap_CS_fsm_state11, zext_ln52_1_fu_432_p1, tmp_2_fu_484_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sa_pe_li_address0 <= zext_ln79_1_fu_566_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sa_pe_li_address0 <= tmp_2_fu_484_p3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sa_pe_li_address0 <= zext_ln52_1_fu_432_p1(2 - 1 downto 0);
        else 
            sa_pe_li_address0 <= "XX";
        end if; 
    end process;


    sa_pe_li_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            sa_pe_li_ce0 <= ap_const_logic_1;
        else 
            sa_pe_li_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_li_d0_assign_proc : process(sa_pe_ri_q0, sa_buffer_a_li_value_q0, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sa_pe_li_d0 <= sa_pe_ri_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sa_pe_li_d0 <= sa_buffer_a_li_value_q0;
        else 
            sa_pe_li_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sa_pe_li_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sa_pe_li_we0 <= ap_const_logic_1;
        else 
            sa_pe_li_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_ri_address0_assign_proc : process(ap_CS_fsm_state10, zext_ln79_1_reg_750, ap_CS_fsm_state16, zext_ln65_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sa_pe_ri_address0 <= zext_ln79_1_reg_750(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sa_pe_ri_address0 <= zext_ln65_fu_474_p1(2 - 1 downto 0);
        else 
            sa_pe_ri_address0 <= "XX";
        end if; 
    end process;


    sa_pe_ri_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sa_pe_ri_ce0 <= ap_const_logic_1;
        else 
            sa_pe_ri_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sa_pe_ri_d0 <= sa_pe_li_q0;

    sa_pe_ri_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sa_pe_ri_we0 <= ap_const_logic_1;
        else 
            sa_pe_ri_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_tw_address0_assign_proc : process(zext_ln58_reg_687, ap_CS_fsm_state15, zext_ln79_1_fu_566_p1, ap_CS_fsm_state9, ap_CS_fsm_state13, zext_ln72_1_fu_516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sa_pe_tw_address0 <= zext_ln79_1_fu_566_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sa_pe_tw_address0 <= zext_ln72_1_fu_516_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sa_pe_tw_address0 <= zext_ln58_reg_687(2 - 1 downto 0);
        else 
            sa_pe_tw_address0 <= "XX";
        end if; 
    end process;


    sa_pe_tw_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            sa_pe_tw_ce0 <= ap_const_logic_1;
        else 
            sa_pe_tw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sa_pe_tw_d0_assign_proc : process(sa_pe_bw_q0, sa_buffer_b_tw_value_q0, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sa_pe_tw_d0 <= sa_pe_bw_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sa_pe_tw_d0 <= sa_buffer_b_tw_value_q0;
        else 
            sa_pe_tw_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sa_pe_tw_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sa_pe_tw_we0 <= ap_const_logic_1;
        else 
            sa_pe_tw_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_466_p3 <= (i_2_reg_305 & ap_const_lv1_0);
    tmp_2_fu_484_p3 <= (ap_const_lv61_0 & or_ln65_fu_479_p2);
    tmp_3_fu_533_p3 <= (i_4_reg_328 & ap_const_lv1_0);
    tmp_4_fu_594_p3 <= (i_5_reg_350 & ap_const_lv1_0);
    tmp_fu_424_p3 <= (i_1_reg_282 & ap_const_lv1_0);
    xor_ln72_fu_510_p2 <= (j_3_0_reg_316 xor ap_const_lv2_2);
    zext_ln36_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_260),64));
    zext_ln44_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_271),64));
    zext_ln52_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_424_p3),64));
    zext_ln52_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_282),64));
    zext_ln58_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_294),64));
    zext_ln65_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_466_p3),64));
    zext_ln72_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln72_fu_510_p2),64));
    zext_ln72_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_0_reg_316),64));
    zext_ln78_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_533_p3),4));
    zext_ln79_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_561_p2),64));
    zext_ln79_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_339),4));
    zext_ln85_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_594_p3),4));
    zext_ln86_1_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_622_p2),64));
    zext_ln86_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_361),4));
end behav;
