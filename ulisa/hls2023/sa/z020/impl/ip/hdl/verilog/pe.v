// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pe_pe,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.426000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=88,HLS_SYN_LUT=210,HLS_VERSION=2023_2}" *)

module pe (
        ap_clk,
        ap_rst_n,
        SLI_AXIS_TDATA,
        SLI_AXIS_TVALID,
        SLI_AXIS_TREADY,
        SLI_AXIS_TKEEP,
        SLI_AXIS_TSTRB,
        SLI_AXIS_TUSER,
        SLI_AXIS_TLAST,
        SLI_AXIS_TID,
        SLI_AXIS_TDEST,
        MRI_AXIS_TDATA,
        MRI_AXIS_TVALID,
        MRI_AXIS_TREADY,
        MRI_AXIS_TKEEP,
        MRI_AXIS_TSTRB,
        MRI_AXIS_TUSER,
        MRI_AXIS_TLAST,
        MRI_AXIS_TID,
        MRI_AXIS_TDEST,
        STW_AXIS_TDATA,
        STW_AXIS_TVALID,
        STW_AXIS_TREADY,
        STW_AXIS_TKEEP,
        STW_AXIS_TSTRB,
        STW_AXIS_TUSER,
        STW_AXIS_TLAST,
        STW_AXIS_TID,
        STW_AXIS_TDEST,
        MBW_AXIS_TDATA,
        MBW_AXIS_TVALID,
        MBW_AXIS_TREADY,
        MBW_AXIS_TKEEP,
        MBW_AXIS_TSTRB,
        MBW_AXIS_TUSER,
        MBW_AXIS_TLAST,
        MBW_AXIS_TID,
        MBW_AXIS_TDEST,
        STA_AXIS_TDATA,
        STA_AXIS_TVALID,
        STA_AXIS_TREADY,
        STA_AXIS_TKEEP,
        STA_AXIS_TSTRB,
        STA_AXIS_TUSER,
        STA_AXIS_TLAST,
        STA_AXIS_TID,
        STA_AXIS_TDEST,
        MBA_AXIS_TDATA,
        MBA_AXIS_TVALID,
        MBA_AXIS_TREADY,
        MBA_AXIS_TKEEP,
        MBA_AXIS_TSTRB,
        MBA_AXIS_TUSER,
        MBA_AXIS_TLAST,
        MBA_AXIS_TID,
        MBA_AXIS_TDEST,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] SLI_AXIS_TDATA;
input   SLI_AXIS_TVALID;
output   SLI_AXIS_TREADY;
input  [0:0] SLI_AXIS_TKEEP;
input  [0:0] SLI_AXIS_TSTRB;
input  [3:0] SLI_AXIS_TUSER;
input  [0:0] SLI_AXIS_TLAST;
input  [4:0] SLI_AXIS_TID;
input  [4:0] SLI_AXIS_TDEST;
output  [7:0] MRI_AXIS_TDATA;
output   MRI_AXIS_TVALID;
input   MRI_AXIS_TREADY;
output  [0:0] MRI_AXIS_TKEEP;
output  [0:0] MRI_AXIS_TSTRB;
output  [3:0] MRI_AXIS_TUSER;
output  [0:0] MRI_AXIS_TLAST;
output  [4:0] MRI_AXIS_TID;
output  [4:0] MRI_AXIS_TDEST;
input  [7:0] STW_AXIS_TDATA;
input   STW_AXIS_TVALID;
output   STW_AXIS_TREADY;
input  [0:0] STW_AXIS_TKEEP;
input  [0:0] STW_AXIS_TSTRB;
input  [3:0] STW_AXIS_TUSER;
input  [0:0] STW_AXIS_TLAST;
input  [4:0] STW_AXIS_TID;
input  [4:0] STW_AXIS_TDEST;
output  [7:0] MBW_AXIS_TDATA;
output   MBW_AXIS_TVALID;
input   MBW_AXIS_TREADY;
output  [0:0] MBW_AXIS_TKEEP;
output  [0:0] MBW_AXIS_TSTRB;
output  [3:0] MBW_AXIS_TUSER;
output  [0:0] MBW_AXIS_TLAST;
output  [4:0] MBW_AXIS_TID;
output  [4:0] MBW_AXIS_TDEST;
input  [15:0] STA_AXIS_TDATA;
input   STA_AXIS_TVALID;
output   STA_AXIS_TREADY;
input  [1:0] STA_AXIS_TKEEP;
input  [1:0] STA_AXIS_TSTRB;
input  [3:0] STA_AXIS_TUSER;
input  [0:0] STA_AXIS_TLAST;
input  [4:0] STA_AXIS_TID;
input  [4:0] STA_AXIS_TDEST;
output  [15:0] MBA_AXIS_TDATA;
output   MBA_AXIS_TVALID;
input   MBA_AXIS_TREADY;
output  [1:0] MBA_AXIS_TKEEP;
output  [1:0] MBA_AXIS_TSTRB;
output  [3:0] MBA_AXIS_TUSER;
output  [0:0] MBA_AXIS_TLAST;
output  [4:0] MBA_AXIS_TID;
output  [4:0] MBA_AXIS_TDEST;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    SLI_AXIS_TDATA_blk_n;
reg    MRI_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    STW_AXIS_TDATA_blk_n;
reg    MBW_AXIS_TDATA_blk_n;
reg    STA_AXIS_TDATA_blk_n;
reg    MBA_AXIS_TDATA_blk_n;
reg   [7:0] aValue_mat_data_reg_330;
reg   [7:0] aValue_mat_data_1_reg_336;
reg   [15:0] empty_15_reg_342_0;
wire   [15:0] prod_iw_fu_315_p2;
reg   [15:0] prod_iw_reg_347;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg    ap_block_state3;
reg    ap_block_state3_io;
wire    regslice_both_MRI_AXIS_V_data_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_data_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_data_V_U_apdone_blk;
reg    ap_block_state4;
reg    ap_block_state4_io;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_SLI_AXIS_V_data_V_U_apdone_blk;
wire   [7:0] SLI_AXIS_TDATA_int_regslice;
wire    SLI_AXIS_TVALID_int_regslice;
reg    SLI_AXIS_TREADY_int_regslice;
wire    regslice_both_SLI_AXIS_V_data_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_keep_V_U_apdone_blk;
wire   [0:0] SLI_AXIS_TKEEP_int_regslice;
wire    regslice_both_SLI_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_keep_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_strb_V_U_apdone_blk;
wire   [0:0] SLI_AXIS_TSTRB_int_regslice;
wire    regslice_both_SLI_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_strb_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_user_V_U_apdone_blk;
wire   [3:0] SLI_AXIS_TUSER_int_regslice;
wire    regslice_both_SLI_AXIS_V_user_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_user_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_last_V_U_apdone_blk;
wire   [0:0] SLI_AXIS_TLAST_int_regslice;
wire    regslice_both_SLI_AXIS_V_last_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_last_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_id_V_U_apdone_blk;
wire   [4:0] SLI_AXIS_TID_int_regslice;
wire    regslice_both_SLI_AXIS_V_id_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_id_V_U_ack_in;
wire    regslice_both_SLI_AXIS_V_dest_V_U_apdone_blk;
wire   [4:0] SLI_AXIS_TDEST_int_regslice;
wire    regslice_both_SLI_AXIS_V_dest_V_U_vld_out;
wire    regslice_both_SLI_AXIS_V_dest_V_U_ack_in;
reg    MRI_AXIS_TVALID_int_regslice;
wire    MRI_AXIS_TREADY_int_regslice;
wire    regslice_both_MRI_AXIS_V_data_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_keep_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_keep_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_strb_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_strb_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_user_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_user_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_user_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_last_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_last_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_last_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_id_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_id_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_id_V_U_vld_out;
wire    regslice_both_MRI_AXIS_V_dest_V_U_apdone_blk;
wire    regslice_both_MRI_AXIS_V_dest_V_U_ack_in_dummy;
wire    regslice_both_MRI_AXIS_V_dest_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_data_V_U_apdone_blk;
wire   [7:0] STW_AXIS_TDATA_int_regslice;
wire    STW_AXIS_TVALID_int_regslice;
reg    STW_AXIS_TREADY_int_regslice;
wire    regslice_both_STW_AXIS_V_data_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_keep_V_U_apdone_blk;
wire   [0:0] STW_AXIS_TKEEP_int_regslice;
wire    regslice_both_STW_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_keep_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_strb_V_U_apdone_blk;
wire   [0:0] STW_AXIS_TSTRB_int_regslice;
wire    regslice_both_STW_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_strb_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_user_V_U_apdone_blk;
wire   [3:0] STW_AXIS_TUSER_int_regslice;
wire    regslice_both_STW_AXIS_V_user_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_user_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_last_V_U_apdone_blk;
wire   [0:0] STW_AXIS_TLAST_int_regslice;
wire    regslice_both_STW_AXIS_V_last_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_last_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_id_V_U_apdone_blk;
wire   [4:0] STW_AXIS_TID_int_regslice;
wire    regslice_both_STW_AXIS_V_id_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_id_V_U_ack_in;
wire    regslice_both_STW_AXIS_V_dest_V_U_apdone_blk;
wire   [4:0] STW_AXIS_TDEST_int_regslice;
wire    regslice_both_STW_AXIS_V_dest_V_U_vld_out;
wire    regslice_both_STW_AXIS_V_dest_V_U_ack_in;
reg    MBW_AXIS_TVALID_int_regslice;
wire    MBW_AXIS_TREADY_int_regslice;
wire    regslice_both_MBW_AXIS_V_data_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_keep_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_keep_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_strb_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_strb_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_user_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_user_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_user_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_last_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_last_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_last_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_id_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_id_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_id_V_U_vld_out;
wire    regslice_both_MBW_AXIS_V_dest_V_U_apdone_blk;
wire    regslice_both_MBW_AXIS_V_dest_V_U_ack_in_dummy;
wire    regslice_both_MBW_AXIS_V_dest_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_data_V_U_apdone_blk;
wire   [15:0] STA_AXIS_TDATA_int_regslice;
wire    STA_AXIS_TVALID_int_regslice;
reg    STA_AXIS_TREADY_int_regslice;
wire    regslice_both_STA_AXIS_V_data_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_keep_V_U_apdone_blk;
wire   [1:0] STA_AXIS_TKEEP_int_regslice;
wire    regslice_both_STA_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_keep_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_strb_V_U_apdone_blk;
wire   [1:0] STA_AXIS_TSTRB_int_regslice;
wire    regslice_both_STA_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_strb_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_user_V_U_apdone_blk;
wire   [3:0] STA_AXIS_TUSER_int_regslice;
wire    regslice_both_STA_AXIS_V_user_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_user_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_last_V_U_apdone_blk;
wire   [0:0] STA_AXIS_TLAST_int_regslice;
wire    regslice_both_STA_AXIS_V_last_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_last_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_id_V_U_apdone_blk;
wire   [4:0] STA_AXIS_TID_int_regslice;
wire    regslice_both_STA_AXIS_V_id_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_id_V_U_ack_in;
wire    regslice_both_STA_AXIS_V_dest_V_U_apdone_blk;
wire   [4:0] STA_AXIS_TDEST_int_regslice;
wire    regslice_both_STA_AXIS_V_dest_V_U_vld_out;
wire    regslice_both_STA_AXIS_V_dest_V_U_ack_in;
wire   [15:0] MBA_AXIS_TDATA_int_regslice;
reg    MBA_AXIS_TVALID_int_regslice;
wire    MBA_AXIS_TREADY_int_regslice;
wire    regslice_both_MBA_AXIS_V_data_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_keep_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_keep_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_keep_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_strb_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_strb_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_strb_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_user_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_user_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_user_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_last_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_last_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_last_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_id_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_id_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_id_V_U_vld_out;
wire    regslice_both_MBA_AXIS_V_dest_V_U_apdone_blk;
wire    regslice_both_MBA_AXIS_V_dest_V_U_ack_in_dummy;
wire    regslice_both_MBA_AXIS_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

pe_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pe_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(aValue_mat_data_1_reg_336),
    .din1(aValue_mat_data_reg_330),
    .dout(prod_iw_fu_315_p2)
);

pe_regslice_both #(
    .DataWidth( 8 ))
regslice_both_SLI_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TDATA),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_data_V_U_ack_in),
    .data_out(SLI_AXIS_TDATA_int_regslice),
    .vld_out(SLI_AXIS_TVALID_int_regslice),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SLI_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TKEEP),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_keep_V_U_ack_in),
    .data_out(SLI_AXIS_TKEEP_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_keep_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SLI_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TSTRB),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_strb_V_U_ack_in),
    .data_out(SLI_AXIS_TSTRB_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_strb_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_SLI_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TUSER),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_user_V_U_ack_in),
    .data_out(SLI_AXIS_TUSER_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_user_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_SLI_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TLAST),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_last_V_U_ack_in),
    .data_out(SLI_AXIS_TLAST_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_last_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_SLI_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TID),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_id_V_U_ack_in),
    .data_out(SLI_AXIS_TID_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_id_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_SLI_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(SLI_AXIS_TDEST),
    .vld_in(SLI_AXIS_TVALID),
    .ack_in(regslice_both_SLI_AXIS_V_dest_V_U_ack_in),
    .data_out(SLI_AXIS_TDEST_int_regslice),
    .vld_out(regslice_both_SLI_AXIS_V_dest_V_U_vld_out),
    .ack_out(SLI_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_SLI_AXIS_V_dest_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 8 ))
regslice_both_MRI_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aValue_mat_data_reg_330),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(MRI_AXIS_TREADY_int_regslice),
    .data_out(MRI_AXIS_TDATA),
    .vld_out(regslice_both_MRI_AXIS_V_data_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MRI_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_keep_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TKEEP),
    .vld_out(regslice_both_MRI_AXIS_V_keep_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MRI_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_strb_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TSTRB),
    .vld_out(regslice_both_MRI_AXIS_V_strb_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_MRI_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_user_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TUSER),
    .vld_out(regslice_both_MRI_AXIS_V_user_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MRI_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_last_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TLAST),
    .vld_out(regslice_both_MRI_AXIS_V_last_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MRI_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_id_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TID),
    .vld_out(regslice_both_MRI_AXIS_V_id_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MRI_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MRI_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MRI_AXIS_V_dest_V_U_ack_in_dummy),
    .data_out(MRI_AXIS_TDEST),
    .vld_out(regslice_both_MRI_AXIS_V_dest_V_U_vld_out),
    .ack_out(MRI_AXIS_TREADY),
    .apdone_blk(regslice_both_MRI_AXIS_V_dest_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 8 ))
regslice_both_STW_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TDATA),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_data_V_U_ack_in),
    .data_out(STW_AXIS_TDATA_int_regslice),
    .vld_out(STW_AXIS_TVALID_int_regslice),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_STW_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TKEEP),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_keep_V_U_ack_in),
    .data_out(STW_AXIS_TKEEP_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_keep_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_STW_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TSTRB),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_strb_V_U_ack_in),
    .data_out(STW_AXIS_TSTRB_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_strb_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_STW_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TUSER),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_user_V_U_ack_in),
    .data_out(STW_AXIS_TUSER_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_user_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_STW_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TLAST),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_last_V_U_ack_in),
    .data_out(STW_AXIS_TLAST_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_last_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_STW_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TID),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_id_V_U_ack_in),
    .data_out(STW_AXIS_TID_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_id_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_STW_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STW_AXIS_TDEST),
    .vld_in(STW_AXIS_TVALID),
    .ack_in(regslice_both_STW_AXIS_V_dest_V_U_ack_in),
    .data_out(STW_AXIS_TDEST_int_regslice),
    .vld_out(regslice_both_STW_AXIS_V_dest_V_U_vld_out),
    .ack_out(STW_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STW_AXIS_V_dest_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 8 ))
regslice_both_MBW_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aValue_mat_data_1_reg_336),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(MBW_AXIS_TREADY_int_regslice),
    .data_out(MBW_AXIS_TDATA),
    .vld_out(regslice_both_MBW_AXIS_V_data_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MBW_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_keep_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TKEEP),
    .vld_out(regslice_both_MBW_AXIS_V_keep_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MBW_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_strb_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TSTRB),
    .vld_out(regslice_both_MBW_AXIS_V_strb_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_MBW_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_user_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TUSER),
    .vld_out(regslice_both_MBW_AXIS_V_user_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MBW_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_last_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TLAST),
    .vld_out(regslice_both_MBW_AXIS_V_last_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MBW_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_id_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TID),
    .vld_out(regslice_both_MBW_AXIS_V_id_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MBW_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MBW_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBW_AXIS_V_dest_V_U_ack_in_dummy),
    .data_out(MBW_AXIS_TDEST),
    .vld_out(regslice_both_MBW_AXIS_V_dest_V_U_vld_out),
    .ack_out(MBW_AXIS_TREADY),
    .apdone_blk(regslice_both_MBW_AXIS_V_dest_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 16 ))
regslice_both_STA_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TDATA),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_data_V_U_ack_in),
    .data_out(STA_AXIS_TDATA_int_regslice),
    .vld_out(STA_AXIS_TVALID_int_regslice),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 2 ))
regslice_both_STA_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TKEEP),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_keep_V_U_ack_in),
    .data_out(STA_AXIS_TKEEP_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_keep_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 2 ))
regslice_both_STA_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TSTRB),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_strb_V_U_ack_in),
    .data_out(STA_AXIS_TSTRB_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_strb_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_STA_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TUSER),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_user_V_U_ack_in),
    .data_out(STA_AXIS_TUSER_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_user_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_STA_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TLAST),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_last_V_U_ack_in),
    .data_out(STA_AXIS_TLAST_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_last_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_STA_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TID),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_id_V_U_ack_in),
    .data_out(STA_AXIS_TID_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_id_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_STA_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(STA_AXIS_TDEST),
    .vld_in(STA_AXIS_TVALID),
    .ack_in(regslice_both_STA_AXIS_V_dest_V_U_ack_in),
    .data_out(STA_AXIS_TDEST_int_regslice),
    .vld_out(regslice_both_STA_AXIS_V_dest_V_U_vld_out),
    .ack_out(STA_AXIS_TREADY_int_regslice),
    .apdone_blk(regslice_both_STA_AXIS_V_dest_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 16 ))
regslice_both_MBA_AXIS_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(MBA_AXIS_TDATA_int_regslice),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(MBA_AXIS_TREADY_int_regslice),
    .data_out(MBA_AXIS_TDATA),
    .vld_out(regslice_both_MBA_AXIS_V_data_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_data_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 2 ))
regslice_both_MBA_AXIS_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd3),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_keep_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TKEEP),
    .vld_out(regslice_both_MBA_AXIS_V_keep_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_keep_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 2 ))
regslice_both_MBA_AXIS_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd3),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_strb_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TSTRB),
    .vld_out(regslice_both_MBA_AXIS_V_strb_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_strb_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 4 ))
regslice_both_MBA_AXIS_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_user_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TUSER),
    .vld_out(regslice_both_MBA_AXIS_V_user_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_user_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 1 ))
regslice_both_MBA_AXIS_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_last_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TLAST),
    .vld_out(regslice_both_MBA_AXIS_V_last_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_last_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MBA_AXIS_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_id_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TID),
    .vld_out(regslice_both_MBA_AXIS_V_id_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_id_V_U_apdone_blk)
);

pe_regslice_both #(
    .DataWidth( 5 ))
regslice_both_MBA_AXIS_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(MBA_AXIS_TVALID_int_regslice),
    .ack_in(regslice_both_MBA_AXIS_V_dest_V_U_ack_in_dummy),
    .data_out(MBA_AXIS_TDEST),
    .vld_out(regslice_both_MBA_AXIS_V_dest_V_U_vld_out),
    .ack_out(MBA_AXIS_TREADY),
    .apdone_blk(regslice_both_MBA_AXIS_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        aValue_mat_data_1_reg_336 <= STW_AXIS_TDATA_int_regslice;
        aValue_mat_data_reg_330 <= SLI_AXIS_TDATA_int_regslice;
        empty_15_reg_342_0 <= STA_AXIS_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        prod_iw_reg_347 <= prod_iw_fu_315_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        MBA_AXIS_TDATA_blk_n = MBA_AXIS_TREADY_int_regslice;
    end else begin
        MBA_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
        MBA_AXIS_TVALID_int_regslice = 1'b1;
    end else begin
        MBA_AXIS_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        MBW_AXIS_TDATA_blk_n = MBW_AXIS_TREADY_int_regslice;
    end else begin
        MBW_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
        MBW_AXIS_TVALID_int_regslice = 1'b1;
    end else begin
        MBW_AXIS_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        MRI_AXIS_TDATA_blk_n = MRI_AXIS_TREADY_int_regslice;
    end else begin
        MRI_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
        MRI_AXIS_TVALID_int_regslice = 1'b1;
    end else begin
        MRI_AXIS_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        SLI_AXIS_TDATA_blk_n = SLI_AXIS_TVALID_int_regslice;
    end else begin
        SLI_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        SLI_AXIS_TREADY_int_regslice = 1'b1;
    end else begin
        SLI_AXIS_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        STA_AXIS_TDATA_blk_n = STA_AXIS_TVALID_int_regslice;
    end else begin
        STA_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        STA_AXIS_TREADY_int_regslice = 1'b1;
    end else begin
        STA_AXIS_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        STW_AXIS_TDATA_blk_n = STW_AXIS_TVALID_int_regslice;
    end else begin
        STW_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        STW_AXIS_TREADY_int_regslice = 1'b1;
    end else begin
        STW_AXIS_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MBA_AXIS_TDATA_int_regslice = (empty_15_reg_342_0 + prod_iw_reg_347);

assign MBA_AXIS_TVALID = regslice_both_MBA_AXIS_V_data_V_U_vld_out;

assign MBW_AXIS_TVALID = regslice_both_MBW_AXIS_V_data_V_U_vld_out;

assign MRI_AXIS_TVALID = regslice_both_MRI_AXIS_V_data_V_U_vld_out;

assign SLI_AXIS_TREADY = regslice_both_SLI_AXIS_V_data_V_U_ack_in;

assign STA_AXIS_TREADY = regslice_both_STA_AXIS_V_data_V_U_ack_in;

assign STW_AXIS_TREADY = regslice_both_STW_AXIS_V_data_V_U_ack_in;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == STA_AXIS_TVALID_int_regslice) | (1'b0 == STW_AXIS_TVALID_int_regslice) | (1'b0 == SLI_AXIS_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == MBA_AXIS_TREADY_int_regslice) | (1'b0 == MBW_AXIS_TREADY_int_regslice) | (1'b0 == MRI_AXIS_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == MBA_AXIS_TREADY_int_regslice) | (1'b0 == MBW_AXIS_TREADY_int_regslice) | (1'b0 == MRI_AXIS_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == MBA_AXIS_TREADY_int_regslice) | (1'b0 == MBW_AXIS_TREADY_int_regslice) | (1'b0 == MRI_AXIS_TREADY_int_regslice) | (regslice_both_MBA_AXIS_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_MBW_AXIS_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_MRI_AXIS_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == MBA_AXIS_TREADY_int_regslice) | (1'b0 == MBW_AXIS_TREADY_int_regslice) | (1'b0 == MRI_AXIS_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "pe_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //pe

