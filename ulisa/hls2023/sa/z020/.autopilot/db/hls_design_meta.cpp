#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("SLI_AXIS_TDATA", 8, hls_in, 0, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TVALID", 1, hls_in, 6, "axis", "in_vld", 1),
	Port_Property("SLI_AXIS_TREADY", 1, hls_out, 6, "axis", "in_acc", 1),
	Port_Property("SLI_AXIS_TKEEP", 1, hls_in, 1, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TSTRB", 1, hls_in, 2, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TUSER", 4, hls_in, 3, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TLAST", 1, hls_in, 4, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TID", 5, hls_in, 5, "axis", "in_data", 1),
	Port_Property("SLI_AXIS_TDEST", 5, hls_in, 6, "axis", "in_data", 1),
	Port_Property("MRI_AXIS_TDATA", 8, hls_out, 7, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TVALID", 1, hls_out, 13, "axis", "out_vld", 1),
	Port_Property("MRI_AXIS_TREADY", 1, hls_in, 13, "axis", "out_acc", 1),
	Port_Property("MRI_AXIS_TKEEP", 1, hls_out, 8, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TSTRB", 1, hls_out, 9, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TUSER", 4, hls_out, 10, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TLAST", 1, hls_out, 11, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TID", 5, hls_out, 12, "axis", "out_data", 1),
	Port_Property("MRI_AXIS_TDEST", 5, hls_out, 13, "axis", "out_data", 1),
	Port_Property("STW_AXIS_TDATA", 8, hls_in, 14, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TVALID", 1, hls_in, 20, "axis", "in_vld", 1),
	Port_Property("STW_AXIS_TREADY", 1, hls_out, 20, "axis", "in_acc", 1),
	Port_Property("STW_AXIS_TKEEP", 1, hls_in, 15, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TSTRB", 1, hls_in, 16, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TUSER", 4, hls_in, 17, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TLAST", 1, hls_in, 18, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TID", 5, hls_in, 19, "axis", "in_data", 1),
	Port_Property("STW_AXIS_TDEST", 5, hls_in, 20, "axis", "in_data", 1),
	Port_Property("MBW_AXIS_TDATA", 8, hls_out, 21, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TVALID", 1, hls_out, 27, "axis", "out_vld", 1),
	Port_Property("MBW_AXIS_TREADY", 1, hls_in, 27, "axis", "out_acc", 1),
	Port_Property("MBW_AXIS_TKEEP", 1, hls_out, 22, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TSTRB", 1, hls_out, 23, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TUSER", 4, hls_out, 24, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TLAST", 1, hls_out, 25, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TID", 5, hls_out, 26, "axis", "out_data", 1),
	Port_Property("MBW_AXIS_TDEST", 5, hls_out, 27, "axis", "out_data", 1),
	Port_Property("STA_AXIS_TDATA", 16, hls_in, 28, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TVALID", 1, hls_in, 34, "axis", "in_vld", 1),
	Port_Property("STA_AXIS_TREADY", 1, hls_out, 34, "axis", "in_acc", 1),
	Port_Property("STA_AXIS_TKEEP", 2, hls_in, 29, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TSTRB", 2, hls_in, 30, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TUSER", 4, hls_in, 31, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TLAST", 1, hls_in, 32, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TID", 5, hls_in, 33, "axis", "in_data", 1),
	Port_Property("STA_AXIS_TDEST", 5, hls_in, 34, "axis", "in_data", 1),
	Port_Property("MBA_AXIS_TDATA", 16, hls_out, 35, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TVALID", 1, hls_out, 41, "axis", "out_vld", 1),
	Port_Property("MBA_AXIS_TREADY", 1, hls_in, 41, "axis", "out_acc", 1),
	Port_Property("MBA_AXIS_TKEEP", 2, hls_out, 36, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TSTRB", 2, hls_out, 37, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TUSER", 4, hls_out, 38, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TLAST", 1, hls_out, 39, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TID", 5, hls_out, 40, "axis", "out_data", 1),
	Port_Property("MBA_AXIS_TDEST", 5, hls_out, 41, "axis", "out_data", 1),
	Port_Property("s_axi_CONTROL_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "pe";
