-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pe is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    SLI_AXIS_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    SLI_AXIS_TVALID : IN STD_LOGIC;
    SLI_AXIS_TREADY : OUT STD_LOGIC;
    SLI_AXIS_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    SLI_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    SLI_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MRI_AXIS_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    MRI_AXIS_TVALID : OUT STD_LOGIC;
    MRI_AXIS_TREADY : IN STD_LOGIC;
    MRI_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MRI_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MRI_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    STW_AXIS_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    STW_AXIS_TVALID : IN STD_LOGIC;
    STW_AXIS_TREADY : OUT STD_LOGIC;
    STW_AXIS_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    STW_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    STW_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MBW_AXIS_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    MBW_AXIS_TVALID : OUT STD_LOGIC;
    MBW_AXIS_TREADY : IN STD_LOGIC;
    MBW_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MBW_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MBW_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    STA_AXIS_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    STA_AXIS_TVALID : IN STD_LOGIC;
    STA_AXIS_TREADY : OUT STD_LOGIC;
    STA_AXIS_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    STA_AXIS_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    STA_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    STA_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    STA_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    STA_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MBA_AXIS_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    MBA_AXIS_TVALID : OUT STD_LOGIC;
    MBA_AXIS_TREADY : IN STD_LOGIC;
    MBA_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    MBA_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    MBA_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MBA_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBA_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MBA_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pe is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pe_pe,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.426000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=88,HLS_SYN_LUT=210,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal SLI_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MRI_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal STW_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MBW_AXIS_TDATA_blk_n : STD_LOGIC;
    signal STA_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MBA_AXIS_TDATA_blk_n : STD_LOGIC;
    signal aValue_mat_data_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal aValue_mat_data_1_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_15_reg_342_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal prod_iw_fu_315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal prod_iw_reg_347 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal regslice_both_MRI_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal SLI_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal SLI_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SLI_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SLI_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TUSER_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_SLI_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_SLI_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_SLI_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal SLI_AXIS_TDEST_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_SLI_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_SLI_AXIS_V_dest_V_U_ack_in : STD_LOGIC;
    signal MRI_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal MRI_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MRI_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal STW_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal STW_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_STW_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_STW_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TUSER_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_STW_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_STW_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_STW_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal STW_AXIS_TDEST_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_STW_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STW_AXIS_V_dest_V_U_ack_in : STD_LOGIC;
    signal MBW_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal MBW_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBW_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_data_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal STA_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal STA_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_STA_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_STA_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TUSER_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_STA_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_STA_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_STA_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal STA_AXIS_TDEST_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_STA_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STA_AXIS_V_dest_V_U_ack_in : STD_LOGIC;
    signal MBA_AXIS_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal MBA_AXIS_TVALID_int_regslice : STD_LOGIC;
    signal MBA_AXIS_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_MBA_AXIS_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pe_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pe_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pe_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    CONTROL_s_axi_U : component pe_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_8s_8s_16_1_1_U1 : component pe_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => aValue_mat_data_1_reg_336,
        din1 => aValue_mat_data_reg_330,
        dout => prod_iw_fu_315_p2);

    regslice_both_SLI_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TDATA,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_data_V_U_ack_in,
        data_out => SLI_AXIS_TDATA_int_regslice,
        vld_out => SLI_AXIS_TVALID_int_regslice,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_data_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TKEEP,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_keep_V_U_ack_in,
        data_out => SLI_AXIS_TKEEP_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_keep_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TSTRB,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_strb_V_U_ack_in,
        data_out => SLI_AXIS_TSTRB_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_strb_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TUSER,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_user_V_U_ack_in,
        data_out => SLI_AXIS_TUSER_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_user_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_user_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TLAST,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_last_V_U_ack_in,
        data_out => SLI_AXIS_TLAST_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_last_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_last_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TID,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_id_V_U_ack_in,
        data_out => SLI_AXIS_TID_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_id_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_id_V_U_apdone_blk);

    regslice_both_SLI_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => SLI_AXIS_TDEST,
        vld_in => SLI_AXIS_TVALID,
        ack_in => regslice_both_SLI_AXIS_V_dest_V_U_ack_in,
        data_out => SLI_AXIS_TDEST_int_regslice,
        vld_out => regslice_both_SLI_AXIS_V_dest_V_U_vld_out,
        ack_out => SLI_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_SLI_AXIS_V_dest_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aValue_mat_data_reg_330,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => MRI_AXIS_TREADY_int_regslice,
        data_out => MRI_AXIS_TDATA,
        vld_out => regslice_both_MRI_AXIS_V_data_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_data_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_keep_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TKEEP,
        vld_out => regslice_both_MRI_AXIS_V_keep_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_strb_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TSTRB,
        vld_out => regslice_both_MRI_AXIS_V_strb_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_user_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TUSER,
        vld_out => regslice_both_MRI_AXIS_V_user_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_user_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_last_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TLAST,
        vld_out => regslice_both_MRI_AXIS_V_last_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_last_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_id_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TID,
        vld_out => regslice_both_MRI_AXIS_V_id_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_id_V_U_apdone_blk);

    regslice_both_MRI_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MRI_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MRI_AXIS_V_dest_V_U_ack_in_dummy,
        data_out => MRI_AXIS_TDEST,
        vld_out => regslice_both_MRI_AXIS_V_dest_V_U_vld_out,
        ack_out => MRI_AXIS_TREADY,
        apdone_blk => regslice_both_MRI_AXIS_V_dest_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TDATA,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_data_V_U_ack_in,
        data_out => STW_AXIS_TDATA_int_regslice,
        vld_out => STW_AXIS_TVALID_int_regslice,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_data_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TKEEP,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_keep_V_U_ack_in,
        data_out => STW_AXIS_TKEEP_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_keep_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TSTRB,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_strb_V_U_ack_in,
        data_out => STW_AXIS_TSTRB_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_strb_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TUSER,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_user_V_U_ack_in,
        data_out => STW_AXIS_TUSER_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_user_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_user_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TLAST,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_last_V_U_ack_in,
        data_out => STW_AXIS_TLAST_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_last_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_last_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TID,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_id_V_U_ack_in,
        data_out => STW_AXIS_TID_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_id_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_id_V_U_apdone_blk);

    regslice_both_STW_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STW_AXIS_TDEST,
        vld_in => STW_AXIS_TVALID,
        ack_in => regslice_both_STW_AXIS_V_dest_V_U_ack_in,
        data_out => STW_AXIS_TDEST_int_regslice,
        vld_out => regslice_both_STW_AXIS_V_dest_V_U_vld_out,
        ack_out => STW_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STW_AXIS_V_dest_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aValue_mat_data_1_reg_336,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => MBW_AXIS_TREADY_int_regslice,
        data_out => MBW_AXIS_TDATA,
        vld_out => regslice_both_MBW_AXIS_V_data_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_data_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_keep_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TKEEP,
        vld_out => regslice_both_MBW_AXIS_V_keep_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_strb_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TSTRB,
        vld_out => regslice_both_MBW_AXIS_V_strb_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_user_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TUSER,
        vld_out => regslice_both_MBW_AXIS_V_user_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_user_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_last_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TLAST,
        vld_out => regslice_both_MBW_AXIS_V_last_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_last_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_id_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TID,
        vld_out => regslice_both_MBW_AXIS_V_id_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_id_V_U_apdone_blk);

    regslice_both_MBW_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MBW_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBW_AXIS_V_dest_V_U_ack_in_dummy,
        data_out => MBW_AXIS_TDEST,
        vld_out => regslice_both_MBW_AXIS_V_dest_V_U_vld_out,
        ack_out => MBW_AXIS_TREADY,
        apdone_blk => regslice_both_MBW_AXIS_V_dest_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TDATA,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_data_V_U_ack_in,
        data_out => STA_AXIS_TDATA_int_regslice,
        vld_out => STA_AXIS_TVALID_int_regslice,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_data_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TKEEP,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_keep_V_U_ack_in,
        data_out => STA_AXIS_TKEEP_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_keep_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TSTRB,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_strb_V_U_ack_in,
        data_out => STA_AXIS_TSTRB_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_strb_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TUSER,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_user_V_U_ack_in,
        data_out => STA_AXIS_TUSER_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_user_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_user_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TLAST,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_last_V_U_ack_in,
        data_out => STA_AXIS_TLAST_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_last_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_last_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TID,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_id_V_U_ack_in,
        data_out => STA_AXIS_TID_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_id_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_id_V_U_apdone_blk);

    regslice_both_STA_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => STA_AXIS_TDEST,
        vld_in => STA_AXIS_TVALID,
        ack_in => regslice_both_STA_AXIS_V_dest_V_U_ack_in,
        data_out => STA_AXIS_TDEST_int_regslice,
        vld_out => regslice_both_STA_AXIS_V_dest_V_U_vld_out,
        ack_out => STA_AXIS_TREADY_int_regslice,
        apdone_blk => regslice_both_STA_AXIS_V_dest_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_data_V_U : component pe_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => MBA_AXIS_TDATA_int_regslice,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => MBA_AXIS_TREADY_int_regslice,
        data_out => MBA_AXIS_TDATA,
        vld_out => regslice_both_MBA_AXIS_V_data_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_data_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_keep_V_U : component pe_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_3,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_keep_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TKEEP,
        vld_out => regslice_both_MBA_AXIS_V_keep_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_keep_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_strb_V_U : component pe_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_3,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_strb_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TSTRB,
        vld_out => regslice_both_MBA_AXIS_V_strb_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_strb_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_user_V_U : component pe_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_user_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TUSER,
        vld_out => regslice_both_MBA_AXIS_V_user_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_user_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_last_V_U : component pe_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_last_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TLAST,
        vld_out => regslice_both_MBA_AXIS_V_last_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_last_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_id_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_id_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TID,
        vld_out => regslice_both_MBA_AXIS_V_id_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_id_V_U_apdone_blk);

    regslice_both_MBA_AXIS_V_dest_V_U : component pe_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => MBA_AXIS_TVALID_int_regslice,
        ack_in => regslice_both_MBA_AXIS_V_dest_V_U_ack_in_dummy,
        data_out => MBA_AXIS_TDEST,
        vld_out => regslice_both_MBA_AXIS_V_dest_V_U_vld_out,
        ack_out => MBA_AXIS_TREADY,
        apdone_blk => regslice_both_MBA_AXIS_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                aValue_mat_data_1_reg_336 <= STW_AXIS_TDATA_int_regslice;
                aValue_mat_data_reg_330 <= SLI_AXIS_TDATA_int_regslice;
                empty_15_reg_342_0 <= STA_AXIS_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                prod_iw_reg_347 <= prod_iw_fu_315_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state1, ap_block_state3, ap_block_state3_io, ap_block_state4, ap_block_state4_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    MBA_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, MBA_AXIS_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MBA_AXIS_TDATA_blk_n <= MBA_AXIS_TREADY_int_regslice;
        else 
            MBA_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MBA_AXIS_TDATA_int_regslice <= std_logic_vector(unsigned(empty_15_reg_342_0) + unsigned(prod_iw_reg_347));
    MBA_AXIS_TVALID <= regslice_both_MBA_AXIS_V_data_V_U_vld_out;

    MBA_AXIS_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state3, ap_block_state3, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MBA_AXIS_TVALID_int_regslice <= ap_const_logic_1;
        else 
            MBA_AXIS_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    MBW_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, MBW_AXIS_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MBW_AXIS_TDATA_blk_n <= MBW_AXIS_TREADY_int_regslice;
        else 
            MBW_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MBW_AXIS_TVALID <= regslice_both_MBW_AXIS_V_data_V_U_vld_out;

    MBW_AXIS_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state3, ap_block_state3, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MBW_AXIS_TVALID_int_regslice <= ap_const_logic_1;
        else 
            MBW_AXIS_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    MRI_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, MRI_AXIS_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MRI_AXIS_TDATA_blk_n <= MRI_AXIS_TREADY_int_regslice;
        else 
            MRI_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MRI_AXIS_TVALID <= regslice_both_MRI_AXIS_V_data_V_U_vld_out;

    MRI_AXIS_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state3, ap_block_state3, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            MRI_AXIS_TVALID_int_regslice <= ap_const_logic_1;
        else 
            MRI_AXIS_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    SLI_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            SLI_AXIS_TDATA_blk_n <= SLI_AXIS_TVALID_int_regslice;
        else 
            SLI_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SLI_AXIS_TREADY <= regslice_both_SLI_AXIS_V_data_V_U_ack_in;

    SLI_AXIS_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            SLI_AXIS_TREADY_int_regslice <= ap_const_logic_1;
        else 
            SLI_AXIS_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    STA_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, STA_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            STA_AXIS_TDATA_blk_n <= STA_AXIS_TVALID_int_regslice;
        else 
            STA_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    STA_AXIS_TREADY <= regslice_both_STA_AXIS_V_data_V_U_ack_in;

    STA_AXIS_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            STA_AXIS_TREADY_int_regslice <= ap_const_logic_1;
        else 
            STA_AXIS_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    STW_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, STW_AXIS_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            STW_AXIS_TDATA_blk_n <= STW_AXIS_TVALID_int_regslice;
        else 
            STW_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    STW_AXIS_TREADY <= regslice_both_STW_AXIS_V_data_V_U_ack_in;

    STW_AXIS_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            STW_AXIS_TREADY_int_regslice <= ap_const_logic_1;
        else 
            STW_AXIS_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3, ap_block_state3_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4, ap_block_state4_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, SLI_AXIS_TVALID_int_regslice, STW_AXIS_TVALID_int_regslice, STA_AXIS_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = STA_AXIS_TVALID_int_regslice) or (ap_const_logic_0 = STW_AXIS_TVALID_int_regslice) or (ap_const_logic_0 = SLI_AXIS_TVALID_int_regslice) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(MRI_AXIS_TREADY_int_regslice, MBW_AXIS_TREADY_int_regslice, MBA_AXIS_TREADY_int_regslice)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = MBA_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MBW_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MRI_AXIS_TREADY_int_regslice));
    end process;


    ap_block_state3_io_assign_proc : process(MRI_AXIS_TREADY_int_regslice, MBW_AXIS_TREADY_int_regslice, MBA_AXIS_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = MBA_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MBW_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MRI_AXIS_TREADY_int_regslice));
    end process;


    ap_block_state4_assign_proc : process(regslice_both_MRI_AXIS_V_data_V_U_apdone_blk, regslice_both_MBW_AXIS_V_data_V_U_apdone_blk, regslice_both_MBA_AXIS_V_data_V_U_apdone_blk, MRI_AXIS_TREADY_int_regslice, MBW_AXIS_TREADY_int_regslice, MBA_AXIS_TREADY_int_regslice)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = MBA_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MBW_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MRI_AXIS_TREADY_int_regslice) or (regslice_both_MBA_AXIS_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_MBW_AXIS_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_MRI_AXIS_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state4_io_assign_proc : process(MRI_AXIS_TREADY_int_regslice, MBW_AXIS_TREADY_int_regslice, MBA_AXIS_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((ap_const_logic_0 = MBA_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MBW_AXIS_TREADY_int_regslice) or (ap_const_logic_0 = MRI_AXIS_TREADY_int_regslice));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, ap_block_state4, ap_block_state4_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4, ap_block_state4_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

end behav;
