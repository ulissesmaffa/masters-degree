// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pe,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.503000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=731,HLS_VERSION=2018_3}" *)

module pe (
        ap_clk,
        ap_rst_n,
        SLI_AXIS_TDATA,
        SLI_AXIS_TVALID,
        SLI_AXIS_TREADY,
        SLI_AXIS_TKEEP,
        SLI_AXIS_TSTRB,
        SLI_AXIS_TUSER,
        SLI_AXIS_TLAST,
        SLI_AXIS_TID,
        SLI_AXIS_TDEST,
        MRI_AXIS_TDATA,
        MRI_AXIS_TVALID,
        MRI_AXIS_TREADY,
        MRI_AXIS_TKEEP,
        MRI_AXIS_TSTRB,
        MRI_AXIS_TUSER,
        MRI_AXIS_TLAST,
        MRI_AXIS_TID,
        MRI_AXIS_TDEST,
        STW_AXIS_TDATA,
        STW_AXIS_TVALID,
        STW_AXIS_TREADY,
        STW_AXIS_TKEEP,
        STW_AXIS_TSTRB,
        STW_AXIS_TUSER,
        STW_AXIS_TLAST,
        STW_AXIS_TID,
        STW_AXIS_TDEST,
        MBW_AXIS_TDATA,
        MBW_AXIS_TVALID,
        MBW_AXIS_TREADY,
        MBW_AXIS_TKEEP,
        MBW_AXIS_TSTRB,
        MBW_AXIS_TUSER,
        MBW_AXIS_TLAST,
        MBW_AXIS_TID,
        MBW_AXIS_TDEST,
        STA_AXIS_TDATA,
        STA_AXIS_TVALID,
        STA_AXIS_TREADY,
        STA_AXIS_TKEEP,
        STA_AXIS_TSTRB,
        STA_AXIS_TUSER,
        STA_AXIS_TLAST,
        STA_AXIS_TID,
        STA_AXIS_TDEST,
        MBA_AXIS_TDATA,
        MBA_AXIS_TVALID,
        MBA_AXIS_TREADY,
        MBA_AXIS_TKEEP,
        MBA_AXIS_TSTRB,
        MBA_AXIS_TUSER,
        MBA_AXIS_TLAST,
        MBA_AXIS_TID,
        MBA_AXIS_TDEST,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] SLI_AXIS_TDATA;
input   SLI_AXIS_TVALID;
output   SLI_AXIS_TREADY;
input  [0:0] SLI_AXIS_TKEEP;
input  [0:0] SLI_AXIS_TSTRB;
input  [3:0] SLI_AXIS_TUSER;
input  [0:0] SLI_AXIS_TLAST;
input  [4:0] SLI_AXIS_TID;
input  [4:0] SLI_AXIS_TDEST;
output  [7:0] MRI_AXIS_TDATA;
output   MRI_AXIS_TVALID;
input   MRI_AXIS_TREADY;
output  [0:0] MRI_AXIS_TKEEP;
output  [0:0] MRI_AXIS_TSTRB;
output  [3:0] MRI_AXIS_TUSER;
output  [0:0] MRI_AXIS_TLAST;
output  [4:0] MRI_AXIS_TID;
output  [4:0] MRI_AXIS_TDEST;
input  [7:0] STW_AXIS_TDATA;
input   STW_AXIS_TVALID;
output   STW_AXIS_TREADY;
input  [0:0] STW_AXIS_TKEEP;
input  [0:0] STW_AXIS_TSTRB;
input  [3:0] STW_AXIS_TUSER;
input  [0:0] STW_AXIS_TLAST;
input  [4:0] STW_AXIS_TID;
input  [4:0] STW_AXIS_TDEST;
output  [7:0] MBW_AXIS_TDATA;
output   MBW_AXIS_TVALID;
input   MBW_AXIS_TREADY;
output  [0:0] MBW_AXIS_TKEEP;
output  [0:0] MBW_AXIS_TSTRB;
output  [3:0] MBW_AXIS_TUSER;
output  [0:0] MBW_AXIS_TLAST;
output  [4:0] MBW_AXIS_TID;
output  [4:0] MBW_AXIS_TDEST;
input  [15:0] STA_AXIS_TDATA;
input   STA_AXIS_TVALID;
output   STA_AXIS_TREADY;
input  [1:0] STA_AXIS_TKEEP;
input  [1:0] STA_AXIS_TSTRB;
input  [3:0] STA_AXIS_TUSER;
input  [0:0] STA_AXIS_TLAST;
input  [4:0] STA_AXIS_TID;
input  [4:0] STA_AXIS_TDEST;
output  [15:0] MBA_AXIS_TDATA;
output   MBA_AXIS_TVALID;
input   MBA_AXIS_TREADY;
output  [1:0] MBA_AXIS_TKEEP;
output  [1:0] MBA_AXIS_TSTRB;
output  [3:0] MBA_AXIS_TUSER;
output  [0:0] MBA_AXIS_TLAST;
output  [4:0] MBA_AXIS_TID;
output  [4:0] MBA_AXIS_TDEST;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg  signed [7:0] SLI_AXIS_V_data_V_0_data_out;
wire    SLI_AXIS_V_data_V_0_vld_in;
wire    SLI_AXIS_V_data_V_0_vld_out;
wire    SLI_AXIS_V_data_V_0_ack_in;
reg    SLI_AXIS_V_data_V_0_ack_out;
reg   [7:0] SLI_AXIS_V_data_V_0_payload_A;
reg   [7:0] SLI_AXIS_V_data_V_0_payload_B;
reg    SLI_AXIS_V_data_V_0_sel_rd;
reg    SLI_AXIS_V_data_V_0_sel_wr;
wire    SLI_AXIS_V_data_V_0_sel;
wire    SLI_AXIS_V_data_V_0_load_A;
wire    SLI_AXIS_V_data_V_0_load_B;
reg   [1:0] SLI_AXIS_V_data_V_0_state;
wire    SLI_AXIS_V_data_V_0_state_cmp_full;
wire    SLI_AXIS_V_dest_V_0_vld_in;
reg    SLI_AXIS_V_dest_V_0_ack_out;
reg   [1:0] SLI_AXIS_V_dest_V_0_state;
reg   [7:0] MRI_AXIS_V_data_V_1_data_out;
reg    MRI_AXIS_V_data_V_1_vld_in;
wire    MRI_AXIS_V_data_V_1_vld_out;
wire    MRI_AXIS_V_data_V_1_ack_in;
wire    MRI_AXIS_V_data_V_1_ack_out;
reg   [7:0] MRI_AXIS_V_data_V_1_payload_A;
reg   [7:0] MRI_AXIS_V_data_V_1_payload_B;
reg    MRI_AXIS_V_data_V_1_sel_rd;
reg    MRI_AXIS_V_data_V_1_sel_wr;
wire    MRI_AXIS_V_data_V_1_sel;
wire    MRI_AXIS_V_data_V_1_load_A;
wire    MRI_AXIS_V_data_V_1_load_B;
reg   [1:0] MRI_AXIS_V_data_V_1_state;
wire    MRI_AXIS_V_data_V_1_state_cmp_full;
wire   [0:0] MRI_AXIS_V_keep_V_1_data_out;
reg    MRI_AXIS_V_keep_V_1_vld_in;
wire    MRI_AXIS_V_keep_V_1_vld_out;
wire    MRI_AXIS_V_keep_V_1_ack_in;
wire    MRI_AXIS_V_keep_V_1_ack_out;
reg    MRI_AXIS_V_keep_V_1_sel_rd;
wire    MRI_AXIS_V_keep_V_1_sel;
reg   [1:0] MRI_AXIS_V_keep_V_1_state;
wire   [0:0] MRI_AXIS_V_strb_V_1_data_out;
reg    MRI_AXIS_V_strb_V_1_vld_in;
wire    MRI_AXIS_V_strb_V_1_vld_out;
wire    MRI_AXIS_V_strb_V_1_ack_in;
wire    MRI_AXIS_V_strb_V_1_ack_out;
reg    MRI_AXIS_V_strb_V_1_sel_rd;
wire    MRI_AXIS_V_strb_V_1_sel;
reg   [1:0] MRI_AXIS_V_strb_V_1_state;
wire   [3:0] MRI_AXIS_V_user_V_1_data_out;
reg    MRI_AXIS_V_user_V_1_vld_in;
wire    MRI_AXIS_V_user_V_1_vld_out;
wire    MRI_AXIS_V_user_V_1_ack_in;
wire    MRI_AXIS_V_user_V_1_ack_out;
reg    MRI_AXIS_V_user_V_1_sel_rd;
wire    MRI_AXIS_V_user_V_1_sel;
reg   [1:0] MRI_AXIS_V_user_V_1_state;
wire   [0:0] MRI_AXIS_V_last_V_1_data_out;
reg    MRI_AXIS_V_last_V_1_vld_in;
wire    MRI_AXIS_V_last_V_1_vld_out;
wire    MRI_AXIS_V_last_V_1_ack_in;
wire    MRI_AXIS_V_last_V_1_ack_out;
reg    MRI_AXIS_V_last_V_1_sel_rd;
wire    MRI_AXIS_V_last_V_1_sel;
reg   [1:0] MRI_AXIS_V_last_V_1_state;
wire   [4:0] MRI_AXIS_V_id_V_1_data_out;
reg    MRI_AXIS_V_id_V_1_vld_in;
wire    MRI_AXIS_V_id_V_1_vld_out;
wire    MRI_AXIS_V_id_V_1_ack_in;
wire    MRI_AXIS_V_id_V_1_ack_out;
reg    MRI_AXIS_V_id_V_1_sel_rd;
wire    MRI_AXIS_V_id_V_1_sel;
reg   [1:0] MRI_AXIS_V_id_V_1_state;
wire   [4:0] MRI_AXIS_V_dest_V_1_data_out;
reg    MRI_AXIS_V_dest_V_1_vld_in;
wire    MRI_AXIS_V_dest_V_1_vld_out;
wire    MRI_AXIS_V_dest_V_1_ack_in;
wire    MRI_AXIS_V_dest_V_1_ack_out;
reg    MRI_AXIS_V_dest_V_1_sel_rd;
wire    MRI_AXIS_V_dest_V_1_sel;
reg   [1:0] MRI_AXIS_V_dest_V_1_state;
reg  signed [7:0] STW_AXIS_V_data_V_0_data_out;
wire    STW_AXIS_V_data_V_0_vld_in;
wire    STW_AXIS_V_data_V_0_vld_out;
wire    STW_AXIS_V_data_V_0_ack_in;
reg    STW_AXIS_V_data_V_0_ack_out;
reg   [7:0] STW_AXIS_V_data_V_0_payload_A;
reg   [7:0] STW_AXIS_V_data_V_0_payload_B;
reg    STW_AXIS_V_data_V_0_sel_rd;
reg    STW_AXIS_V_data_V_0_sel_wr;
wire    STW_AXIS_V_data_V_0_sel;
wire    STW_AXIS_V_data_V_0_load_A;
wire    STW_AXIS_V_data_V_0_load_B;
reg   [1:0] STW_AXIS_V_data_V_0_state;
wire    STW_AXIS_V_data_V_0_state_cmp_full;
wire    STW_AXIS_V_dest_V_0_vld_in;
reg    STW_AXIS_V_dest_V_0_ack_out;
reg   [1:0] STW_AXIS_V_dest_V_0_state;
reg   [7:0] MBW_AXIS_V_data_V_1_data_out;
reg    MBW_AXIS_V_data_V_1_vld_in;
wire    MBW_AXIS_V_data_V_1_vld_out;
wire    MBW_AXIS_V_data_V_1_ack_in;
wire    MBW_AXIS_V_data_V_1_ack_out;
reg   [7:0] MBW_AXIS_V_data_V_1_payload_A;
reg   [7:0] MBW_AXIS_V_data_V_1_payload_B;
reg    MBW_AXIS_V_data_V_1_sel_rd;
reg    MBW_AXIS_V_data_V_1_sel_wr;
wire    MBW_AXIS_V_data_V_1_sel;
wire    MBW_AXIS_V_data_V_1_load_A;
wire    MBW_AXIS_V_data_V_1_load_B;
reg   [1:0] MBW_AXIS_V_data_V_1_state;
wire    MBW_AXIS_V_data_V_1_state_cmp_full;
wire   [0:0] MBW_AXIS_V_keep_V_1_data_out;
reg    MBW_AXIS_V_keep_V_1_vld_in;
wire    MBW_AXIS_V_keep_V_1_vld_out;
wire    MBW_AXIS_V_keep_V_1_ack_in;
wire    MBW_AXIS_V_keep_V_1_ack_out;
reg    MBW_AXIS_V_keep_V_1_sel_rd;
wire    MBW_AXIS_V_keep_V_1_sel;
reg   [1:0] MBW_AXIS_V_keep_V_1_state;
wire   [0:0] MBW_AXIS_V_strb_V_1_data_out;
reg    MBW_AXIS_V_strb_V_1_vld_in;
wire    MBW_AXIS_V_strb_V_1_vld_out;
wire    MBW_AXIS_V_strb_V_1_ack_in;
wire    MBW_AXIS_V_strb_V_1_ack_out;
reg    MBW_AXIS_V_strb_V_1_sel_rd;
wire    MBW_AXIS_V_strb_V_1_sel;
reg   [1:0] MBW_AXIS_V_strb_V_1_state;
wire   [3:0] MBW_AXIS_V_user_V_1_data_out;
reg    MBW_AXIS_V_user_V_1_vld_in;
wire    MBW_AXIS_V_user_V_1_vld_out;
wire    MBW_AXIS_V_user_V_1_ack_in;
wire    MBW_AXIS_V_user_V_1_ack_out;
reg    MBW_AXIS_V_user_V_1_sel_rd;
wire    MBW_AXIS_V_user_V_1_sel;
reg   [1:0] MBW_AXIS_V_user_V_1_state;
wire   [0:0] MBW_AXIS_V_last_V_1_data_out;
reg    MBW_AXIS_V_last_V_1_vld_in;
wire    MBW_AXIS_V_last_V_1_vld_out;
wire    MBW_AXIS_V_last_V_1_ack_in;
wire    MBW_AXIS_V_last_V_1_ack_out;
reg    MBW_AXIS_V_last_V_1_sel_rd;
wire    MBW_AXIS_V_last_V_1_sel;
reg   [1:0] MBW_AXIS_V_last_V_1_state;
wire   [4:0] MBW_AXIS_V_id_V_1_data_out;
reg    MBW_AXIS_V_id_V_1_vld_in;
wire    MBW_AXIS_V_id_V_1_vld_out;
wire    MBW_AXIS_V_id_V_1_ack_in;
wire    MBW_AXIS_V_id_V_1_ack_out;
reg    MBW_AXIS_V_id_V_1_sel_rd;
wire    MBW_AXIS_V_id_V_1_sel;
reg   [1:0] MBW_AXIS_V_id_V_1_state;
wire   [4:0] MBW_AXIS_V_dest_V_1_data_out;
reg    MBW_AXIS_V_dest_V_1_vld_in;
wire    MBW_AXIS_V_dest_V_1_vld_out;
wire    MBW_AXIS_V_dest_V_1_ack_in;
wire    MBW_AXIS_V_dest_V_1_ack_out;
reg    MBW_AXIS_V_dest_V_1_sel_rd;
wire    MBW_AXIS_V_dest_V_1_sel;
reg   [1:0] MBW_AXIS_V_dest_V_1_state;
reg   [15:0] STA_AXIS_V_data_V_0_data_out;
wire    STA_AXIS_V_data_V_0_vld_in;
wire    STA_AXIS_V_data_V_0_vld_out;
wire    STA_AXIS_V_data_V_0_ack_in;
reg    STA_AXIS_V_data_V_0_ack_out;
reg   [15:0] STA_AXIS_V_data_V_0_payload_A;
reg   [15:0] STA_AXIS_V_data_V_0_payload_B;
reg    STA_AXIS_V_data_V_0_sel_rd;
reg    STA_AXIS_V_data_V_0_sel_wr;
wire    STA_AXIS_V_data_V_0_sel;
wire    STA_AXIS_V_data_V_0_load_A;
wire    STA_AXIS_V_data_V_0_load_B;
reg   [1:0] STA_AXIS_V_data_V_0_state;
wire    STA_AXIS_V_data_V_0_state_cmp_full;
wire    STA_AXIS_V_dest_V_0_vld_in;
reg    STA_AXIS_V_dest_V_0_ack_out;
reg   [1:0] STA_AXIS_V_dest_V_0_state;
reg   [15:0] MBA_AXIS_V_data_V_1_data_out;
reg    MBA_AXIS_V_data_V_1_vld_in;
wire    MBA_AXIS_V_data_V_1_vld_out;
wire    MBA_AXIS_V_data_V_1_ack_in;
wire    MBA_AXIS_V_data_V_1_ack_out;
reg   [15:0] MBA_AXIS_V_data_V_1_payload_A;
reg   [15:0] MBA_AXIS_V_data_V_1_payload_B;
reg    MBA_AXIS_V_data_V_1_sel_rd;
reg    MBA_AXIS_V_data_V_1_sel_wr;
wire    MBA_AXIS_V_data_V_1_sel;
wire    MBA_AXIS_V_data_V_1_load_A;
wire    MBA_AXIS_V_data_V_1_load_B;
reg   [1:0] MBA_AXIS_V_data_V_1_state;
wire    MBA_AXIS_V_data_V_1_state_cmp_full;
wire   [1:0] MBA_AXIS_V_keep_V_1_data_out;
reg    MBA_AXIS_V_keep_V_1_vld_in;
wire    MBA_AXIS_V_keep_V_1_vld_out;
wire    MBA_AXIS_V_keep_V_1_ack_in;
wire    MBA_AXIS_V_keep_V_1_ack_out;
reg    MBA_AXIS_V_keep_V_1_sel_rd;
wire    MBA_AXIS_V_keep_V_1_sel;
reg   [1:0] MBA_AXIS_V_keep_V_1_state;
wire   [1:0] MBA_AXIS_V_strb_V_1_data_out;
reg    MBA_AXIS_V_strb_V_1_vld_in;
wire    MBA_AXIS_V_strb_V_1_vld_out;
wire    MBA_AXIS_V_strb_V_1_ack_in;
wire    MBA_AXIS_V_strb_V_1_ack_out;
reg    MBA_AXIS_V_strb_V_1_sel_rd;
wire    MBA_AXIS_V_strb_V_1_sel;
reg   [1:0] MBA_AXIS_V_strb_V_1_state;
wire   [3:0] MBA_AXIS_V_user_V_1_data_out;
reg    MBA_AXIS_V_user_V_1_vld_in;
wire    MBA_AXIS_V_user_V_1_vld_out;
wire    MBA_AXIS_V_user_V_1_ack_in;
wire    MBA_AXIS_V_user_V_1_ack_out;
reg    MBA_AXIS_V_user_V_1_sel_rd;
wire    MBA_AXIS_V_user_V_1_sel;
reg   [1:0] MBA_AXIS_V_user_V_1_state;
wire   [0:0] MBA_AXIS_V_last_V_1_data_out;
reg    MBA_AXIS_V_last_V_1_vld_in;
wire    MBA_AXIS_V_last_V_1_vld_out;
wire    MBA_AXIS_V_last_V_1_ack_in;
wire    MBA_AXIS_V_last_V_1_ack_out;
reg    MBA_AXIS_V_last_V_1_sel_rd;
wire    MBA_AXIS_V_last_V_1_sel;
reg   [1:0] MBA_AXIS_V_last_V_1_state;
wire   [4:0] MBA_AXIS_V_id_V_1_data_out;
reg    MBA_AXIS_V_id_V_1_vld_in;
wire    MBA_AXIS_V_id_V_1_vld_out;
wire    MBA_AXIS_V_id_V_1_ack_in;
wire    MBA_AXIS_V_id_V_1_ack_out;
reg    MBA_AXIS_V_id_V_1_sel_rd;
wire    MBA_AXIS_V_id_V_1_sel;
reg   [1:0] MBA_AXIS_V_id_V_1_state;
wire   [4:0] MBA_AXIS_V_dest_V_1_data_out;
reg    MBA_AXIS_V_dest_V_1_vld_in;
wire    MBA_AXIS_V_dest_V_1_vld_out;
wire    MBA_AXIS_V_dest_V_1_ack_in;
wire    MBA_AXIS_V_dest_V_1_ack_out;
reg    MBA_AXIS_V_dest_V_1_sel_rd;
wire    MBA_AXIS_V_dest_V_1_sel;
reg   [1:0] MBA_AXIS_V_dest_V_1_state;
reg    SLI_AXIS_TDATA_blk_n;
reg    MRI_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    STW_AXIS_TDATA_blk_n;
reg    MBW_AXIS_TDATA_blk_n;
reg    STA_AXIS_TDATA_blk_n;
reg    MBA_AXIS_TDATA_blk_n;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [15:0] res_ba_fu_325_p2;
wire   [15:0] prod_iw_fu_319_p2;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 SLI_AXIS_V_data_V_0_sel_rd = 1'b0;
#0 SLI_AXIS_V_data_V_0_sel_wr = 1'b0;
#0 SLI_AXIS_V_data_V_0_state = 2'd0;
#0 SLI_AXIS_V_dest_V_0_state = 2'd0;
#0 MRI_AXIS_V_data_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_data_V_1_sel_wr = 1'b0;
#0 MRI_AXIS_V_data_V_1_state = 2'd0;
#0 MRI_AXIS_V_keep_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_keep_V_1_state = 2'd0;
#0 MRI_AXIS_V_strb_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_strb_V_1_state = 2'd0;
#0 MRI_AXIS_V_user_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_user_V_1_state = 2'd0;
#0 MRI_AXIS_V_last_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_last_V_1_state = 2'd0;
#0 MRI_AXIS_V_id_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_id_V_1_state = 2'd0;
#0 MRI_AXIS_V_dest_V_1_sel_rd = 1'b0;
#0 MRI_AXIS_V_dest_V_1_state = 2'd0;
#0 STW_AXIS_V_data_V_0_sel_rd = 1'b0;
#0 STW_AXIS_V_data_V_0_sel_wr = 1'b0;
#0 STW_AXIS_V_data_V_0_state = 2'd0;
#0 STW_AXIS_V_dest_V_0_state = 2'd0;
#0 MBW_AXIS_V_data_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_data_V_1_sel_wr = 1'b0;
#0 MBW_AXIS_V_data_V_1_state = 2'd0;
#0 MBW_AXIS_V_keep_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_keep_V_1_state = 2'd0;
#0 MBW_AXIS_V_strb_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_strb_V_1_state = 2'd0;
#0 MBW_AXIS_V_user_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_user_V_1_state = 2'd0;
#0 MBW_AXIS_V_last_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_last_V_1_state = 2'd0;
#0 MBW_AXIS_V_id_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_id_V_1_state = 2'd0;
#0 MBW_AXIS_V_dest_V_1_sel_rd = 1'b0;
#0 MBW_AXIS_V_dest_V_1_state = 2'd0;
#0 STA_AXIS_V_data_V_0_sel_rd = 1'b0;
#0 STA_AXIS_V_data_V_0_sel_wr = 1'b0;
#0 STA_AXIS_V_data_V_0_state = 2'd0;
#0 STA_AXIS_V_dest_V_0_state = 2'd0;
#0 MBA_AXIS_V_data_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_data_V_1_sel_wr = 1'b0;
#0 MBA_AXIS_V_data_V_1_state = 2'd0;
#0 MBA_AXIS_V_keep_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_keep_V_1_state = 2'd0;
#0 MBA_AXIS_V_strb_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_strb_V_1_state = 2'd0;
#0 MBA_AXIS_V_user_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_user_V_1_state = 2'd0;
#0 MBA_AXIS_V_last_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_last_V_1_state = 2'd0;
#0 MBA_AXIS_V_id_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_id_V_1_state = 2'd0;
#0 MBA_AXIS_V_dest_V_1_sel_rd = 1'b0;
#0 MBA_AXIS_V_dest_V_1_state = 2'd0;
end

pe_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
pe_CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pe_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
pe_mul_8s_8s_16_1_1_U1(
    .din0(STW_AXIS_V_data_V_0_data_out),
    .din1(SLI_AXIS_V_data_V_0_data_out),
    .dout(prod_iw_fu_319_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_data_V_1_ack_out) & (1'b1 == MBA_AXIS_V_data_V_1_vld_out))) begin
            MBA_AXIS_V_data_V_1_sel_rd <= ~MBA_AXIS_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_data_V_1_ack_in) & (1'b1 == MBA_AXIS_V_data_V_1_vld_in))) begin
            MBA_AXIS_V_data_V_1_sel_wr <= ~MBA_AXIS_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_data_V_1_state) & (1'b0 == MBA_AXIS_V_data_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_data_V_1_state) & (1'b0 == MBA_AXIS_V_data_V_1_vld_in) & (1'b1 == MBA_AXIS_V_data_V_1_ack_out)))) begin
            MBA_AXIS_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_data_V_1_state) & (1'b0 == MBA_AXIS_V_data_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_data_V_1_state) & (1'b0 == MBA_AXIS_V_data_V_1_ack_out) & (1'b1 == MBA_AXIS_V_data_V_1_vld_in)))) begin
            MBA_AXIS_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_data_V_1_vld_in) & (1'b1 == MBA_AXIS_V_data_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_data_V_1_ack_out) & (1'b1 == MBA_AXIS_V_data_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_data_V_1_state)) | ((2'd1 == MBA_AXIS_V_data_V_1_state) & (1'b1 == MBA_AXIS_V_data_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_data_V_1_state) & (1'b1 == MBA_AXIS_V_data_V_1_vld_in)))) begin
            MBA_AXIS_V_data_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBA_AXIS_V_dest_V_1_vld_out))) begin
            MBA_AXIS_V_dest_V_1_sel_rd <= ~MBA_AXIS_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_dest_V_1_state) & (1'b0 == MBA_AXIS_V_dest_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_dest_V_1_state) & (1'b0 == MBA_AXIS_V_dest_V_1_vld_in) & (1'b1 == MBA_AXIS_V_dest_V_1_ack_out)))) begin
            MBA_AXIS_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_dest_V_1_state) & (1'b0 == MBA_AXIS_V_dest_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_dest_V_1_state) & (1'b0 == MBA_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBA_AXIS_V_dest_V_1_vld_in)))) begin
            MBA_AXIS_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_dest_V_1_vld_in) & (1'b1 == MBA_AXIS_V_dest_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBA_AXIS_V_dest_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_dest_V_1_state)) | ((2'd1 == MBA_AXIS_V_dest_V_1_state) & (1'b1 == MBA_AXIS_V_dest_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_dest_V_1_state) & (1'b1 == MBA_AXIS_V_dest_V_1_vld_in)))) begin
            MBA_AXIS_V_dest_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_id_V_1_ack_out) & (1'b1 == MBA_AXIS_V_id_V_1_vld_out))) begin
            MBA_AXIS_V_id_V_1_sel_rd <= ~MBA_AXIS_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_id_V_1_state) & (1'b0 == MBA_AXIS_V_id_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_id_V_1_state) & (1'b0 == MBA_AXIS_V_id_V_1_vld_in) & (1'b1 == MBA_AXIS_V_id_V_1_ack_out)))) begin
            MBA_AXIS_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_id_V_1_state) & (1'b0 == MBA_AXIS_V_id_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_id_V_1_state) & (1'b0 == MBA_AXIS_V_id_V_1_ack_out) & (1'b1 == MBA_AXIS_V_id_V_1_vld_in)))) begin
            MBA_AXIS_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_id_V_1_vld_in) & (1'b1 == MBA_AXIS_V_id_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_id_V_1_ack_out) & (1'b1 == MBA_AXIS_V_id_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_id_V_1_state)) | ((2'd1 == MBA_AXIS_V_id_V_1_state) & (1'b1 == MBA_AXIS_V_id_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_id_V_1_state) & (1'b1 == MBA_AXIS_V_id_V_1_vld_in)))) begin
            MBA_AXIS_V_id_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBA_AXIS_V_keep_V_1_vld_out))) begin
            MBA_AXIS_V_keep_V_1_sel_rd <= ~MBA_AXIS_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_keep_V_1_state) & (1'b0 == MBA_AXIS_V_keep_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_keep_V_1_state) & (1'b0 == MBA_AXIS_V_keep_V_1_vld_in) & (1'b1 == MBA_AXIS_V_keep_V_1_ack_out)))) begin
            MBA_AXIS_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_keep_V_1_state) & (1'b0 == MBA_AXIS_V_keep_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_keep_V_1_state) & (1'b0 == MBA_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBA_AXIS_V_keep_V_1_vld_in)))) begin
            MBA_AXIS_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_keep_V_1_vld_in) & (1'b1 == MBA_AXIS_V_keep_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBA_AXIS_V_keep_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_keep_V_1_state)) | ((2'd1 == MBA_AXIS_V_keep_V_1_state) & (1'b1 == MBA_AXIS_V_keep_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_keep_V_1_state) & (1'b1 == MBA_AXIS_V_keep_V_1_vld_in)))) begin
            MBA_AXIS_V_keep_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_last_V_1_ack_out) & (1'b1 == MBA_AXIS_V_last_V_1_vld_out))) begin
            MBA_AXIS_V_last_V_1_sel_rd <= ~MBA_AXIS_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_last_V_1_state) & (1'b0 == MBA_AXIS_V_last_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_last_V_1_state) & (1'b0 == MBA_AXIS_V_last_V_1_vld_in) & (1'b1 == MBA_AXIS_V_last_V_1_ack_out)))) begin
            MBA_AXIS_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_last_V_1_state) & (1'b0 == MBA_AXIS_V_last_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_last_V_1_state) & (1'b0 == MBA_AXIS_V_last_V_1_ack_out) & (1'b1 == MBA_AXIS_V_last_V_1_vld_in)))) begin
            MBA_AXIS_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_last_V_1_vld_in) & (1'b1 == MBA_AXIS_V_last_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_last_V_1_ack_out) & (1'b1 == MBA_AXIS_V_last_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_last_V_1_state)) | ((2'd1 == MBA_AXIS_V_last_V_1_state) & (1'b1 == MBA_AXIS_V_last_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_last_V_1_state) & (1'b1 == MBA_AXIS_V_last_V_1_vld_in)))) begin
            MBA_AXIS_V_last_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBA_AXIS_V_strb_V_1_vld_out))) begin
            MBA_AXIS_V_strb_V_1_sel_rd <= ~MBA_AXIS_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_strb_V_1_state) & (1'b0 == MBA_AXIS_V_strb_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_strb_V_1_state) & (1'b0 == MBA_AXIS_V_strb_V_1_vld_in) & (1'b1 == MBA_AXIS_V_strb_V_1_ack_out)))) begin
            MBA_AXIS_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_strb_V_1_state) & (1'b0 == MBA_AXIS_V_strb_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_strb_V_1_state) & (1'b0 == MBA_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBA_AXIS_V_strb_V_1_vld_in)))) begin
            MBA_AXIS_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_strb_V_1_vld_in) & (1'b1 == MBA_AXIS_V_strb_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBA_AXIS_V_strb_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_strb_V_1_state)) | ((2'd1 == MBA_AXIS_V_strb_V_1_state) & (1'b1 == MBA_AXIS_V_strb_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_strb_V_1_state) & (1'b1 == MBA_AXIS_V_strb_V_1_vld_in)))) begin
            MBA_AXIS_V_strb_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBA_AXIS_V_user_V_1_ack_out) & (1'b1 == MBA_AXIS_V_user_V_1_vld_out))) begin
            MBA_AXIS_V_user_V_1_sel_rd <= ~MBA_AXIS_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBA_AXIS_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBA_AXIS_V_user_V_1_state) & (1'b0 == MBA_AXIS_V_user_V_1_vld_in)) | ((2'd3 == MBA_AXIS_V_user_V_1_state) & (1'b0 == MBA_AXIS_V_user_V_1_vld_in) & (1'b1 == MBA_AXIS_V_user_V_1_ack_out)))) begin
            MBA_AXIS_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBA_AXIS_V_user_V_1_state) & (1'b0 == MBA_AXIS_V_user_V_1_ack_out)) | ((2'd3 == MBA_AXIS_V_user_V_1_state) & (1'b0 == MBA_AXIS_V_user_V_1_ack_out) & (1'b1 == MBA_AXIS_V_user_V_1_vld_in)))) begin
            MBA_AXIS_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBA_AXIS_V_user_V_1_vld_in) & (1'b1 == MBA_AXIS_V_user_V_1_ack_out)) & ~((1'b0 == MBA_AXIS_V_user_V_1_ack_out) & (1'b1 == MBA_AXIS_V_user_V_1_vld_in)) & (2'd3 == MBA_AXIS_V_user_V_1_state)) | ((2'd1 == MBA_AXIS_V_user_V_1_state) & (1'b1 == MBA_AXIS_V_user_V_1_ack_out)) | ((2'd2 == MBA_AXIS_V_user_V_1_state) & (1'b1 == MBA_AXIS_V_user_V_1_vld_in)))) begin
            MBA_AXIS_V_user_V_1_state <= 2'd3;
        end else begin
            MBA_AXIS_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_data_V_1_ack_out) & (1'b1 == MBW_AXIS_V_data_V_1_vld_out))) begin
            MBW_AXIS_V_data_V_1_sel_rd <= ~MBW_AXIS_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_data_V_1_ack_in) & (1'b1 == MBW_AXIS_V_data_V_1_vld_in))) begin
            MBW_AXIS_V_data_V_1_sel_wr <= ~MBW_AXIS_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_data_V_1_state) & (1'b0 == MBW_AXIS_V_data_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_data_V_1_state) & (1'b0 == MBW_AXIS_V_data_V_1_vld_in) & (1'b1 == MBW_AXIS_V_data_V_1_ack_out)))) begin
            MBW_AXIS_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_data_V_1_state) & (1'b0 == MBW_AXIS_V_data_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_data_V_1_state) & (1'b0 == MBW_AXIS_V_data_V_1_ack_out) & (1'b1 == MBW_AXIS_V_data_V_1_vld_in)))) begin
            MBW_AXIS_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_data_V_1_vld_in) & (1'b1 == MBW_AXIS_V_data_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_data_V_1_ack_out) & (1'b1 == MBW_AXIS_V_data_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_data_V_1_state)) | ((2'd1 == MBW_AXIS_V_data_V_1_state) & (1'b1 == MBW_AXIS_V_data_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_data_V_1_state) & (1'b1 == MBW_AXIS_V_data_V_1_vld_in)))) begin
            MBW_AXIS_V_data_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBW_AXIS_V_dest_V_1_vld_out))) begin
            MBW_AXIS_V_dest_V_1_sel_rd <= ~MBW_AXIS_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_dest_V_1_state) & (1'b0 == MBW_AXIS_V_dest_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_dest_V_1_state) & (1'b0 == MBW_AXIS_V_dest_V_1_vld_in) & (1'b1 == MBW_AXIS_V_dest_V_1_ack_out)))) begin
            MBW_AXIS_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_dest_V_1_state) & (1'b0 == MBW_AXIS_V_dest_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_dest_V_1_state) & (1'b0 == MBW_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBW_AXIS_V_dest_V_1_vld_in)))) begin
            MBW_AXIS_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_dest_V_1_vld_in) & (1'b1 == MBW_AXIS_V_dest_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_dest_V_1_ack_out) & (1'b1 == MBW_AXIS_V_dest_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_dest_V_1_state)) | ((2'd1 == MBW_AXIS_V_dest_V_1_state) & (1'b1 == MBW_AXIS_V_dest_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_dest_V_1_state) & (1'b1 == MBW_AXIS_V_dest_V_1_vld_in)))) begin
            MBW_AXIS_V_dest_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_id_V_1_ack_out) & (1'b1 == MBW_AXIS_V_id_V_1_vld_out))) begin
            MBW_AXIS_V_id_V_1_sel_rd <= ~MBW_AXIS_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_id_V_1_state) & (1'b0 == MBW_AXIS_V_id_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_id_V_1_state) & (1'b0 == MBW_AXIS_V_id_V_1_vld_in) & (1'b1 == MBW_AXIS_V_id_V_1_ack_out)))) begin
            MBW_AXIS_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_id_V_1_state) & (1'b0 == MBW_AXIS_V_id_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_id_V_1_state) & (1'b0 == MBW_AXIS_V_id_V_1_ack_out) & (1'b1 == MBW_AXIS_V_id_V_1_vld_in)))) begin
            MBW_AXIS_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_id_V_1_vld_in) & (1'b1 == MBW_AXIS_V_id_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_id_V_1_ack_out) & (1'b1 == MBW_AXIS_V_id_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_id_V_1_state)) | ((2'd1 == MBW_AXIS_V_id_V_1_state) & (1'b1 == MBW_AXIS_V_id_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_id_V_1_state) & (1'b1 == MBW_AXIS_V_id_V_1_vld_in)))) begin
            MBW_AXIS_V_id_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBW_AXIS_V_keep_V_1_vld_out))) begin
            MBW_AXIS_V_keep_V_1_sel_rd <= ~MBW_AXIS_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_keep_V_1_state) & (1'b0 == MBW_AXIS_V_keep_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_keep_V_1_state) & (1'b0 == MBW_AXIS_V_keep_V_1_vld_in) & (1'b1 == MBW_AXIS_V_keep_V_1_ack_out)))) begin
            MBW_AXIS_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_keep_V_1_state) & (1'b0 == MBW_AXIS_V_keep_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_keep_V_1_state) & (1'b0 == MBW_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBW_AXIS_V_keep_V_1_vld_in)))) begin
            MBW_AXIS_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_keep_V_1_vld_in) & (1'b1 == MBW_AXIS_V_keep_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_keep_V_1_ack_out) & (1'b1 == MBW_AXIS_V_keep_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_keep_V_1_state)) | ((2'd1 == MBW_AXIS_V_keep_V_1_state) & (1'b1 == MBW_AXIS_V_keep_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_keep_V_1_state) & (1'b1 == MBW_AXIS_V_keep_V_1_vld_in)))) begin
            MBW_AXIS_V_keep_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_last_V_1_ack_out) & (1'b1 == MBW_AXIS_V_last_V_1_vld_out))) begin
            MBW_AXIS_V_last_V_1_sel_rd <= ~MBW_AXIS_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_last_V_1_state) & (1'b0 == MBW_AXIS_V_last_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_last_V_1_state) & (1'b0 == MBW_AXIS_V_last_V_1_vld_in) & (1'b1 == MBW_AXIS_V_last_V_1_ack_out)))) begin
            MBW_AXIS_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_last_V_1_state) & (1'b0 == MBW_AXIS_V_last_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_last_V_1_state) & (1'b0 == MBW_AXIS_V_last_V_1_ack_out) & (1'b1 == MBW_AXIS_V_last_V_1_vld_in)))) begin
            MBW_AXIS_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_last_V_1_vld_in) & (1'b1 == MBW_AXIS_V_last_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_last_V_1_ack_out) & (1'b1 == MBW_AXIS_V_last_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_last_V_1_state)) | ((2'd1 == MBW_AXIS_V_last_V_1_state) & (1'b1 == MBW_AXIS_V_last_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_last_V_1_state) & (1'b1 == MBW_AXIS_V_last_V_1_vld_in)))) begin
            MBW_AXIS_V_last_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBW_AXIS_V_strb_V_1_vld_out))) begin
            MBW_AXIS_V_strb_V_1_sel_rd <= ~MBW_AXIS_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_strb_V_1_state) & (1'b0 == MBW_AXIS_V_strb_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_strb_V_1_state) & (1'b0 == MBW_AXIS_V_strb_V_1_vld_in) & (1'b1 == MBW_AXIS_V_strb_V_1_ack_out)))) begin
            MBW_AXIS_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_strb_V_1_state) & (1'b0 == MBW_AXIS_V_strb_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_strb_V_1_state) & (1'b0 == MBW_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBW_AXIS_V_strb_V_1_vld_in)))) begin
            MBW_AXIS_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_strb_V_1_vld_in) & (1'b1 == MBW_AXIS_V_strb_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_strb_V_1_ack_out) & (1'b1 == MBW_AXIS_V_strb_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_strb_V_1_state)) | ((2'd1 == MBW_AXIS_V_strb_V_1_state) & (1'b1 == MBW_AXIS_V_strb_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_strb_V_1_state) & (1'b1 == MBW_AXIS_V_strb_V_1_vld_in)))) begin
            MBW_AXIS_V_strb_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MBW_AXIS_V_user_V_1_ack_out) & (1'b1 == MBW_AXIS_V_user_V_1_vld_out))) begin
            MBW_AXIS_V_user_V_1_sel_rd <= ~MBW_AXIS_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MBW_AXIS_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MBW_AXIS_V_user_V_1_state) & (1'b0 == MBW_AXIS_V_user_V_1_vld_in)) | ((2'd3 == MBW_AXIS_V_user_V_1_state) & (1'b0 == MBW_AXIS_V_user_V_1_vld_in) & (1'b1 == MBW_AXIS_V_user_V_1_ack_out)))) begin
            MBW_AXIS_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == MBW_AXIS_V_user_V_1_state) & (1'b0 == MBW_AXIS_V_user_V_1_ack_out)) | ((2'd3 == MBW_AXIS_V_user_V_1_state) & (1'b0 == MBW_AXIS_V_user_V_1_ack_out) & (1'b1 == MBW_AXIS_V_user_V_1_vld_in)))) begin
            MBW_AXIS_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MBW_AXIS_V_user_V_1_vld_in) & (1'b1 == MBW_AXIS_V_user_V_1_ack_out)) & ~((1'b0 == MBW_AXIS_V_user_V_1_ack_out) & (1'b1 == MBW_AXIS_V_user_V_1_vld_in)) & (2'd3 == MBW_AXIS_V_user_V_1_state)) | ((2'd1 == MBW_AXIS_V_user_V_1_state) & (1'b1 == MBW_AXIS_V_user_V_1_ack_out)) | ((2'd2 == MBW_AXIS_V_user_V_1_state) & (1'b1 == MBW_AXIS_V_user_V_1_vld_in)))) begin
            MBW_AXIS_V_user_V_1_state <= 2'd3;
        end else begin
            MBW_AXIS_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_data_V_1_ack_out) & (1'b1 == MRI_AXIS_V_data_V_1_vld_out))) begin
            MRI_AXIS_V_data_V_1_sel_rd <= ~MRI_AXIS_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_data_V_1_ack_in) & (1'b1 == MRI_AXIS_V_data_V_1_vld_in))) begin
            MRI_AXIS_V_data_V_1_sel_wr <= ~MRI_AXIS_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_data_V_1_state) & (1'b0 == MRI_AXIS_V_data_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_data_V_1_state) & (1'b0 == MRI_AXIS_V_data_V_1_vld_in) & (1'b1 == MRI_AXIS_V_data_V_1_ack_out)))) begin
            MRI_AXIS_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_data_V_1_state) & (1'b0 == MRI_AXIS_V_data_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_data_V_1_state) & (1'b0 == MRI_AXIS_V_data_V_1_ack_out) & (1'b1 == MRI_AXIS_V_data_V_1_vld_in)))) begin
            MRI_AXIS_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_data_V_1_vld_in) & (1'b1 == MRI_AXIS_V_data_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_data_V_1_ack_out) & (1'b1 == MRI_AXIS_V_data_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_data_V_1_state)) | ((2'd1 == MRI_AXIS_V_data_V_1_state) & (1'b1 == MRI_AXIS_V_data_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_data_V_1_state) & (1'b1 == MRI_AXIS_V_data_V_1_vld_in)))) begin
            MRI_AXIS_V_data_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_dest_V_1_ack_out) & (1'b1 == MRI_AXIS_V_dest_V_1_vld_out))) begin
            MRI_AXIS_V_dest_V_1_sel_rd <= ~MRI_AXIS_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_dest_V_1_state) & (1'b0 == MRI_AXIS_V_dest_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_dest_V_1_state) & (1'b0 == MRI_AXIS_V_dest_V_1_vld_in) & (1'b1 == MRI_AXIS_V_dest_V_1_ack_out)))) begin
            MRI_AXIS_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_dest_V_1_state) & (1'b0 == MRI_AXIS_V_dest_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_dest_V_1_state) & (1'b0 == MRI_AXIS_V_dest_V_1_ack_out) & (1'b1 == MRI_AXIS_V_dest_V_1_vld_in)))) begin
            MRI_AXIS_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_dest_V_1_vld_in) & (1'b1 == MRI_AXIS_V_dest_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_dest_V_1_ack_out) & (1'b1 == MRI_AXIS_V_dest_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_dest_V_1_state)) | ((2'd1 == MRI_AXIS_V_dest_V_1_state) & (1'b1 == MRI_AXIS_V_dest_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_dest_V_1_state) & (1'b1 == MRI_AXIS_V_dest_V_1_vld_in)))) begin
            MRI_AXIS_V_dest_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_id_V_1_ack_out) & (1'b1 == MRI_AXIS_V_id_V_1_vld_out))) begin
            MRI_AXIS_V_id_V_1_sel_rd <= ~MRI_AXIS_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_id_V_1_state) & (1'b0 == MRI_AXIS_V_id_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_id_V_1_state) & (1'b0 == MRI_AXIS_V_id_V_1_vld_in) & (1'b1 == MRI_AXIS_V_id_V_1_ack_out)))) begin
            MRI_AXIS_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_id_V_1_state) & (1'b0 == MRI_AXIS_V_id_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_id_V_1_state) & (1'b0 == MRI_AXIS_V_id_V_1_ack_out) & (1'b1 == MRI_AXIS_V_id_V_1_vld_in)))) begin
            MRI_AXIS_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_id_V_1_vld_in) & (1'b1 == MRI_AXIS_V_id_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_id_V_1_ack_out) & (1'b1 == MRI_AXIS_V_id_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_id_V_1_state)) | ((2'd1 == MRI_AXIS_V_id_V_1_state) & (1'b1 == MRI_AXIS_V_id_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_id_V_1_state) & (1'b1 == MRI_AXIS_V_id_V_1_vld_in)))) begin
            MRI_AXIS_V_id_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_keep_V_1_ack_out) & (1'b1 == MRI_AXIS_V_keep_V_1_vld_out))) begin
            MRI_AXIS_V_keep_V_1_sel_rd <= ~MRI_AXIS_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_keep_V_1_state) & (1'b0 == MRI_AXIS_V_keep_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_keep_V_1_state) & (1'b0 == MRI_AXIS_V_keep_V_1_vld_in) & (1'b1 == MRI_AXIS_V_keep_V_1_ack_out)))) begin
            MRI_AXIS_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_keep_V_1_state) & (1'b0 == MRI_AXIS_V_keep_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_keep_V_1_state) & (1'b0 == MRI_AXIS_V_keep_V_1_ack_out) & (1'b1 == MRI_AXIS_V_keep_V_1_vld_in)))) begin
            MRI_AXIS_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_keep_V_1_vld_in) & (1'b1 == MRI_AXIS_V_keep_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_keep_V_1_ack_out) & (1'b1 == MRI_AXIS_V_keep_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_keep_V_1_state)) | ((2'd1 == MRI_AXIS_V_keep_V_1_state) & (1'b1 == MRI_AXIS_V_keep_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_keep_V_1_state) & (1'b1 == MRI_AXIS_V_keep_V_1_vld_in)))) begin
            MRI_AXIS_V_keep_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_last_V_1_ack_out) & (1'b1 == MRI_AXIS_V_last_V_1_vld_out))) begin
            MRI_AXIS_V_last_V_1_sel_rd <= ~MRI_AXIS_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_last_V_1_state) & (1'b0 == MRI_AXIS_V_last_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_last_V_1_state) & (1'b0 == MRI_AXIS_V_last_V_1_vld_in) & (1'b1 == MRI_AXIS_V_last_V_1_ack_out)))) begin
            MRI_AXIS_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_last_V_1_state) & (1'b0 == MRI_AXIS_V_last_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_last_V_1_state) & (1'b0 == MRI_AXIS_V_last_V_1_ack_out) & (1'b1 == MRI_AXIS_V_last_V_1_vld_in)))) begin
            MRI_AXIS_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_last_V_1_vld_in) & (1'b1 == MRI_AXIS_V_last_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_last_V_1_ack_out) & (1'b1 == MRI_AXIS_V_last_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_last_V_1_state)) | ((2'd1 == MRI_AXIS_V_last_V_1_state) & (1'b1 == MRI_AXIS_V_last_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_last_V_1_state) & (1'b1 == MRI_AXIS_V_last_V_1_vld_in)))) begin
            MRI_AXIS_V_last_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_strb_V_1_ack_out) & (1'b1 == MRI_AXIS_V_strb_V_1_vld_out))) begin
            MRI_AXIS_V_strb_V_1_sel_rd <= ~MRI_AXIS_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_strb_V_1_state) & (1'b0 == MRI_AXIS_V_strb_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_strb_V_1_state) & (1'b0 == MRI_AXIS_V_strb_V_1_vld_in) & (1'b1 == MRI_AXIS_V_strb_V_1_ack_out)))) begin
            MRI_AXIS_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_strb_V_1_state) & (1'b0 == MRI_AXIS_V_strb_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_strb_V_1_state) & (1'b0 == MRI_AXIS_V_strb_V_1_ack_out) & (1'b1 == MRI_AXIS_V_strb_V_1_vld_in)))) begin
            MRI_AXIS_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_strb_V_1_vld_in) & (1'b1 == MRI_AXIS_V_strb_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_strb_V_1_ack_out) & (1'b1 == MRI_AXIS_V_strb_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_strb_V_1_state)) | ((2'd1 == MRI_AXIS_V_strb_V_1_state) & (1'b1 == MRI_AXIS_V_strb_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_strb_V_1_state) & (1'b1 == MRI_AXIS_V_strb_V_1_vld_in)))) begin
            MRI_AXIS_V_strb_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MRI_AXIS_V_user_V_1_ack_out) & (1'b1 == MRI_AXIS_V_user_V_1_vld_out))) begin
            MRI_AXIS_V_user_V_1_sel_rd <= ~MRI_AXIS_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MRI_AXIS_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MRI_AXIS_V_user_V_1_state) & (1'b0 == MRI_AXIS_V_user_V_1_vld_in)) | ((2'd3 == MRI_AXIS_V_user_V_1_state) & (1'b0 == MRI_AXIS_V_user_V_1_vld_in) & (1'b1 == MRI_AXIS_V_user_V_1_ack_out)))) begin
            MRI_AXIS_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == MRI_AXIS_V_user_V_1_state) & (1'b0 == MRI_AXIS_V_user_V_1_ack_out)) | ((2'd3 == MRI_AXIS_V_user_V_1_state) & (1'b0 == MRI_AXIS_V_user_V_1_ack_out) & (1'b1 == MRI_AXIS_V_user_V_1_vld_in)))) begin
            MRI_AXIS_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MRI_AXIS_V_user_V_1_vld_in) & (1'b1 == MRI_AXIS_V_user_V_1_ack_out)) & ~((1'b0 == MRI_AXIS_V_user_V_1_ack_out) & (1'b1 == MRI_AXIS_V_user_V_1_vld_in)) & (2'd3 == MRI_AXIS_V_user_V_1_state)) | ((2'd1 == MRI_AXIS_V_user_V_1_state) & (1'b1 == MRI_AXIS_V_user_V_1_ack_out)) | ((2'd2 == MRI_AXIS_V_user_V_1_state) & (1'b1 == MRI_AXIS_V_user_V_1_vld_in)))) begin
            MRI_AXIS_V_user_V_1_state <= 2'd3;
        end else begin
            MRI_AXIS_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        SLI_AXIS_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == SLI_AXIS_V_data_V_0_ack_out) & (1'b1 == SLI_AXIS_V_data_V_0_vld_out))) begin
            SLI_AXIS_V_data_V_0_sel_rd <= ~SLI_AXIS_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        SLI_AXIS_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == SLI_AXIS_V_data_V_0_ack_in) & (1'b1 == SLI_AXIS_V_data_V_0_vld_in))) begin
            SLI_AXIS_V_data_V_0_sel_wr <= ~SLI_AXIS_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        SLI_AXIS_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == SLI_AXIS_V_data_V_0_state) & (1'b0 == SLI_AXIS_V_data_V_0_vld_in)) | ((2'd3 == SLI_AXIS_V_data_V_0_state) & (1'b0 == SLI_AXIS_V_data_V_0_vld_in) & (1'b1 == SLI_AXIS_V_data_V_0_ack_out)))) begin
            SLI_AXIS_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == SLI_AXIS_V_data_V_0_state) & (1'b0 == SLI_AXIS_V_data_V_0_ack_out)) | ((2'd3 == SLI_AXIS_V_data_V_0_state) & (1'b0 == SLI_AXIS_V_data_V_0_ack_out) & (1'b1 == SLI_AXIS_V_data_V_0_vld_in)))) begin
            SLI_AXIS_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == SLI_AXIS_V_data_V_0_vld_in) & (1'b1 == SLI_AXIS_V_data_V_0_ack_out)) & ~((1'b0 == SLI_AXIS_V_data_V_0_ack_out) & (1'b1 == SLI_AXIS_V_data_V_0_vld_in)) & (2'd3 == SLI_AXIS_V_data_V_0_state)) | ((2'd1 == SLI_AXIS_V_data_V_0_state) & (1'b1 == SLI_AXIS_V_data_V_0_ack_out)) | ((2'd2 == SLI_AXIS_V_data_V_0_state) & (1'b1 == SLI_AXIS_V_data_V_0_vld_in)))) begin
            SLI_AXIS_V_data_V_0_state <= 2'd3;
        end else begin
            SLI_AXIS_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        SLI_AXIS_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == SLI_AXIS_V_dest_V_0_state) & (1'b0 == SLI_AXIS_V_dest_V_0_vld_in)) | ((2'd3 == SLI_AXIS_V_dest_V_0_state) & (1'b0 == SLI_AXIS_V_dest_V_0_vld_in) & (1'b1 == SLI_AXIS_V_dest_V_0_ack_out)))) begin
            SLI_AXIS_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == SLI_AXIS_V_dest_V_0_state) & (1'b0 == SLI_AXIS_V_dest_V_0_ack_out)) | ((2'd3 == SLI_AXIS_V_dest_V_0_state) & (1'b0 == SLI_AXIS_V_dest_V_0_ack_out) & (1'b1 == SLI_AXIS_V_dest_V_0_vld_in)))) begin
            SLI_AXIS_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == SLI_AXIS_V_dest_V_0_vld_in) & (1'b1 == SLI_AXIS_V_dest_V_0_ack_out)) & ~((1'b0 == SLI_AXIS_V_dest_V_0_ack_out) & (1'b1 == SLI_AXIS_V_dest_V_0_vld_in)) & (2'd3 == SLI_AXIS_V_dest_V_0_state)) | ((2'd1 == SLI_AXIS_V_dest_V_0_state) & (1'b1 == SLI_AXIS_V_dest_V_0_ack_out)) | ((2'd2 == SLI_AXIS_V_dest_V_0_state) & (1'b1 == SLI_AXIS_V_dest_V_0_vld_in)))) begin
            SLI_AXIS_V_dest_V_0_state <= 2'd3;
        end else begin
            SLI_AXIS_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STA_AXIS_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == STA_AXIS_V_data_V_0_ack_out) & (1'b1 == STA_AXIS_V_data_V_0_vld_out))) begin
            STA_AXIS_V_data_V_0_sel_rd <= ~STA_AXIS_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STA_AXIS_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == STA_AXIS_V_data_V_0_ack_in) & (1'b1 == STA_AXIS_V_data_V_0_vld_in))) begin
            STA_AXIS_V_data_V_0_sel_wr <= ~STA_AXIS_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STA_AXIS_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == STA_AXIS_V_data_V_0_state) & (1'b0 == STA_AXIS_V_data_V_0_vld_in)) | ((2'd3 == STA_AXIS_V_data_V_0_state) & (1'b0 == STA_AXIS_V_data_V_0_vld_in) & (1'b1 == STA_AXIS_V_data_V_0_ack_out)))) begin
            STA_AXIS_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == STA_AXIS_V_data_V_0_state) & (1'b0 == STA_AXIS_V_data_V_0_ack_out)) | ((2'd3 == STA_AXIS_V_data_V_0_state) & (1'b0 == STA_AXIS_V_data_V_0_ack_out) & (1'b1 == STA_AXIS_V_data_V_0_vld_in)))) begin
            STA_AXIS_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == STA_AXIS_V_data_V_0_vld_in) & (1'b1 == STA_AXIS_V_data_V_0_ack_out)) & ~((1'b0 == STA_AXIS_V_data_V_0_ack_out) & (1'b1 == STA_AXIS_V_data_V_0_vld_in)) & (2'd3 == STA_AXIS_V_data_V_0_state)) | ((2'd1 == STA_AXIS_V_data_V_0_state) & (1'b1 == STA_AXIS_V_data_V_0_ack_out)) | ((2'd2 == STA_AXIS_V_data_V_0_state) & (1'b1 == STA_AXIS_V_data_V_0_vld_in)))) begin
            STA_AXIS_V_data_V_0_state <= 2'd3;
        end else begin
            STA_AXIS_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STA_AXIS_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == STA_AXIS_V_dest_V_0_state) & (1'b0 == STA_AXIS_V_dest_V_0_vld_in)) | ((2'd3 == STA_AXIS_V_dest_V_0_state) & (1'b0 == STA_AXIS_V_dest_V_0_vld_in) & (1'b1 == STA_AXIS_V_dest_V_0_ack_out)))) begin
            STA_AXIS_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == STA_AXIS_V_dest_V_0_state) & (1'b0 == STA_AXIS_V_dest_V_0_ack_out)) | ((2'd3 == STA_AXIS_V_dest_V_0_state) & (1'b0 == STA_AXIS_V_dest_V_0_ack_out) & (1'b1 == STA_AXIS_V_dest_V_0_vld_in)))) begin
            STA_AXIS_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == STA_AXIS_V_dest_V_0_vld_in) & (1'b1 == STA_AXIS_V_dest_V_0_ack_out)) & ~((1'b0 == STA_AXIS_V_dest_V_0_ack_out) & (1'b1 == STA_AXIS_V_dest_V_0_vld_in)) & (2'd3 == STA_AXIS_V_dest_V_0_state)) | ((2'd1 == STA_AXIS_V_dest_V_0_state) & (1'b1 == STA_AXIS_V_dest_V_0_ack_out)) | ((2'd2 == STA_AXIS_V_dest_V_0_state) & (1'b1 == STA_AXIS_V_dest_V_0_vld_in)))) begin
            STA_AXIS_V_dest_V_0_state <= 2'd3;
        end else begin
            STA_AXIS_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STW_AXIS_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == STW_AXIS_V_data_V_0_ack_out) & (1'b1 == STW_AXIS_V_data_V_0_vld_out))) begin
            STW_AXIS_V_data_V_0_sel_rd <= ~STW_AXIS_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STW_AXIS_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == STW_AXIS_V_data_V_0_ack_in) & (1'b1 == STW_AXIS_V_data_V_0_vld_in))) begin
            STW_AXIS_V_data_V_0_sel_wr <= ~STW_AXIS_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STW_AXIS_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == STW_AXIS_V_data_V_0_state) & (1'b0 == STW_AXIS_V_data_V_0_vld_in)) | ((2'd3 == STW_AXIS_V_data_V_0_state) & (1'b0 == STW_AXIS_V_data_V_0_vld_in) & (1'b1 == STW_AXIS_V_data_V_0_ack_out)))) begin
            STW_AXIS_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == STW_AXIS_V_data_V_0_state) & (1'b0 == STW_AXIS_V_data_V_0_ack_out)) | ((2'd3 == STW_AXIS_V_data_V_0_state) & (1'b0 == STW_AXIS_V_data_V_0_ack_out) & (1'b1 == STW_AXIS_V_data_V_0_vld_in)))) begin
            STW_AXIS_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == STW_AXIS_V_data_V_0_vld_in) & (1'b1 == STW_AXIS_V_data_V_0_ack_out)) & ~((1'b0 == STW_AXIS_V_data_V_0_ack_out) & (1'b1 == STW_AXIS_V_data_V_0_vld_in)) & (2'd3 == STW_AXIS_V_data_V_0_state)) | ((2'd1 == STW_AXIS_V_data_V_0_state) & (1'b1 == STW_AXIS_V_data_V_0_ack_out)) | ((2'd2 == STW_AXIS_V_data_V_0_state) & (1'b1 == STW_AXIS_V_data_V_0_vld_in)))) begin
            STW_AXIS_V_data_V_0_state <= 2'd3;
        end else begin
            STW_AXIS_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        STW_AXIS_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == STW_AXIS_V_dest_V_0_state) & (1'b0 == STW_AXIS_V_dest_V_0_vld_in)) | ((2'd3 == STW_AXIS_V_dest_V_0_state) & (1'b0 == STW_AXIS_V_dest_V_0_vld_in) & (1'b1 == STW_AXIS_V_dest_V_0_ack_out)))) begin
            STW_AXIS_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == STW_AXIS_V_dest_V_0_state) & (1'b0 == STW_AXIS_V_dest_V_0_ack_out)) | ((2'd3 == STW_AXIS_V_dest_V_0_state) & (1'b0 == STW_AXIS_V_dest_V_0_ack_out) & (1'b1 == STW_AXIS_V_dest_V_0_vld_in)))) begin
            STW_AXIS_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == STW_AXIS_V_dest_V_0_vld_in) & (1'b1 == STW_AXIS_V_dest_V_0_ack_out)) & ~((1'b0 == STW_AXIS_V_dest_V_0_ack_out) & (1'b1 == STW_AXIS_V_dest_V_0_vld_in)) & (2'd3 == STW_AXIS_V_dest_V_0_state)) | ((2'd1 == STW_AXIS_V_dest_V_0_state) & (1'b1 == STW_AXIS_V_dest_V_0_ack_out)) | ((2'd2 == STW_AXIS_V_dest_V_0_state) & (1'b1 == STW_AXIS_V_dest_V_0_vld_in)))) begin
            STW_AXIS_V_dest_V_0_state <= 2'd3;
        end else begin
            STW_AXIS_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MBA_AXIS_V_data_V_1_load_A)) begin
        MBA_AXIS_V_data_V_1_payload_A <= res_ba_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MBA_AXIS_V_data_V_1_load_B)) begin
        MBA_AXIS_V_data_V_1_payload_B <= res_ba_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MBW_AXIS_V_data_V_1_load_A)) begin
        MBW_AXIS_V_data_V_1_payload_A <= STW_AXIS_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MBW_AXIS_V_data_V_1_load_B)) begin
        MBW_AXIS_V_data_V_1_payload_B <= STW_AXIS_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MRI_AXIS_V_data_V_1_load_A)) begin
        MRI_AXIS_V_data_V_1_payload_A <= SLI_AXIS_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MRI_AXIS_V_data_V_1_load_B)) begin
        MRI_AXIS_V_data_V_1_payload_B <= SLI_AXIS_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == SLI_AXIS_V_data_V_0_load_A)) begin
        SLI_AXIS_V_data_V_0_payload_A <= SLI_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == SLI_AXIS_V_data_V_0_load_B)) begin
        SLI_AXIS_V_data_V_0_payload_B <= SLI_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == STA_AXIS_V_data_V_0_load_A)) begin
        STA_AXIS_V_data_V_0_payload_A <= STA_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == STA_AXIS_V_data_V_0_load_B)) begin
        STA_AXIS_V_data_V_0_payload_B <= STA_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == STW_AXIS_V_data_V_0_load_A)) begin
        STW_AXIS_V_data_V_0_payload_A <= STW_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == STW_AXIS_V_data_V_0_load_B)) begin
        STW_AXIS_V_data_V_0_payload_B <= STW_AXIS_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        MBA_AXIS_TDATA_blk_n = MBA_AXIS_V_data_V_1_state[1'd1];
    end else begin
        MBA_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == MBA_AXIS_V_data_V_1_sel)) begin
        MBA_AXIS_V_data_V_1_data_out = MBA_AXIS_V_data_V_1_payload_B;
    end else begin
        MBA_AXIS_V_data_V_1_data_out = MBA_AXIS_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_data_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_dest_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_id_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_keep_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_last_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_strb_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBA_AXIS_V_user_V_1_vld_in = 1'b1;
    end else begin
        MBA_AXIS_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        MBW_AXIS_TDATA_blk_n = MBW_AXIS_V_data_V_1_state[1'd1];
    end else begin
        MBW_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == MBW_AXIS_V_data_V_1_sel)) begin
        MBW_AXIS_V_data_V_1_data_out = MBW_AXIS_V_data_V_1_payload_B;
    end else begin
        MBW_AXIS_V_data_V_1_data_out = MBW_AXIS_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_data_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_dest_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_id_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_keep_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_last_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_strb_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MBW_AXIS_V_user_V_1_vld_in = 1'b1;
    end else begin
        MBW_AXIS_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        MRI_AXIS_TDATA_blk_n = MRI_AXIS_V_data_V_1_state[1'd1];
    end else begin
        MRI_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == MRI_AXIS_V_data_V_1_sel)) begin
        MRI_AXIS_V_data_V_1_data_out = MRI_AXIS_V_data_V_1_payload_B;
    end else begin
        MRI_AXIS_V_data_V_1_data_out = MRI_AXIS_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_data_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_dest_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_id_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_keep_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_last_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_strb_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        MRI_AXIS_V_user_V_1_vld_in = 1'b1;
    end else begin
        MRI_AXIS_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        SLI_AXIS_TDATA_blk_n = SLI_AXIS_V_data_V_0_state[1'd0];
    end else begin
        SLI_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        SLI_AXIS_V_data_V_0_ack_out = 1'b1;
    end else begin
        SLI_AXIS_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == SLI_AXIS_V_data_V_0_sel)) begin
        SLI_AXIS_V_data_V_0_data_out = SLI_AXIS_V_data_V_0_payload_B;
    end else begin
        SLI_AXIS_V_data_V_0_data_out = SLI_AXIS_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        SLI_AXIS_V_dest_V_0_ack_out = 1'b1;
    end else begin
        SLI_AXIS_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        STA_AXIS_TDATA_blk_n = STA_AXIS_V_data_V_0_state[1'd0];
    end else begin
        STA_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        STA_AXIS_V_data_V_0_ack_out = 1'b1;
    end else begin
        STA_AXIS_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == STA_AXIS_V_data_V_0_sel)) begin
        STA_AXIS_V_data_V_0_data_out = STA_AXIS_V_data_V_0_payload_B;
    end else begin
        STA_AXIS_V_data_V_0_data_out = STA_AXIS_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        STA_AXIS_V_dest_V_0_ack_out = 1'b1;
    end else begin
        STA_AXIS_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        STW_AXIS_TDATA_blk_n = STW_AXIS_V_data_V_0_state[1'd0];
    end else begin
        STW_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        STW_AXIS_V_data_V_0_ack_out = 1'b1;
    end else begin
        STW_AXIS_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == STW_AXIS_V_data_V_0_sel)) begin
        STW_AXIS_V_data_V_0_data_out = STW_AXIS_V_data_V_0_payload_B;
    end else begin
        STW_AXIS_V_data_V_0_data_out = STW_AXIS_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        STW_AXIS_V_dest_V_0_ack_out = 1'b1;
    end else begin
        STW_AXIS_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == MRI_AXIS_V_dest_V_1_ack_in) | (1'b0 == MRI_AXIS_V_id_V_1_ack_in) | (1'b0 == MRI_AXIS_V_last_V_1_ack_in) | (1'b0 == MRI_AXIS_V_user_V_1_ack_in) | (1'b0 == MRI_AXIS_V_strb_V_1_ack_in) | (1'b0 == MRI_AXIS_V_keep_V_1_ack_in) | (1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBA_AXIS_V_id_V_1_ack_in) | (1'b0 == MBA_AXIS_V_last_V_1_ack_in) | (1'b0 == MBA_AXIS_V_user_V_1_ack_in) | (1'b0 == MBA_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBA_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBW_AXIS_V_id_V_1_ack_in) | (1'b0 == MBW_AXIS_V_last_V_1_ack_in) | (1'b0 == MBW_AXIS_V_user_V_1_ack_in) | (1'b0 == MBW_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBW_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (MRI_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == MRI_AXIS_V_dest_V_1_ack_in) | (1'b0 == MRI_AXIS_V_id_V_1_ack_in) | (1'b0 == MRI_AXIS_V_last_V_1_ack_in) | (1'b0 == MRI_AXIS_V_user_V_1_ack_in) | (1'b0 == MRI_AXIS_V_strb_V_1_ack_in) | (1'b0 == MRI_AXIS_V_keep_V_1_ack_in) | (1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBA_AXIS_V_id_V_1_ack_in) | (1'b0 == MBA_AXIS_V_last_V_1_ack_in) | (1'b0 == MBA_AXIS_V_user_V_1_ack_in) | (1'b0 == MBA_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBA_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBW_AXIS_V_id_V_1_ack_in) | (1'b0 == MBW_AXIS_V_last_V_1_ack_in) | (1'b0 == MBW_AXIS_V_user_V_1_ack_in) | (1'b0 == MBW_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBW_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (MRI_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == MRI_AXIS_V_dest_V_1_ack_in) | (1'b0 == MRI_AXIS_V_id_V_1_ack_in) | (1'b0 == MRI_AXIS_V_last_V_1_ack_in) | (1'b0 == MRI_AXIS_V_user_V_1_ack_in) | (1'b0 == MRI_AXIS_V_strb_V_1_ack_in) | (1'b0 == MRI_AXIS_V_keep_V_1_ack_in) | (1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBA_AXIS_V_id_V_1_ack_in) | (1'b0 == MBA_AXIS_V_last_V_1_ack_in) | (1'b0 == MBA_AXIS_V_user_V_1_ack_in) | (1'b0 == MBA_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBA_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBW_AXIS_V_id_V_1_ack_in) | (1'b0 == MBW_AXIS_V_last_V_1_ack_in) | (1'b0 == MBW_AXIS_V_user_V_1_ack_in) | (1'b0 == MBW_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBW_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (MRI_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MRI_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBA_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_dest_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_id_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_last_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_user_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_strb_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_keep_V_1_state[1'd0] == 1'b0) & (MBW_AXIS_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MBA_AXIS_TDATA = MBA_AXIS_V_data_V_1_data_out;

assign MBA_AXIS_TDEST = MBA_AXIS_V_dest_V_1_data_out;

assign MBA_AXIS_TID = MBA_AXIS_V_id_V_1_data_out;

assign MBA_AXIS_TKEEP = MBA_AXIS_V_keep_V_1_data_out;

assign MBA_AXIS_TLAST = MBA_AXIS_V_last_V_1_data_out;

assign MBA_AXIS_TSTRB = MBA_AXIS_V_strb_V_1_data_out;

assign MBA_AXIS_TUSER = MBA_AXIS_V_user_V_1_data_out;

assign MBA_AXIS_TVALID = MBA_AXIS_V_dest_V_1_state[1'd0];

assign MBA_AXIS_V_data_V_1_ack_in = MBA_AXIS_V_data_V_1_state[1'd1];

assign MBA_AXIS_V_data_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_data_V_1_load_A = (~MBA_AXIS_V_data_V_1_sel_wr & MBA_AXIS_V_data_V_1_state_cmp_full);

assign MBA_AXIS_V_data_V_1_load_B = (MBA_AXIS_V_data_V_1_state_cmp_full & MBA_AXIS_V_data_V_1_sel_wr);

assign MBA_AXIS_V_data_V_1_sel = MBA_AXIS_V_data_V_1_sel_rd;

assign MBA_AXIS_V_data_V_1_state_cmp_full = ((MBA_AXIS_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MBA_AXIS_V_data_V_1_vld_out = MBA_AXIS_V_data_V_1_state[1'd0];

assign MBA_AXIS_V_dest_V_1_ack_in = MBA_AXIS_V_dest_V_1_state[1'd1];

assign MBA_AXIS_V_dest_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_dest_V_1_data_out = 5'd0;

assign MBA_AXIS_V_dest_V_1_sel = MBA_AXIS_V_dest_V_1_sel_rd;

assign MBA_AXIS_V_dest_V_1_vld_out = MBA_AXIS_V_dest_V_1_state[1'd0];

assign MBA_AXIS_V_id_V_1_ack_in = MBA_AXIS_V_id_V_1_state[1'd1];

assign MBA_AXIS_V_id_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_id_V_1_data_out = 5'd0;

assign MBA_AXIS_V_id_V_1_sel = MBA_AXIS_V_id_V_1_sel_rd;

assign MBA_AXIS_V_id_V_1_vld_out = MBA_AXIS_V_id_V_1_state[1'd0];

assign MBA_AXIS_V_keep_V_1_ack_in = MBA_AXIS_V_keep_V_1_state[1'd1];

assign MBA_AXIS_V_keep_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_keep_V_1_data_out = 2'd3;

assign MBA_AXIS_V_keep_V_1_sel = MBA_AXIS_V_keep_V_1_sel_rd;

assign MBA_AXIS_V_keep_V_1_vld_out = MBA_AXIS_V_keep_V_1_state[1'd0];

assign MBA_AXIS_V_last_V_1_ack_in = MBA_AXIS_V_last_V_1_state[1'd1];

assign MBA_AXIS_V_last_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_last_V_1_data_out = 1'd0;

assign MBA_AXIS_V_last_V_1_sel = MBA_AXIS_V_last_V_1_sel_rd;

assign MBA_AXIS_V_last_V_1_vld_out = MBA_AXIS_V_last_V_1_state[1'd0];

assign MBA_AXIS_V_strb_V_1_ack_in = MBA_AXIS_V_strb_V_1_state[1'd1];

assign MBA_AXIS_V_strb_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_strb_V_1_data_out = 2'd3;

assign MBA_AXIS_V_strb_V_1_sel = MBA_AXIS_V_strb_V_1_sel_rd;

assign MBA_AXIS_V_strb_V_1_vld_out = MBA_AXIS_V_strb_V_1_state[1'd0];

assign MBA_AXIS_V_user_V_1_ack_in = MBA_AXIS_V_user_V_1_state[1'd1];

assign MBA_AXIS_V_user_V_1_ack_out = MBA_AXIS_TREADY;

assign MBA_AXIS_V_user_V_1_data_out = 4'd0;

assign MBA_AXIS_V_user_V_1_sel = MBA_AXIS_V_user_V_1_sel_rd;

assign MBA_AXIS_V_user_V_1_vld_out = MBA_AXIS_V_user_V_1_state[1'd0];

assign MBW_AXIS_TDATA = MBW_AXIS_V_data_V_1_data_out;

assign MBW_AXIS_TDEST = MBW_AXIS_V_dest_V_1_data_out;

assign MBW_AXIS_TID = MBW_AXIS_V_id_V_1_data_out;

assign MBW_AXIS_TKEEP = MBW_AXIS_V_keep_V_1_data_out;

assign MBW_AXIS_TLAST = MBW_AXIS_V_last_V_1_data_out;

assign MBW_AXIS_TSTRB = MBW_AXIS_V_strb_V_1_data_out;

assign MBW_AXIS_TUSER = MBW_AXIS_V_user_V_1_data_out;

assign MBW_AXIS_TVALID = MBW_AXIS_V_dest_V_1_state[1'd0];

assign MBW_AXIS_V_data_V_1_ack_in = MBW_AXIS_V_data_V_1_state[1'd1];

assign MBW_AXIS_V_data_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_data_V_1_load_A = (~MBW_AXIS_V_data_V_1_sel_wr & MBW_AXIS_V_data_V_1_state_cmp_full);

assign MBW_AXIS_V_data_V_1_load_B = (MBW_AXIS_V_data_V_1_state_cmp_full & MBW_AXIS_V_data_V_1_sel_wr);

assign MBW_AXIS_V_data_V_1_sel = MBW_AXIS_V_data_V_1_sel_rd;

assign MBW_AXIS_V_data_V_1_state_cmp_full = ((MBW_AXIS_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MBW_AXIS_V_data_V_1_vld_out = MBW_AXIS_V_data_V_1_state[1'd0];

assign MBW_AXIS_V_dest_V_1_ack_in = MBW_AXIS_V_dest_V_1_state[1'd1];

assign MBW_AXIS_V_dest_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_dest_V_1_data_out = 5'd0;

assign MBW_AXIS_V_dest_V_1_sel = MBW_AXIS_V_dest_V_1_sel_rd;

assign MBW_AXIS_V_dest_V_1_vld_out = MBW_AXIS_V_dest_V_1_state[1'd0];

assign MBW_AXIS_V_id_V_1_ack_in = MBW_AXIS_V_id_V_1_state[1'd1];

assign MBW_AXIS_V_id_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_id_V_1_data_out = 5'd0;

assign MBW_AXIS_V_id_V_1_sel = MBW_AXIS_V_id_V_1_sel_rd;

assign MBW_AXIS_V_id_V_1_vld_out = MBW_AXIS_V_id_V_1_state[1'd0];

assign MBW_AXIS_V_keep_V_1_ack_in = MBW_AXIS_V_keep_V_1_state[1'd1];

assign MBW_AXIS_V_keep_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_keep_V_1_data_out = 1'd1;

assign MBW_AXIS_V_keep_V_1_sel = MBW_AXIS_V_keep_V_1_sel_rd;

assign MBW_AXIS_V_keep_V_1_vld_out = MBW_AXIS_V_keep_V_1_state[1'd0];

assign MBW_AXIS_V_last_V_1_ack_in = MBW_AXIS_V_last_V_1_state[1'd1];

assign MBW_AXIS_V_last_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_last_V_1_data_out = 1'd0;

assign MBW_AXIS_V_last_V_1_sel = MBW_AXIS_V_last_V_1_sel_rd;

assign MBW_AXIS_V_last_V_1_vld_out = MBW_AXIS_V_last_V_1_state[1'd0];

assign MBW_AXIS_V_strb_V_1_ack_in = MBW_AXIS_V_strb_V_1_state[1'd1];

assign MBW_AXIS_V_strb_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_strb_V_1_data_out = 1'd1;

assign MBW_AXIS_V_strb_V_1_sel = MBW_AXIS_V_strb_V_1_sel_rd;

assign MBW_AXIS_V_strb_V_1_vld_out = MBW_AXIS_V_strb_V_1_state[1'd0];

assign MBW_AXIS_V_user_V_1_ack_in = MBW_AXIS_V_user_V_1_state[1'd1];

assign MBW_AXIS_V_user_V_1_ack_out = MBW_AXIS_TREADY;

assign MBW_AXIS_V_user_V_1_data_out = 4'd0;

assign MBW_AXIS_V_user_V_1_sel = MBW_AXIS_V_user_V_1_sel_rd;

assign MBW_AXIS_V_user_V_1_vld_out = MBW_AXIS_V_user_V_1_state[1'd0];

assign MRI_AXIS_TDATA = MRI_AXIS_V_data_V_1_data_out;

assign MRI_AXIS_TDEST = MRI_AXIS_V_dest_V_1_data_out;

assign MRI_AXIS_TID = MRI_AXIS_V_id_V_1_data_out;

assign MRI_AXIS_TKEEP = MRI_AXIS_V_keep_V_1_data_out;

assign MRI_AXIS_TLAST = MRI_AXIS_V_last_V_1_data_out;

assign MRI_AXIS_TSTRB = MRI_AXIS_V_strb_V_1_data_out;

assign MRI_AXIS_TUSER = MRI_AXIS_V_user_V_1_data_out;

assign MRI_AXIS_TVALID = MRI_AXIS_V_dest_V_1_state[1'd0];

assign MRI_AXIS_V_data_V_1_ack_in = MRI_AXIS_V_data_V_1_state[1'd1];

assign MRI_AXIS_V_data_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_data_V_1_load_A = (~MRI_AXIS_V_data_V_1_sel_wr & MRI_AXIS_V_data_V_1_state_cmp_full);

assign MRI_AXIS_V_data_V_1_load_B = (MRI_AXIS_V_data_V_1_state_cmp_full & MRI_AXIS_V_data_V_1_sel_wr);

assign MRI_AXIS_V_data_V_1_sel = MRI_AXIS_V_data_V_1_sel_rd;

assign MRI_AXIS_V_data_V_1_state_cmp_full = ((MRI_AXIS_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MRI_AXIS_V_data_V_1_vld_out = MRI_AXIS_V_data_V_1_state[1'd0];

assign MRI_AXIS_V_dest_V_1_ack_in = MRI_AXIS_V_dest_V_1_state[1'd1];

assign MRI_AXIS_V_dest_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_dest_V_1_data_out = 5'd0;

assign MRI_AXIS_V_dest_V_1_sel = MRI_AXIS_V_dest_V_1_sel_rd;

assign MRI_AXIS_V_dest_V_1_vld_out = MRI_AXIS_V_dest_V_1_state[1'd0];

assign MRI_AXIS_V_id_V_1_ack_in = MRI_AXIS_V_id_V_1_state[1'd1];

assign MRI_AXIS_V_id_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_id_V_1_data_out = 5'd0;

assign MRI_AXIS_V_id_V_1_sel = MRI_AXIS_V_id_V_1_sel_rd;

assign MRI_AXIS_V_id_V_1_vld_out = MRI_AXIS_V_id_V_1_state[1'd0];

assign MRI_AXIS_V_keep_V_1_ack_in = MRI_AXIS_V_keep_V_1_state[1'd1];

assign MRI_AXIS_V_keep_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_keep_V_1_data_out = 1'd1;

assign MRI_AXIS_V_keep_V_1_sel = MRI_AXIS_V_keep_V_1_sel_rd;

assign MRI_AXIS_V_keep_V_1_vld_out = MRI_AXIS_V_keep_V_1_state[1'd0];

assign MRI_AXIS_V_last_V_1_ack_in = MRI_AXIS_V_last_V_1_state[1'd1];

assign MRI_AXIS_V_last_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_last_V_1_data_out = 1'd0;

assign MRI_AXIS_V_last_V_1_sel = MRI_AXIS_V_last_V_1_sel_rd;

assign MRI_AXIS_V_last_V_1_vld_out = MRI_AXIS_V_last_V_1_state[1'd0];

assign MRI_AXIS_V_strb_V_1_ack_in = MRI_AXIS_V_strb_V_1_state[1'd1];

assign MRI_AXIS_V_strb_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_strb_V_1_data_out = 1'd1;

assign MRI_AXIS_V_strb_V_1_sel = MRI_AXIS_V_strb_V_1_sel_rd;

assign MRI_AXIS_V_strb_V_1_vld_out = MRI_AXIS_V_strb_V_1_state[1'd0];

assign MRI_AXIS_V_user_V_1_ack_in = MRI_AXIS_V_user_V_1_state[1'd1];

assign MRI_AXIS_V_user_V_1_ack_out = MRI_AXIS_TREADY;

assign MRI_AXIS_V_user_V_1_data_out = 4'd0;

assign MRI_AXIS_V_user_V_1_sel = MRI_AXIS_V_user_V_1_sel_rd;

assign MRI_AXIS_V_user_V_1_vld_out = MRI_AXIS_V_user_V_1_state[1'd0];

assign SLI_AXIS_TREADY = SLI_AXIS_V_dest_V_0_state[1'd1];

assign SLI_AXIS_V_data_V_0_ack_in = SLI_AXIS_V_data_V_0_state[1'd1];

assign SLI_AXIS_V_data_V_0_load_A = (~SLI_AXIS_V_data_V_0_sel_wr & SLI_AXIS_V_data_V_0_state_cmp_full);

assign SLI_AXIS_V_data_V_0_load_B = (SLI_AXIS_V_data_V_0_state_cmp_full & SLI_AXIS_V_data_V_0_sel_wr);

assign SLI_AXIS_V_data_V_0_sel = SLI_AXIS_V_data_V_0_sel_rd;

assign SLI_AXIS_V_data_V_0_state_cmp_full = ((SLI_AXIS_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign SLI_AXIS_V_data_V_0_vld_in = SLI_AXIS_TVALID;

assign SLI_AXIS_V_data_V_0_vld_out = SLI_AXIS_V_data_V_0_state[1'd0];

assign SLI_AXIS_V_dest_V_0_vld_in = SLI_AXIS_TVALID;

assign STA_AXIS_TREADY = STA_AXIS_V_dest_V_0_state[1'd1];

assign STA_AXIS_V_data_V_0_ack_in = STA_AXIS_V_data_V_0_state[1'd1];

assign STA_AXIS_V_data_V_0_load_A = (~STA_AXIS_V_data_V_0_sel_wr & STA_AXIS_V_data_V_0_state_cmp_full);

assign STA_AXIS_V_data_V_0_load_B = (STA_AXIS_V_data_V_0_state_cmp_full & STA_AXIS_V_data_V_0_sel_wr);

assign STA_AXIS_V_data_V_0_sel = STA_AXIS_V_data_V_0_sel_rd;

assign STA_AXIS_V_data_V_0_state_cmp_full = ((STA_AXIS_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign STA_AXIS_V_data_V_0_vld_in = STA_AXIS_TVALID;

assign STA_AXIS_V_data_V_0_vld_out = STA_AXIS_V_data_V_0_state[1'd0];

assign STA_AXIS_V_dest_V_0_vld_in = STA_AXIS_TVALID;

assign STW_AXIS_TREADY = STW_AXIS_V_dest_V_0_state[1'd1];

assign STW_AXIS_V_data_V_0_ack_in = STW_AXIS_V_data_V_0_state[1'd1];

assign STW_AXIS_V_data_V_0_load_A = (~STW_AXIS_V_data_V_0_sel_wr & STW_AXIS_V_data_V_0_state_cmp_full);

assign STW_AXIS_V_data_V_0_load_B = (STW_AXIS_V_data_V_0_state_cmp_full & STW_AXIS_V_data_V_0_sel_wr);

assign STW_AXIS_V_data_V_0_sel = STW_AXIS_V_data_V_0_sel_rd;

assign STW_AXIS_V_data_V_0_state_cmp_full = ((STW_AXIS_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign STW_AXIS_V_data_V_0_vld_in = STW_AXIS_TVALID;

assign STW_AXIS_V_data_V_0_vld_out = STW_AXIS_V_data_V_0_state[1'd0];

assign STW_AXIS_V_dest_V_0_vld_in = STW_AXIS_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == STW_AXIS_V_data_V_0_vld_out) | (1'b0 == SLI_AXIS_V_data_V_0_vld_out) | (1'b0 == STA_AXIS_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state1_io = ((1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == MRI_AXIS_V_dest_V_1_ack_in) | (1'b0 == MRI_AXIS_V_id_V_1_ack_in) | (1'b0 == MRI_AXIS_V_last_V_1_ack_in) | (1'b0 == MRI_AXIS_V_user_V_1_ack_in) | (1'b0 == MRI_AXIS_V_strb_V_1_ack_in) | (1'b0 == MRI_AXIS_V_keep_V_1_ack_in) | (1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBA_AXIS_V_id_V_1_ack_in) | (1'b0 == MBA_AXIS_V_last_V_1_ack_in) | (1'b0 == MBA_AXIS_V_user_V_1_ack_in) | (1'b0 == MBA_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBA_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_dest_V_1_ack_in) | (1'b0 == MBW_AXIS_V_id_V_1_ack_in) | (1'b0 == MBW_AXIS_V_last_V_1_ack_in) | (1'b0 == MBW_AXIS_V_user_V_1_ack_in) | (1'b0 == MBW_AXIS_V_strb_V_1_ack_in) | (1'b0 == MBW_AXIS_V_keep_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == MRI_AXIS_V_data_V_1_ack_in) | (1'b0 == MBA_AXIS_V_data_V_1_ack_in) | (1'b0 == MBW_AXIS_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign res_ba_fu_325_p2 = (STA_AXIS_V_data_V_0_data_out + prod_iw_fu_319_p2);

endmodule //pe
