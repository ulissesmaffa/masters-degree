// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pe_HH_
#define _pe_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pe_mul_8s_8s_16_1_1.h"
#include "pe_CONTROL_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct pe : public sc_module {
    // Port declarations 74
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<8> > SLI_AXIS_TDATA;
    sc_in< sc_logic > SLI_AXIS_TVALID;
    sc_out< sc_logic > SLI_AXIS_TREADY;
    sc_in< sc_lv<1> > SLI_AXIS_TKEEP;
    sc_in< sc_lv<1> > SLI_AXIS_TSTRB;
    sc_in< sc_lv<4> > SLI_AXIS_TUSER;
    sc_in< sc_lv<1> > SLI_AXIS_TLAST;
    sc_in< sc_lv<5> > SLI_AXIS_TID;
    sc_in< sc_lv<5> > SLI_AXIS_TDEST;
    sc_out< sc_lv<8> > MRI_AXIS_TDATA;
    sc_out< sc_logic > MRI_AXIS_TVALID;
    sc_in< sc_logic > MRI_AXIS_TREADY;
    sc_out< sc_lv<1> > MRI_AXIS_TKEEP;
    sc_out< sc_lv<1> > MRI_AXIS_TSTRB;
    sc_out< sc_lv<4> > MRI_AXIS_TUSER;
    sc_out< sc_lv<1> > MRI_AXIS_TLAST;
    sc_out< sc_lv<5> > MRI_AXIS_TID;
    sc_out< sc_lv<5> > MRI_AXIS_TDEST;
    sc_in< sc_lv<8> > STW_AXIS_TDATA;
    sc_in< sc_logic > STW_AXIS_TVALID;
    sc_out< sc_logic > STW_AXIS_TREADY;
    sc_in< sc_lv<1> > STW_AXIS_TKEEP;
    sc_in< sc_lv<1> > STW_AXIS_TSTRB;
    sc_in< sc_lv<4> > STW_AXIS_TUSER;
    sc_in< sc_lv<1> > STW_AXIS_TLAST;
    sc_in< sc_lv<5> > STW_AXIS_TID;
    sc_in< sc_lv<5> > STW_AXIS_TDEST;
    sc_out< sc_lv<8> > MBW_AXIS_TDATA;
    sc_out< sc_logic > MBW_AXIS_TVALID;
    sc_in< sc_logic > MBW_AXIS_TREADY;
    sc_out< sc_lv<1> > MBW_AXIS_TKEEP;
    sc_out< sc_lv<1> > MBW_AXIS_TSTRB;
    sc_out< sc_lv<4> > MBW_AXIS_TUSER;
    sc_out< sc_lv<1> > MBW_AXIS_TLAST;
    sc_out< sc_lv<5> > MBW_AXIS_TID;
    sc_out< sc_lv<5> > MBW_AXIS_TDEST;
    sc_in< sc_lv<16> > STA_AXIS_TDATA;
    sc_in< sc_logic > STA_AXIS_TVALID;
    sc_out< sc_logic > STA_AXIS_TREADY;
    sc_in< sc_lv<2> > STA_AXIS_TKEEP;
    sc_in< sc_lv<2> > STA_AXIS_TSTRB;
    sc_in< sc_lv<4> > STA_AXIS_TUSER;
    sc_in< sc_lv<1> > STA_AXIS_TLAST;
    sc_in< sc_lv<5> > STA_AXIS_TID;
    sc_in< sc_lv<5> > STA_AXIS_TDEST;
    sc_out< sc_lv<16> > MBA_AXIS_TDATA;
    sc_out< sc_logic > MBA_AXIS_TVALID;
    sc_in< sc_logic > MBA_AXIS_TREADY;
    sc_out< sc_lv<2> > MBA_AXIS_TKEEP;
    sc_out< sc_lv<2> > MBA_AXIS_TSTRB;
    sc_out< sc_lv<4> > MBA_AXIS_TUSER;
    sc_out< sc_lv<1> > MBA_AXIS_TLAST;
    sc_out< sc_lv<5> > MBA_AXIS_TID;
    sc_out< sc_lv<5> > MBA_AXIS_TDEST;
    sc_in< sc_logic > s_axi_CONTROL_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_CONTROL_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_CONTROL_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_CONTROL_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_CONTROL_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_CONTROL_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    pe(sc_module_name name);
    SC_HAS_PROCESS(pe);

    ~pe();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    pe_CONTROL_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* pe_CONTROL_s_axi_U;
    pe_mul_8s_8s_16_1_1<1,1,8,8,16>* pe_mul_8s_8s_16_1_1_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > SLI_AXIS_V_data_V_0_data_out;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_vld_in;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_vld_out;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_ack_in;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_ack_out;
    sc_signal< sc_lv<8> > SLI_AXIS_V_data_V_0_payload_A;
    sc_signal< sc_lv<8> > SLI_AXIS_V_data_V_0_payload_B;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_sel_rd;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_sel_wr;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_sel;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_load_A;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > SLI_AXIS_V_data_V_0_state;
    sc_signal< sc_logic > SLI_AXIS_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > SLI_AXIS_V_dest_V_0_vld_in;
    sc_signal< sc_logic > SLI_AXIS_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > SLI_AXIS_V_dest_V_0_state;
    sc_signal< sc_lv<8> > MRI_AXIS_V_data_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_ack_out;
    sc_signal< sc_lv<8> > MRI_AXIS_V_data_V_1_payload_A;
    sc_signal< sc_lv<8> > MRI_AXIS_V_data_V_1_payload_B;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_sel_wr;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_sel;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_load_A;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > MRI_AXIS_V_data_V_1_state;
    sc_signal< sc_logic > MRI_AXIS_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > MRI_AXIS_V_keep_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_keep_V_1_state;
    sc_signal< sc_lv<1> > MRI_AXIS_V_strb_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_strb_V_1_state;
    sc_signal< sc_lv<4> > MRI_AXIS_V_user_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_user_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_user_V_1_state;
    sc_signal< sc_lv<1> > MRI_AXIS_V_last_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_last_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_last_V_1_state;
    sc_signal< sc_lv<5> > MRI_AXIS_V_id_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_id_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_id_V_1_state;
    sc_signal< sc_lv<5> > MRI_AXIS_V_dest_V_1_data_out;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_vld_in;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_vld_out;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_ack_in;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_ack_out;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > MRI_AXIS_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > MRI_AXIS_V_dest_V_1_state;
    sc_signal< sc_lv<8> > STW_AXIS_V_data_V_0_data_out;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_vld_in;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_vld_out;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_ack_in;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_ack_out;
    sc_signal< sc_lv<8> > STW_AXIS_V_data_V_0_payload_A;
    sc_signal< sc_lv<8> > STW_AXIS_V_data_V_0_payload_B;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_sel_rd;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_sel_wr;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_sel;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_load_A;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > STW_AXIS_V_data_V_0_state;
    sc_signal< sc_logic > STW_AXIS_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > STW_AXIS_V_dest_V_0_vld_in;
    sc_signal< sc_logic > STW_AXIS_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > STW_AXIS_V_dest_V_0_state;
    sc_signal< sc_lv<8> > MBW_AXIS_V_data_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_ack_out;
    sc_signal< sc_lv<8> > MBW_AXIS_V_data_V_1_payload_A;
    sc_signal< sc_lv<8> > MBW_AXIS_V_data_V_1_payload_B;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_sel_wr;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_sel;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_load_A;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > MBW_AXIS_V_data_V_1_state;
    sc_signal< sc_logic > MBW_AXIS_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > MBW_AXIS_V_keep_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_keep_V_1_state;
    sc_signal< sc_lv<1> > MBW_AXIS_V_strb_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_strb_V_1_state;
    sc_signal< sc_lv<4> > MBW_AXIS_V_user_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_user_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_user_V_1_state;
    sc_signal< sc_lv<1> > MBW_AXIS_V_last_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_last_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_last_V_1_state;
    sc_signal< sc_lv<5> > MBW_AXIS_V_id_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_id_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_id_V_1_state;
    sc_signal< sc_lv<5> > MBW_AXIS_V_dest_V_1_data_out;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_vld_in;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_vld_out;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_ack_in;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_ack_out;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > MBW_AXIS_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > MBW_AXIS_V_dest_V_1_state;
    sc_signal< sc_lv<16> > STA_AXIS_V_data_V_0_data_out;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_vld_in;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_vld_out;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_ack_in;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_ack_out;
    sc_signal< sc_lv<16> > STA_AXIS_V_data_V_0_payload_A;
    sc_signal< sc_lv<16> > STA_AXIS_V_data_V_0_payload_B;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_sel_rd;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_sel_wr;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_sel;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_load_A;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > STA_AXIS_V_data_V_0_state;
    sc_signal< sc_logic > STA_AXIS_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > STA_AXIS_V_dest_V_0_vld_in;
    sc_signal< sc_logic > STA_AXIS_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > STA_AXIS_V_dest_V_0_state;
    sc_signal< sc_lv<16> > MBA_AXIS_V_data_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_ack_out;
    sc_signal< sc_lv<16> > MBA_AXIS_V_data_V_1_payload_A;
    sc_signal< sc_lv<16> > MBA_AXIS_V_data_V_1_payload_B;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_sel_wr;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_sel;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_load_A;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > MBA_AXIS_V_data_V_1_state;
    sc_signal< sc_logic > MBA_AXIS_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > MBA_AXIS_V_keep_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_keep_V_1_state;
    sc_signal< sc_lv<2> > MBA_AXIS_V_strb_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_strb_V_1_state;
    sc_signal< sc_lv<4> > MBA_AXIS_V_user_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_user_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_user_V_1_state;
    sc_signal< sc_lv<1> > MBA_AXIS_V_last_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_last_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_last_V_1_state;
    sc_signal< sc_lv<5> > MBA_AXIS_V_id_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_id_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_id_V_1_state;
    sc_signal< sc_lv<5> > MBA_AXIS_V_dest_V_1_data_out;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_vld_in;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_vld_out;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_ack_in;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_ack_out;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > MBA_AXIS_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > MBA_AXIS_V_dest_V_1_state;
    sc_signal< sc_logic > SLI_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > MRI_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > STW_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > MBW_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > STA_AXIS_TDATA_blk_n;
    sc_signal< sc_logic > MBA_AXIS_TDATA_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<16> > res_ba_fu_325_p2;
    sc_signal< sc_lv<16> > prod_iw_fu_319_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_MBA_AXIS_TDATA();
    void thread_MBA_AXIS_TDATA_blk_n();
    void thread_MBA_AXIS_TDEST();
    void thread_MBA_AXIS_TID();
    void thread_MBA_AXIS_TKEEP();
    void thread_MBA_AXIS_TLAST();
    void thread_MBA_AXIS_TSTRB();
    void thread_MBA_AXIS_TUSER();
    void thread_MBA_AXIS_TVALID();
    void thread_MBA_AXIS_V_data_V_1_ack_in();
    void thread_MBA_AXIS_V_data_V_1_ack_out();
    void thread_MBA_AXIS_V_data_V_1_data_out();
    void thread_MBA_AXIS_V_data_V_1_load_A();
    void thread_MBA_AXIS_V_data_V_1_load_B();
    void thread_MBA_AXIS_V_data_V_1_sel();
    void thread_MBA_AXIS_V_data_V_1_state_cmp_full();
    void thread_MBA_AXIS_V_data_V_1_vld_in();
    void thread_MBA_AXIS_V_data_V_1_vld_out();
    void thread_MBA_AXIS_V_dest_V_1_ack_in();
    void thread_MBA_AXIS_V_dest_V_1_ack_out();
    void thread_MBA_AXIS_V_dest_V_1_data_out();
    void thread_MBA_AXIS_V_dest_V_1_sel();
    void thread_MBA_AXIS_V_dest_V_1_vld_in();
    void thread_MBA_AXIS_V_dest_V_1_vld_out();
    void thread_MBA_AXIS_V_id_V_1_ack_in();
    void thread_MBA_AXIS_V_id_V_1_ack_out();
    void thread_MBA_AXIS_V_id_V_1_data_out();
    void thread_MBA_AXIS_V_id_V_1_sel();
    void thread_MBA_AXIS_V_id_V_1_vld_in();
    void thread_MBA_AXIS_V_id_V_1_vld_out();
    void thread_MBA_AXIS_V_keep_V_1_ack_in();
    void thread_MBA_AXIS_V_keep_V_1_ack_out();
    void thread_MBA_AXIS_V_keep_V_1_data_out();
    void thread_MBA_AXIS_V_keep_V_1_sel();
    void thread_MBA_AXIS_V_keep_V_1_vld_in();
    void thread_MBA_AXIS_V_keep_V_1_vld_out();
    void thread_MBA_AXIS_V_last_V_1_ack_in();
    void thread_MBA_AXIS_V_last_V_1_ack_out();
    void thread_MBA_AXIS_V_last_V_1_data_out();
    void thread_MBA_AXIS_V_last_V_1_sel();
    void thread_MBA_AXIS_V_last_V_1_vld_in();
    void thread_MBA_AXIS_V_last_V_1_vld_out();
    void thread_MBA_AXIS_V_strb_V_1_ack_in();
    void thread_MBA_AXIS_V_strb_V_1_ack_out();
    void thread_MBA_AXIS_V_strb_V_1_data_out();
    void thread_MBA_AXIS_V_strb_V_1_sel();
    void thread_MBA_AXIS_V_strb_V_1_vld_in();
    void thread_MBA_AXIS_V_strb_V_1_vld_out();
    void thread_MBA_AXIS_V_user_V_1_ack_in();
    void thread_MBA_AXIS_V_user_V_1_ack_out();
    void thread_MBA_AXIS_V_user_V_1_data_out();
    void thread_MBA_AXIS_V_user_V_1_sel();
    void thread_MBA_AXIS_V_user_V_1_vld_in();
    void thread_MBA_AXIS_V_user_V_1_vld_out();
    void thread_MBW_AXIS_TDATA();
    void thread_MBW_AXIS_TDATA_blk_n();
    void thread_MBW_AXIS_TDEST();
    void thread_MBW_AXIS_TID();
    void thread_MBW_AXIS_TKEEP();
    void thread_MBW_AXIS_TLAST();
    void thread_MBW_AXIS_TSTRB();
    void thread_MBW_AXIS_TUSER();
    void thread_MBW_AXIS_TVALID();
    void thread_MBW_AXIS_V_data_V_1_ack_in();
    void thread_MBW_AXIS_V_data_V_1_ack_out();
    void thread_MBW_AXIS_V_data_V_1_data_out();
    void thread_MBW_AXIS_V_data_V_1_load_A();
    void thread_MBW_AXIS_V_data_V_1_load_B();
    void thread_MBW_AXIS_V_data_V_1_sel();
    void thread_MBW_AXIS_V_data_V_1_state_cmp_full();
    void thread_MBW_AXIS_V_data_V_1_vld_in();
    void thread_MBW_AXIS_V_data_V_1_vld_out();
    void thread_MBW_AXIS_V_dest_V_1_ack_in();
    void thread_MBW_AXIS_V_dest_V_1_ack_out();
    void thread_MBW_AXIS_V_dest_V_1_data_out();
    void thread_MBW_AXIS_V_dest_V_1_sel();
    void thread_MBW_AXIS_V_dest_V_1_vld_in();
    void thread_MBW_AXIS_V_dest_V_1_vld_out();
    void thread_MBW_AXIS_V_id_V_1_ack_in();
    void thread_MBW_AXIS_V_id_V_1_ack_out();
    void thread_MBW_AXIS_V_id_V_1_data_out();
    void thread_MBW_AXIS_V_id_V_1_sel();
    void thread_MBW_AXIS_V_id_V_1_vld_in();
    void thread_MBW_AXIS_V_id_V_1_vld_out();
    void thread_MBW_AXIS_V_keep_V_1_ack_in();
    void thread_MBW_AXIS_V_keep_V_1_ack_out();
    void thread_MBW_AXIS_V_keep_V_1_data_out();
    void thread_MBW_AXIS_V_keep_V_1_sel();
    void thread_MBW_AXIS_V_keep_V_1_vld_in();
    void thread_MBW_AXIS_V_keep_V_1_vld_out();
    void thread_MBW_AXIS_V_last_V_1_ack_in();
    void thread_MBW_AXIS_V_last_V_1_ack_out();
    void thread_MBW_AXIS_V_last_V_1_data_out();
    void thread_MBW_AXIS_V_last_V_1_sel();
    void thread_MBW_AXIS_V_last_V_1_vld_in();
    void thread_MBW_AXIS_V_last_V_1_vld_out();
    void thread_MBW_AXIS_V_strb_V_1_ack_in();
    void thread_MBW_AXIS_V_strb_V_1_ack_out();
    void thread_MBW_AXIS_V_strb_V_1_data_out();
    void thread_MBW_AXIS_V_strb_V_1_sel();
    void thread_MBW_AXIS_V_strb_V_1_vld_in();
    void thread_MBW_AXIS_V_strb_V_1_vld_out();
    void thread_MBW_AXIS_V_user_V_1_ack_in();
    void thread_MBW_AXIS_V_user_V_1_ack_out();
    void thread_MBW_AXIS_V_user_V_1_data_out();
    void thread_MBW_AXIS_V_user_V_1_sel();
    void thread_MBW_AXIS_V_user_V_1_vld_in();
    void thread_MBW_AXIS_V_user_V_1_vld_out();
    void thread_MRI_AXIS_TDATA();
    void thread_MRI_AXIS_TDATA_blk_n();
    void thread_MRI_AXIS_TDEST();
    void thread_MRI_AXIS_TID();
    void thread_MRI_AXIS_TKEEP();
    void thread_MRI_AXIS_TLAST();
    void thread_MRI_AXIS_TSTRB();
    void thread_MRI_AXIS_TUSER();
    void thread_MRI_AXIS_TVALID();
    void thread_MRI_AXIS_V_data_V_1_ack_in();
    void thread_MRI_AXIS_V_data_V_1_ack_out();
    void thread_MRI_AXIS_V_data_V_1_data_out();
    void thread_MRI_AXIS_V_data_V_1_load_A();
    void thread_MRI_AXIS_V_data_V_1_load_B();
    void thread_MRI_AXIS_V_data_V_1_sel();
    void thread_MRI_AXIS_V_data_V_1_state_cmp_full();
    void thread_MRI_AXIS_V_data_V_1_vld_in();
    void thread_MRI_AXIS_V_data_V_1_vld_out();
    void thread_MRI_AXIS_V_dest_V_1_ack_in();
    void thread_MRI_AXIS_V_dest_V_1_ack_out();
    void thread_MRI_AXIS_V_dest_V_1_data_out();
    void thread_MRI_AXIS_V_dest_V_1_sel();
    void thread_MRI_AXIS_V_dest_V_1_vld_in();
    void thread_MRI_AXIS_V_dest_V_1_vld_out();
    void thread_MRI_AXIS_V_id_V_1_ack_in();
    void thread_MRI_AXIS_V_id_V_1_ack_out();
    void thread_MRI_AXIS_V_id_V_1_data_out();
    void thread_MRI_AXIS_V_id_V_1_sel();
    void thread_MRI_AXIS_V_id_V_1_vld_in();
    void thread_MRI_AXIS_V_id_V_1_vld_out();
    void thread_MRI_AXIS_V_keep_V_1_ack_in();
    void thread_MRI_AXIS_V_keep_V_1_ack_out();
    void thread_MRI_AXIS_V_keep_V_1_data_out();
    void thread_MRI_AXIS_V_keep_V_1_sel();
    void thread_MRI_AXIS_V_keep_V_1_vld_in();
    void thread_MRI_AXIS_V_keep_V_1_vld_out();
    void thread_MRI_AXIS_V_last_V_1_ack_in();
    void thread_MRI_AXIS_V_last_V_1_ack_out();
    void thread_MRI_AXIS_V_last_V_1_data_out();
    void thread_MRI_AXIS_V_last_V_1_sel();
    void thread_MRI_AXIS_V_last_V_1_vld_in();
    void thread_MRI_AXIS_V_last_V_1_vld_out();
    void thread_MRI_AXIS_V_strb_V_1_ack_in();
    void thread_MRI_AXIS_V_strb_V_1_ack_out();
    void thread_MRI_AXIS_V_strb_V_1_data_out();
    void thread_MRI_AXIS_V_strb_V_1_sel();
    void thread_MRI_AXIS_V_strb_V_1_vld_in();
    void thread_MRI_AXIS_V_strb_V_1_vld_out();
    void thread_MRI_AXIS_V_user_V_1_ack_in();
    void thread_MRI_AXIS_V_user_V_1_ack_out();
    void thread_MRI_AXIS_V_user_V_1_data_out();
    void thread_MRI_AXIS_V_user_V_1_sel();
    void thread_MRI_AXIS_V_user_V_1_vld_in();
    void thread_MRI_AXIS_V_user_V_1_vld_out();
    void thread_SLI_AXIS_TDATA_blk_n();
    void thread_SLI_AXIS_TREADY();
    void thread_SLI_AXIS_V_data_V_0_ack_in();
    void thread_SLI_AXIS_V_data_V_0_ack_out();
    void thread_SLI_AXIS_V_data_V_0_data_out();
    void thread_SLI_AXIS_V_data_V_0_load_A();
    void thread_SLI_AXIS_V_data_V_0_load_B();
    void thread_SLI_AXIS_V_data_V_0_sel();
    void thread_SLI_AXIS_V_data_V_0_state_cmp_full();
    void thread_SLI_AXIS_V_data_V_0_vld_in();
    void thread_SLI_AXIS_V_data_V_0_vld_out();
    void thread_SLI_AXIS_V_dest_V_0_ack_out();
    void thread_SLI_AXIS_V_dest_V_0_vld_in();
    void thread_STA_AXIS_TDATA_blk_n();
    void thread_STA_AXIS_TREADY();
    void thread_STA_AXIS_V_data_V_0_ack_in();
    void thread_STA_AXIS_V_data_V_0_ack_out();
    void thread_STA_AXIS_V_data_V_0_data_out();
    void thread_STA_AXIS_V_data_V_0_load_A();
    void thread_STA_AXIS_V_data_V_0_load_B();
    void thread_STA_AXIS_V_data_V_0_sel();
    void thread_STA_AXIS_V_data_V_0_state_cmp_full();
    void thread_STA_AXIS_V_data_V_0_vld_in();
    void thread_STA_AXIS_V_data_V_0_vld_out();
    void thread_STA_AXIS_V_dest_V_0_ack_out();
    void thread_STA_AXIS_V_dest_V_0_vld_in();
    void thread_STW_AXIS_TDATA_blk_n();
    void thread_STW_AXIS_TREADY();
    void thread_STW_AXIS_V_data_V_0_ack_in();
    void thread_STW_AXIS_V_data_V_0_ack_out();
    void thread_STW_AXIS_V_data_V_0_data_out();
    void thread_STW_AXIS_V_data_V_0_load_A();
    void thread_STW_AXIS_V_data_V_0_load_B();
    void thread_STW_AXIS_V_data_V_0_sel();
    void thread_STW_AXIS_V_data_V_0_state_cmp_full();
    void thread_STW_AXIS_V_data_V_0_vld_in();
    void thread_STW_AXIS_V_data_V_0_vld_out();
    void thread_STW_AXIS_V_dest_V_0_ack_out();
    void thread_STW_AXIS_V_dest_V_0_vld_in();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state1_io();
    void thread_ap_block_state2();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_res_ba_fu_325_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
