// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pe.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pe::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pe::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> pe::ap_ST_fsm_state1 = "1";
const sc_lv<2> pe::ap_ST_fsm_state2 = "10";
const sc_lv<32> pe::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool pe::ap_const_boolean_1 = true;
const sc_lv<1> pe::ap_const_lv1_0 = "0";
const sc_lv<1> pe::ap_const_lv1_1 = "1";
const sc_lv<2> pe::ap_const_lv2_0 = "00";
const sc_lv<2> pe::ap_const_lv2_2 = "10";
const sc_lv<2> pe::ap_const_lv2_3 = "11";
const sc_lv<2> pe::ap_const_lv2_1 = "1";
const sc_lv<32> pe::ap_const_lv32_1 = "1";
const int pe::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<4> pe::ap_const_lv4_0 = "0000";
const sc_lv<5> pe::ap_const_lv5_0 = "00000";

pe::pe(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pe_CONTROL_s_axi_U = new pe_CONTROL_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("pe_CONTROL_s_axi_U");
    pe_CONTROL_s_axi_U->AWVALID(s_axi_CONTROL_AWVALID);
    pe_CONTROL_s_axi_U->AWREADY(s_axi_CONTROL_AWREADY);
    pe_CONTROL_s_axi_U->AWADDR(s_axi_CONTROL_AWADDR);
    pe_CONTROL_s_axi_U->WVALID(s_axi_CONTROL_WVALID);
    pe_CONTROL_s_axi_U->WREADY(s_axi_CONTROL_WREADY);
    pe_CONTROL_s_axi_U->WDATA(s_axi_CONTROL_WDATA);
    pe_CONTROL_s_axi_U->WSTRB(s_axi_CONTROL_WSTRB);
    pe_CONTROL_s_axi_U->ARVALID(s_axi_CONTROL_ARVALID);
    pe_CONTROL_s_axi_U->ARREADY(s_axi_CONTROL_ARREADY);
    pe_CONTROL_s_axi_U->ARADDR(s_axi_CONTROL_ARADDR);
    pe_CONTROL_s_axi_U->RVALID(s_axi_CONTROL_RVALID);
    pe_CONTROL_s_axi_U->RREADY(s_axi_CONTROL_RREADY);
    pe_CONTROL_s_axi_U->RDATA(s_axi_CONTROL_RDATA);
    pe_CONTROL_s_axi_U->RRESP(s_axi_CONTROL_RRESP);
    pe_CONTROL_s_axi_U->BVALID(s_axi_CONTROL_BVALID);
    pe_CONTROL_s_axi_U->BREADY(s_axi_CONTROL_BREADY);
    pe_CONTROL_s_axi_U->BRESP(s_axi_CONTROL_BRESP);
    pe_CONTROL_s_axi_U->ACLK(ap_clk);
    pe_CONTROL_s_axi_U->ARESET(ap_rst_n_inv);
    pe_CONTROL_s_axi_U->ACLK_EN(ap_var_for_const0);
    pe_CONTROL_s_axi_U->ap_start(ap_start);
    pe_CONTROL_s_axi_U->interrupt(interrupt);
    pe_CONTROL_s_axi_U->ap_ready(ap_ready);
    pe_CONTROL_s_axi_U->ap_done(ap_done);
    pe_CONTROL_s_axi_U->ap_idle(ap_idle);
    pe_mul_8s_8s_16_1_1_U1 = new pe_mul_8s_8s_16_1_1<1,1,8,8,16>("pe_mul_8s_8s_16_1_1_U1");
    pe_mul_8s_8s_16_1_1_U1->din0(STW_AXIS_V_data_V_0_data_out);
    pe_mul_8s_8s_16_1_1_U1->din1(SLI_AXIS_V_data_V_0_data_out);
    pe_mul_8s_8s_16_1_1_U1->dout(prod_iw_fu_319_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_MBA_AXIS_TDATA);
    sensitive << ( MBA_AXIS_V_data_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( MBA_AXIS_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MBA_AXIS_TDEST);
    sensitive << ( MBA_AXIS_V_dest_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TID);
    sensitive << ( MBA_AXIS_V_id_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TKEEP);
    sensitive << ( MBA_AXIS_V_keep_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TLAST);
    sensitive << ( MBA_AXIS_V_last_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TSTRB);
    sensitive << ( MBA_AXIS_V_strb_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TUSER);
    sensitive << ( MBA_AXIS_V_user_V_1_data_out );

    SC_METHOD(thread_MBA_AXIS_TVALID);
    sensitive << ( MBA_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_data_out);
    sensitive << ( MBA_AXIS_V_data_V_1_payload_A );
    sensitive << ( MBA_AXIS_V_data_V_1_payload_B );
    sensitive << ( MBA_AXIS_V_data_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_load_A);
    sensitive << ( MBA_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MBA_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_load_B);
    sensitive << ( MBA_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MBA_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_sel);
    sensitive << ( MBA_AXIS_V_data_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_state_cmp_full);
    sensitive << ( MBA_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_data_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_data_out);
    sensitive << ( MBA_AXIS_V_dest_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_sel);
    sensitive << ( MBA_AXIS_V_dest_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_dest_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_data_out);
    sensitive << ( MBA_AXIS_V_id_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_sel);
    sensitive << ( MBA_AXIS_V_id_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_id_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_data_out);
    sensitive << ( MBA_AXIS_V_keep_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_sel);
    sensitive << ( MBA_AXIS_V_keep_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_keep_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_data_out);
    sensitive << ( MBA_AXIS_V_last_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_sel);
    sensitive << ( MBA_AXIS_V_last_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_last_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_data_out);
    sensitive << ( MBA_AXIS_V_strb_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_sel);
    sensitive << ( MBA_AXIS_V_strb_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_strb_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_ack_in);
    sensitive << ( MBA_AXIS_V_user_V_1_state );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_ack_out);
    sensitive << ( MBA_AXIS_TREADY );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_data_out);
    sensitive << ( MBA_AXIS_V_user_V_1_sel );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_sel);
    sensitive << ( MBA_AXIS_V_user_V_1_sel_rd );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBA_AXIS_V_user_V_1_vld_out);
    sensitive << ( MBA_AXIS_V_user_V_1_state );

    SC_METHOD(thread_MBW_AXIS_TDATA);
    sensitive << ( MBW_AXIS_V_data_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( MBW_AXIS_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MBW_AXIS_TDEST);
    sensitive << ( MBW_AXIS_V_dest_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TID);
    sensitive << ( MBW_AXIS_V_id_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TKEEP);
    sensitive << ( MBW_AXIS_V_keep_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TLAST);
    sensitive << ( MBW_AXIS_V_last_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TSTRB);
    sensitive << ( MBW_AXIS_V_strb_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TUSER);
    sensitive << ( MBW_AXIS_V_user_V_1_data_out );

    SC_METHOD(thread_MBW_AXIS_TVALID);
    sensitive << ( MBW_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_data_out);
    sensitive << ( MBW_AXIS_V_data_V_1_payload_A );
    sensitive << ( MBW_AXIS_V_data_V_1_payload_B );
    sensitive << ( MBW_AXIS_V_data_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_load_A);
    sensitive << ( MBW_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MBW_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_load_B);
    sensitive << ( MBW_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MBW_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_sel);
    sensitive << ( MBW_AXIS_V_data_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_state_cmp_full);
    sensitive << ( MBW_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_data_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_data_out);
    sensitive << ( MBW_AXIS_V_dest_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_sel);
    sensitive << ( MBW_AXIS_V_dest_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_dest_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_data_out);
    sensitive << ( MBW_AXIS_V_id_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_sel);
    sensitive << ( MBW_AXIS_V_id_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_id_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_data_out);
    sensitive << ( MBW_AXIS_V_keep_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_sel);
    sensitive << ( MBW_AXIS_V_keep_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_keep_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_data_out);
    sensitive << ( MBW_AXIS_V_last_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_sel);
    sensitive << ( MBW_AXIS_V_last_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_last_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_data_out);
    sensitive << ( MBW_AXIS_V_strb_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_sel);
    sensitive << ( MBW_AXIS_V_strb_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_strb_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_ack_in);
    sensitive << ( MBW_AXIS_V_user_V_1_state );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_ack_out);
    sensitive << ( MBW_AXIS_TREADY );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_data_out);
    sensitive << ( MBW_AXIS_V_user_V_1_sel );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_sel);
    sensitive << ( MBW_AXIS_V_user_V_1_sel_rd );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MBW_AXIS_V_user_V_1_vld_out);
    sensitive << ( MBW_AXIS_V_user_V_1_state );

    SC_METHOD(thread_MRI_AXIS_TDATA);
    sensitive << ( MRI_AXIS_V_data_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( MRI_AXIS_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MRI_AXIS_TDEST);
    sensitive << ( MRI_AXIS_V_dest_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TID);
    sensitive << ( MRI_AXIS_V_id_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TKEEP);
    sensitive << ( MRI_AXIS_V_keep_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TLAST);
    sensitive << ( MRI_AXIS_V_last_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TSTRB);
    sensitive << ( MRI_AXIS_V_strb_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TUSER);
    sensitive << ( MRI_AXIS_V_user_V_1_data_out );

    SC_METHOD(thread_MRI_AXIS_TVALID);
    sensitive << ( MRI_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_data_out);
    sensitive << ( MRI_AXIS_V_data_V_1_payload_A );
    sensitive << ( MRI_AXIS_V_data_V_1_payload_B );
    sensitive << ( MRI_AXIS_V_data_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_load_A);
    sensitive << ( MRI_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MRI_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_load_B);
    sensitive << ( MRI_AXIS_V_data_V_1_sel_wr );
    sensitive << ( MRI_AXIS_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_sel);
    sensitive << ( MRI_AXIS_V_data_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_state_cmp_full);
    sensitive << ( MRI_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_data_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_data_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_data_out);
    sensitive << ( MRI_AXIS_V_dest_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_sel);
    sensitive << ( MRI_AXIS_V_dest_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_dest_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_dest_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_data_out);
    sensitive << ( MRI_AXIS_V_id_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_sel);
    sensitive << ( MRI_AXIS_V_id_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_id_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_id_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_data_out);
    sensitive << ( MRI_AXIS_V_keep_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_sel);
    sensitive << ( MRI_AXIS_V_keep_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_keep_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_keep_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_data_out);
    sensitive << ( MRI_AXIS_V_last_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_sel);
    sensitive << ( MRI_AXIS_V_last_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_last_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_last_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_data_out);
    sensitive << ( MRI_AXIS_V_strb_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_sel);
    sensitive << ( MRI_AXIS_V_strb_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_strb_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_strb_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_ack_in);
    sensitive << ( MRI_AXIS_V_user_V_1_state );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_ack_out);
    sensitive << ( MRI_AXIS_TREADY );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_data_out);
    sensitive << ( MRI_AXIS_V_user_V_1_sel );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_sel);
    sensitive << ( MRI_AXIS_V_user_V_1_sel_rd );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_MRI_AXIS_V_user_V_1_vld_out);
    sensitive << ( MRI_AXIS_V_user_V_1_state );

    SC_METHOD(thread_SLI_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_state );

    SC_METHOD(thread_SLI_AXIS_TREADY);
    sensitive << ( SLI_AXIS_V_dest_V_0_state );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_ack_in);
    sensitive << ( SLI_AXIS_V_data_V_0_state );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_data_out);
    sensitive << ( SLI_AXIS_V_data_V_0_payload_A );
    sensitive << ( SLI_AXIS_V_data_V_0_payload_B );
    sensitive << ( SLI_AXIS_V_data_V_0_sel );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_load_A);
    sensitive << ( SLI_AXIS_V_data_V_0_sel_wr );
    sensitive << ( SLI_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_load_B);
    sensitive << ( SLI_AXIS_V_data_V_0_sel_wr );
    sensitive << ( SLI_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_sel);
    sensitive << ( SLI_AXIS_V_data_V_0_sel_rd );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_state_cmp_full);
    sensitive << ( SLI_AXIS_V_data_V_0_state );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_vld_in);
    sensitive << ( SLI_AXIS_TVALID );

    SC_METHOD(thread_SLI_AXIS_V_data_V_0_vld_out);
    sensitive << ( SLI_AXIS_V_data_V_0_state );

    SC_METHOD(thread_SLI_AXIS_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_SLI_AXIS_V_dest_V_0_vld_in);
    sensitive << ( SLI_AXIS_TVALID );

    SC_METHOD(thread_STA_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( STA_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STA_AXIS_TREADY);
    sensitive << ( STA_AXIS_V_dest_V_0_state );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_ack_in);
    sensitive << ( STA_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_data_out);
    sensitive << ( STA_AXIS_V_data_V_0_payload_A );
    sensitive << ( STA_AXIS_V_data_V_0_payload_B );
    sensitive << ( STA_AXIS_V_data_V_0_sel );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_load_A);
    sensitive << ( STA_AXIS_V_data_V_0_sel_wr );
    sensitive << ( STA_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_load_B);
    sensitive << ( STA_AXIS_V_data_V_0_sel_wr );
    sensitive << ( STA_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_sel);
    sensitive << ( STA_AXIS_V_data_V_0_sel_rd );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_state_cmp_full);
    sensitive << ( STA_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_vld_in);
    sensitive << ( STA_AXIS_TVALID );

    SC_METHOD(thread_STA_AXIS_V_data_V_0_vld_out);
    sensitive << ( STA_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STA_AXIS_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_STA_AXIS_V_dest_V_0_vld_in);
    sensitive << ( STA_AXIS_TVALID );

    SC_METHOD(thread_STW_AXIS_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( STW_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STW_AXIS_TREADY);
    sensitive << ( STW_AXIS_V_dest_V_0_state );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_ack_in);
    sensitive << ( STW_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_data_out);
    sensitive << ( STW_AXIS_V_data_V_0_payload_A );
    sensitive << ( STW_AXIS_V_data_V_0_payload_B );
    sensitive << ( STW_AXIS_V_data_V_0_sel );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_load_A);
    sensitive << ( STW_AXIS_V_data_V_0_sel_wr );
    sensitive << ( STW_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_load_B);
    sensitive << ( STW_AXIS_V_data_V_0_sel_wr );
    sensitive << ( STW_AXIS_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_sel);
    sensitive << ( STW_AXIS_V_data_V_0_sel_rd );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_state_cmp_full);
    sensitive << ( STW_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_vld_in);
    sensitive << ( STW_AXIS_TVALID );

    SC_METHOD(thread_STW_AXIS_V_data_V_0_vld_out);
    sensitive << ( STW_AXIS_V_data_V_0_state );

    SC_METHOD(thread_STW_AXIS_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_STW_AXIS_V_dest_V_0_vld_in);
    sensitive << ( STW_AXIS_TVALID );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_user_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_last_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_id_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_data_V_1_state );
    sensitive << ( MRI_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_keep_V_1_state );
    sensitive << ( MRI_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_strb_V_1_state );
    sensitive << ( MRI_AXIS_V_user_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_user_V_1_state );
    sensitive << ( MRI_AXIS_V_last_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_last_V_1_state );
    sensitive << ( MRI_AXIS_V_id_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_id_V_1_state );
    sensitive << ( MRI_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_dest_V_1_state );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_state );
    sensitive << ( MBW_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_keep_V_1_state );
    sensitive << ( MBW_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_strb_V_1_state );
    sensitive << ( MBW_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_user_V_1_state );
    sensitive << ( MBW_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_last_V_1_state );
    sensitive << ( MBW_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_id_V_1_state );
    sensitive << ( MBW_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_dest_V_1_state );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_state );
    sensitive << ( MBA_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_keep_V_1_state );
    sensitive << ( MBA_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_strb_V_1_state );
    sensitive << ( MBA_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_user_V_1_state );
    sensitive << ( MBA_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_last_V_1_state );
    sensitive << ( MBA_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_id_V_1_state );
    sensitive << ( MBA_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_data_V_1_state );
    sensitive << ( MRI_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_keep_V_1_state );
    sensitive << ( MRI_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_strb_V_1_state );
    sensitive << ( MRI_AXIS_V_user_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_user_V_1_state );
    sensitive << ( MRI_AXIS_V_last_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_last_V_1_state );
    sensitive << ( MRI_AXIS_V_id_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_id_V_1_state );
    sensitive << ( MRI_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_dest_V_1_state );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_state );
    sensitive << ( MBW_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_keep_V_1_state );
    sensitive << ( MBW_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_strb_V_1_state );
    sensitive << ( MBW_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_user_V_1_state );
    sensitive << ( MBW_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_last_V_1_state );
    sensitive << ( MBW_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_id_V_1_state );
    sensitive << ( MBW_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_dest_V_1_state );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_state );
    sensitive << ( MBA_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_keep_V_1_state );
    sensitive << ( MBA_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_strb_V_1_state );
    sensitive << ( MBA_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_user_V_1_state );
    sensitive << ( MBA_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_last_V_1_state );
    sensitive << ( MBA_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_id_V_1_state );
    sensitive << ( MBA_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_res_ba_fu_325_p2);
    sensitive << ( STA_AXIS_V_data_V_0_data_out );
    sensitive << ( prod_iw_fu_319_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( SLI_AXIS_V_data_V_0_vld_out );
    sensitive << ( MRI_AXIS_V_data_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_data_V_1_state );
    sensitive << ( MRI_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_keep_V_1_state );
    sensitive << ( MRI_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_strb_V_1_state );
    sensitive << ( MRI_AXIS_V_user_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_user_V_1_state );
    sensitive << ( MRI_AXIS_V_last_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_last_V_1_state );
    sensitive << ( MRI_AXIS_V_id_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_id_V_1_state );
    sensitive << ( MRI_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MRI_AXIS_V_dest_V_1_state );
    sensitive << ( STW_AXIS_V_data_V_0_vld_out );
    sensitive << ( MBW_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_data_V_1_state );
    sensitive << ( MBW_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_keep_V_1_state );
    sensitive << ( MBW_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_strb_V_1_state );
    sensitive << ( MBW_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_user_V_1_state );
    sensitive << ( MBW_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_last_V_1_state );
    sensitive << ( MBW_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_id_V_1_state );
    sensitive << ( MBW_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBW_AXIS_V_dest_V_1_state );
    sensitive << ( STA_AXIS_V_data_V_0_vld_out );
    sensitive << ( MBA_AXIS_V_data_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_data_V_1_state );
    sensitive << ( MBA_AXIS_V_keep_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_keep_V_1_state );
    sensitive << ( MBA_AXIS_V_strb_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_strb_V_1_state );
    sensitive << ( MBA_AXIS_V_user_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_user_V_1_state );
    sensitive << ( MBA_AXIS_V_last_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_last_V_1_state );
    sensitive << ( MBA_AXIS_V_id_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_id_V_1_state );
    sensitive << ( MBA_AXIS_V_dest_V_1_ack_in );
    sensitive << ( MBA_AXIS_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    SLI_AXIS_V_data_V_0_sel_rd = SC_LOGIC_0;
    SLI_AXIS_V_data_V_0_sel_wr = SC_LOGIC_0;
    SLI_AXIS_V_data_V_0_state = "00";
    SLI_AXIS_V_dest_V_0_state = "00";
    MRI_AXIS_V_data_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_data_V_1_sel_wr = SC_LOGIC_0;
    MRI_AXIS_V_data_V_1_state = "00";
    MRI_AXIS_V_keep_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_keep_V_1_state = "00";
    MRI_AXIS_V_strb_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_strb_V_1_state = "00";
    MRI_AXIS_V_user_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_user_V_1_state = "00";
    MRI_AXIS_V_last_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_last_V_1_state = "00";
    MRI_AXIS_V_id_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_id_V_1_state = "00";
    MRI_AXIS_V_dest_V_1_sel_rd = SC_LOGIC_0;
    MRI_AXIS_V_dest_V_1_state = "00";
    STW_AXIS_V_data_V_0_sel_rd = SC_LOGIC_0;
    STW_AXIS_V_data_V_0_sel_wr = SC_LOGIC_0;
    STW_AXIS_V_data_V_0_state = "00";
    STW_AXIS_V_dest_V_0_state = "00";
    MBW_AXIS_V_data_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_data_V_1_sel_wr = SC_LOGIC_0;
    MBW_AXIS_V_data_V_1_state = "00";
    MBW_AXIS_V_keep_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_keep_V_1_state = "00";
    MBW_AXIS_V_strb_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_strb_V_1_state = "00";
    MBW_AXIS_V_user_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_user_V_1_state = "00";
    MBW_AXIS_V_last_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_last_V_1_state = "00";
    MBW_AXIS_V_id_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_id_V_1_state = "00";
    MBW_AXIS_V_dest_V_1_sel_rd = SC_LOGIC_0;
    MBW_AXIS_V_dest_V_1_state = "00";
    STA_AXIS_V_data_V_0_sel_rd = SC_LOGIC_0;
    STA_AXIS_V_data_V_0_sel_wr = SC_LOGIC_0;
    STA_AXIS_V_data_V_0_state = "00";
    STA_AXIS_V_dest_V_0_state = "00";
    MBA_AXIS_V_data_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_data_V_1_sel_wr = SC_LOGIC_0;
    MBA_AXIS_V_data_V_1_state = "00";
    MBA_AXIS_V_keep_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_keep_V_1_state = "00";
    MBA_AXIS_V_strb_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_strb_V_1_state = "00";
    MBA_AXIS_V_user_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_user_V_1_state = "00";
    MBA_AXIS_V_last_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_last_V_1_state = "00";
    MBA_AXIS_V_id_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_id_V_1_state = "00";
    MBA_AXIS_V_dest_V_1_sel_rd = SC_LOGIC_0;
    MBA_AXIS_V_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pe_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, SLI_AXIS_TDATA, "(port)SLI_AXIS_TDATA");
    sc_trace(mVcdFile, SLI_AXIS_TVALID, "(port)SLI_AXIS_TVALID");
    sc_trace(mVcdFile, SLI_AXIS_TREADY, "(port)SLI_AXIS_TREADY");
    sc_trace(mVcdFile, SLI_AXIS_TKEEP, "(port)SLI_AXIS_TKEEP");
    sc_trace(mVcdFile, SLI_AXIS_TSTRB, "(port)SLI_AXIS_TSTRB");
    sc_trace(mVcdFile, SLI_AXIS_TUSER, "(port)SLI_AXIS_TUSER");
    sc_trace(mVcdFile, SLI_AXIS_TLAST, "(port)SLI_AXIS_TLAST");
    sc_trace(mVcdFile, SLI_AXIS_TID, "(port)SLI_AXIS_TID");
    sc_trace(mVcdFile, SLI_AXIS_TDEST, "(port)SLI_AXIS_TDEST");
    sc_trace(mVcdFile, MRI_AXIS_TDATA, "(port)MRI_AXIS_TDATA");
    sc_trace(mVcdFile, MRI_AXIS_TVALID, "(port)MRI_AXIS_TVALID");
    sc_trace(mVcdFile, MRI_AXIS_TREADY, "(port)MRI_AXIS_TREADY");
    sc_trace(mVcdFile, MRI_AXIS_TKEEP, "(port)MRI_AXIS_TKEEP");
    sc_trace(mVcdFile, MRI_AXIS_TSTRB, "(port)MRI_AXIS_TSTRB");
    sc_trace(mVcdFile, MRI_AXIS_TUSER, "(port)MRI_AXIS_TUSER");
    sc_trace(mVcdFile, MRI_AXIS_TLAST, "(port)MRI_AXIS_TLAST");
    sc_trace(mVcdFile, MRI_AXIS_TID, "(port)MRI_AXIS_TID");
    sc_trace(mVcdFile, MRI_AXIS_TDEST, "(port)MRI_AXIS_TDEST");
    sc_trace(mVcdFile, STW_AXIS_TDATA, "(port)STW_AXIS_TDATA");
    sc_trace(mVcdFile, STW_AXIS_TVALID, "(port)STW_AXIS_TVALID");
    sc_trace(mVcdFile, STW_AXIS_TREADY, "(port)STW_AXIS_TREADY");
    sc_trace(mVcdFile, STW_AXIS_TKEEP, "(port)STW_AXIS_TKEEP");
    sc_trace(mVcdFile, STW_AXIS_TSTRB, "(port)STW_AXIS_TSTRB");
    sc_trace(mVcdFile, STW_AXIS_TUSER, "(port)STW_AXIS_TUSER");
    sc_trace(mVcdFile, STW_AXIS_TLAST, "(port)STW_AXIS_TLAST");
    sc_trace(mVcdFile, STW_AXIS_TID, "(port)STW_AXIS_TID");
    sc_trace(mVcdFile, STW_AXIS_TDEST, "(port)STW_AXIS_TDEST");
    sc_trace(mVcdFile, MBW_AXIS_TDATA, "(port)MBW_AXIS_TDATA");
    sc_trace(mVcdFile, MBW_AXIS_TVALID, "(port)MBW_AXIS_TVALID");
    sc_trace(mVcdFile, MBW_AXIS_TREADY, "(port)MBW_AXIS_TREADY");
    sc_trace(mVcdFile, MBW_AXIS_TKEEP, "(port)MBW_AXIS_TKEEP");
    sc_trace(mVcdFile, MBW_AXIS_TSTRB, "(port)MBW_AXIS_TSTRB");
    sc_trace(mVcdFile, MBW_AXIS_TUSER, "(port)MBW_AXIS_TUSER");
    sc_trace(mVcdFile, MBW_AXIS_TLAST, "(port)MBW_AXIS_TLAST");
    sc_trace(mVcdFile, MBW_AXIS_TID, "(port)MBW_AXIS_TID");
    sc_trace(mVcdFile, MBW_AXIS_TDEST, "(port)MBW_AXIS_TDEST");
    sc_trace(mVcdFile, STA_AXIS_TDATA, "(port)STA_AXIS_TDATA");
    sc_trace(mVcdFile, STA_AXIS_TVALID, "(port)STA_AXIS_TVALID");
    sc_trace(mVcdFile, STA_AXIS_TREADY, "(port)STA_AXIS_TREADY");
    sc_trace(mVcdFile, STA_AXIS_TKEEP, "(port)STA_AXIS_TKEEP");
    sc_trace(mVcdFile, STA_AXIS_TSTRB, "(port)STA_AXIS_TSTRB");
    sc_trace(mVcdFile, STA_AXIS_TUSER, "(port)STA_AXIS_TUSER");
    sc_trace(mVcdFile, STA_AXIS_TLAST, "(port)STA_AXIS_TLAST");
    sc_trace(mVcdFile, STA_AXIS_TID, "(port)STA_AXIS_TID");
    sc_trace(mVcdFile, STA_AXIS_TDEST, "(port)STA_AXIS_TDEST");
    sc_trace(mVcdFile, MBA_AXIS_TDATA, "(port)MBA_AXIS_TDATA");
    sc_trace(mVcdFile, MBA_AXIS_TVALID, "(port)MBA_AXIS_TVALID");
    sc_trace(mVcdFile, MBA_AXIS_TREADY, "(port)MBA_AXIS_TREADY");
    sc_trace(mVcdFile, MBA_AXIS_TKEEP, "(port)MBA_AXIS_TKEEP");
    sc_trace(mVcdFile, MBA_AXIS_TSTRB, "(port)MBA_AXIS_TSTRB");
    sc_trace(mVcdFile, MBA_AXIS_TUSER, "(port)MBA_AXIS_TUSER");
    sc_trace(mVcdFile, MBA_AXIS_TLAST, "(port)MBA_AXIS_TLAST");
    sc_trace(mVcdFile, MBA_AXIS_TID, "(port)MBA_AXIS_TID");
    sc_trace(mVcdFile, MBA_AXIS_TDEST, "(port)MBA_AXIS_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_AWVALID, "(port)s_axi_CONTROL_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_AWREADY, "(port)s_axi_CONTROL_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_AWADDR, "(port)s_axi_CONTROL_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_WVALID, "(port)s_axi_CONTROL_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_WREADY, "(port)s_axi_CONTROL_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_WDATA, "(port)s_axi_CONTROL_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_WSTRB, "(port)s_axi_CONTROL_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_ARVALID, "(port)s_axi_CONTROL_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_ARREADY, "(port)s_axi_CONTROL_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_ARADDR, "(port)s_axi_CONTROL_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_RVALID, "(port)s_axi_CONTROL_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_RREADY, "(port)s_axi_CONTROL_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_RDATA, "(port)s_axi_CONTROL_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_RRESP, "(port)s_axi_CONTROL_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BVALID, "(port)s_axi_CONTROL_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BREADY, "(port)s_axi_CONTROL_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BRESP, "(port)s_axi_CONTROL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_data_out, "SLI_AXIS_V_data_V_0_data_out");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_vld_in, "SLI_AXIS_V_data_V_0_vld_in");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_vld_out, "SLI_AXIS_V_data_V_0_vld_out");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_ack_in, "SLI_AXIS_V_data_V_0_ack_in");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_ack_out, "SLI_AXIS_V_data_V_0_ack_out");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_payload_A, "SLI_AXIS_V_data_V_0_payload_A");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_payload_B, "SLI_AXIS_V_data_V_0_payload_B");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_sel_rd, "SLI_AXIS_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_sel_wr, "SLI_AXIS_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_sel, "SLI_AXIS_V_data_V_0_sel");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_load_A, "SLI_AXIS_V_data_V_0_load_A");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_load_B, "SLI_AXIS_V_data_V_0_load_B");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_state, "SLI_AXIS_V_data_V_0_state");
    sc_trace(mVcdFile, SLI_AXIS_V_data_V_0_state_cmp_full, "SLI_AXIS_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, SLI_AXIS_V_dest_V_0_vld_in, "SLI_AXIS_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, SLI_AXIS_V_dest_V_0_ack_out, "SLI_AXIS_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, SLI_AXIS_V_dest_V_0_state, "SLI_AXIS_V_dest_V_0_state");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_data_out, "MRI_AXIS_V_data_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_vld_in, "MRI_AXIS_V_data_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_vld_out, "MRI_AXIS_V_data_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_ack_in, "MRI_AXIS_V_data_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_ack_out, "MRI_AXIS_V_data_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_payload_A, "MRI_AXIS_V_data_V_1_payload_A");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_payload_B, "MRI_AXIS_V_data_V_1_payload_B");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_sel_rd, "MRI_AXIS_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_sel_wr, "MRI_AXIS_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_sel, "MRI_AXIS_V_data_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_load_A, "MRI_AXIS_V_data_V_1_load_A");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_load_B, "MRI_AXIS_V_data_V_1_load_B");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_state, "MRI_AXIS_V_data_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_data_V_1_state_cmp_full, "MRI_AXIS_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_data_out, "MRI_AXIS_V_keep_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_vld_in, "MRI_AXIS_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_vld_out, "MRI_AXIS_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_ack_in, "MRI_AXIS_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_ack_out, "MRI_AXIS_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_sel_rd, "MRI_AXIS_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_sel, "MRI_AXIS_V_keep_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_keep_V_1_state, "MRI_AXIS_V_keep_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_data_out, "MRI_AXIS_V_strb_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_vld_in, "MRI_AXIS_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_vld_out, "MRI_AXIS_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_ack_in, "MRI_AXIS_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_ack_out, "MRI_AXIS_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_sel_rd, "MRI_AXIS_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_sel, "MRI_AXIS_V_strb_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_strb_V_1_state, "MRI_AXIS_V_strb_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_data_out, "MRI_AXIS_V_user_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_vld_in, "MRI_AXIS_V_user_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_vld_out, "MRI_AXIS_V_user_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_ack_in, "MRI_AXIS_V_user_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_ack_out, "MRI_AXIS_V_user_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_sel_rd, "MRI_AXIS_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_sel, "MRI_AXIS_V_user_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_user_V_1_state, "MRI_AXIS_V_user_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_data_out, "MRI_AXIS_V_last_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_vld_in, "MRI_AXIS_V_last_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_vld_out, "MRI_AXIS_V_last_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_ack_in, "MRI_AXIS_V_last_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_ack_out, "MRI_AXIS_V_last_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_sel_rd, "MRI_AXIS_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_sel, "MRI_AXIS_V_last_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_last_V_1_state, "MRI_AXIS_V_last_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_data_out, "MRI_AXIS_V_id_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_vld_in, "MRI_AXIS_V_id_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_vld_out, "MRI_AXIS_V_id_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_ack_in, "MRI_AXIS_V_id_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_ack_out, "MRI_AXIS_V_id_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_sel_rd, "MRI_AXIS_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_sel, "MRI_AXIS_V_id_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_id_V_1_state, "MRI_AXIS_V_id_V_1_state");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_data_out, "MRI_AXIS_V_dest_V_1_data_out");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_vld_in, "MRI_AXIS_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_vld_out, "MRI_AXIS_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_ack_in, "MRI_AXIS_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_ack_out, "MRI_AXIS_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_sel_rd, "MRI_AXIS_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_sel, "MRI_AXIS_V_dest_V_1_sel");
    sc_trace(mVcdFile, MRI_AXIS_V_dest_V_1_state, "MRI_AXIS_V_dest_V_1_state");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_data_out, "STW_AXIS_V_data_V_0_data_out");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_vld_in, "STW_AXIS_V_data_V_0_vld_in");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_vld_out, "STW_AXIS_V_data_V_0_vld_out");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_ack_in, "STW_AXIS_V_data_V_0_ack_in");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_ack_out, "STW_AXIS_V_data_V_0_ack_out");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_payload_A, "STW_AXIS_V_data_V_0_payload_A");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_payload_B, "STW_AXIS_V_data_V_0_payload_B");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_sel_rd, "STW_AXIS_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_sel_wr, "STW_AXIS_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_sel, "STW_AXIS_V_data_V_0_sel");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_load_A, "STW_AXIS_V_data_V_0_load_A");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_load_B, "STW_AXIS_V_data_V_0_load_B");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_state, "STW_AXIS_V_data_V_0_state");
    sc_trace(mVcdFile, STW_AXIS_V_data_V_0_state_cmp_full, "STW_AXIS_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, STW_AXIS_V_dest_V_0_vld_in, "STW_AXIS_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, STW_AXIS_V_dest_V_0_ack_out, "STW_AXIS_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, STW_AXIS_V_dest_V_0_state, "STW_AXIS_V_dest_V_0_state");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_data_out, "MBW_AXIS_V_data_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_vld_in, "MBW_AXIS_V_data_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_vld_out, "MBW_AXIS_V_data_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_ack_in, "MBW_AXIS_V_data_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_ack_out, "MBW_AXIS_V_data_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_payload_A, "MBW_AXIS_V_data_V_1_payload_A");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_payload_B, "MBW_AXIS_V_data_V_1_payload_B");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_sel_rd, "MBW_AXIS_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_sel_wr, "MBW_AXIS_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_sel, "MBW_AXIS_V_data_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_load_A, "MBW_AXIS_V_data_V_1_load_A");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_load_B, "MBW_AXIS_V_data_V_1_load_B");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_state, "MBW_AXIS_V_data_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_data_V_1_state_cmp_full, "MBW_AXIS_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_data_out, "MBW_AXIS_V_keep_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_vld_in, "MBW_AXIS_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_vld_out, "MBW_AXIS_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_ack_in, "MBW_AXIS_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_ack_out, "MBW_AXIS_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_sel_rd, "MBW_AXIS_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_sel, "MBW_AXIS_V_keep_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_keep_V_1_state, "MBW_AXIS_V_keep_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_data_out, "MBW_AXIS_V_strb_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_vld_in, "MBW_AXIS_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_vld_out, "MBW_AXIS_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_ack_in, "MBW_AXIS_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_ack_out, "MBW_AXIS_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_sel_rd, "MBW_AXIS_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_sel, "MBW_AXIS_V_strb_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_strb_V_1_state, "MBW_AXIS_V_strb_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_data_out, "MBW_AXIS_V_user_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_vld_in, "MBW_AXIS_V_user_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_vld_out, "MBW_AXIS_V_user_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_ack_in, "MBW_AXIS_V_user_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_ack_out, "MBW_AXIS_V_user_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_sel_rd, "MBW_AXIS_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_sel, "MBW_AXIS_V_user_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_user_V_1_state, "MBW_AXIS_V_user_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_data_out, "MBW_AXIS_V_last_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_vld_in, "MBW_AXIS_V_last_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_vld_out, "MBW_AXIS_V_last_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_ack_in, "MBW_AXIS_V_last_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_ack_out, "MBW_AXIS_V_last_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_sel_rd, "MBW_AXIS_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_sel, "MBW_AXIS_V_last_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_last_V_1_state, "MBW_AXIS_V_last_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_data_out, "MBW_AXIS_V_id_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_vld_in, "MBW_AXIS_V_id_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_vld_out, "MBW_AXIS_V_id_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_ack_in, "MBW_AXIS_V_id_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_ack_out, "MBW_AXIS_V_id_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_sel_rd, "MBW_AXIS_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_sel, "MBW_AXIS_V_id_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_id_V_1_state, "MBW_AXIS_V_id_V_1_state");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_data_out, "MBW_AXIS_V_dest_V_1_data_out");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_vld_in, "MBW_AXIS_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_vld_out, "MBW_AXIS_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_ack_in, "MBW_AXIS_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_ack_out, "MBW_AXIS_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_sel_rd, "MBW_AXIS_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_sel, "MBW_AXIS_V_dest_V_1_sel");
    sc_trace(mVcdFile, MBW_AXIS_V_dest_V_1_state, "MBW_AXIS_V_dest_V_1_state");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_data_out, "STA_AXIS_V_data_V_0_data_out");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_vld_in, "STA_AXIS_V_data_V_0_vld_in");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_vld_out, "STA_AXIS_V_data_V_0_vld_out");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_ack_in, "STA_AXIS_V_data_V_0_ack_in");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_ack_out, "STA_AXIS_V_data_V_0_ack_out");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_payload_A, "STA_AXIS_V_data_V_0_payload_A");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_payload_B, "STA_AXIS_V_data_V_0_payload_B");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_sel_rd, "STA_AXIS_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_sel_wr, "STA_AXIS_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_sel, "STA_AXIS_V_data_V_0_sel");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_load_A, "STA_AXIS_V_data_V_0_load_A");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_load_B, "STA_AXIS_V_data_V_0_load_B");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_state, "STA_AXIS_V_data_V_0_state");
    sc_trace(mVcdFile, STA_AXIS_V_data_V_0_state_cmp_full, "STA_AXIS_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, STA_AXIS_V_dest_V_0_vld_in, "STA_AXIS_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, STA_AXIS_V_dest_V_0_ack_out, "STA_AXIS_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, STA_AXIS_V_dest_V_0_state, "STA_AXIS_V_dest_V_0_state");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_data_out, "MBA_AXIS_V_data_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_vld_in, "MBA_AXIS_V_data_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_vld_out, "MBA_AXIS_V_data_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_ack_in, "MBA_AXIS_V_data_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_ack_out, "MBA_AXIS_V_data_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_payload_A, "MBA_AXIS_V_data_V_1_payload_A");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_payload_B, "MBA_AXIS_V_data_V_1_payload_B");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_sel_rd, "MBA_AXIS_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_sel_wr, "MBA_AXIS_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_sel, "MBA_AXIS_V_data_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_load_A, "MBA_AXIS_V_data_V_1_load_A");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_load_B, "MBA_AXIS_V_data_V_1_load_B");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_state, "MBA_AXIS_V_data_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_data_V_1_state_cmp_full, "MBA_AXIS_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_data_out, "MBA_AXIS_V_keep_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_vld_in, "MBA_AXIS_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_vld_out, "MBA_AXIS_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_ack_in, "MBA_AXIS_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_ack_out, "MBA_AXIS_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_sel_rd, "MBA_AXIS_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_sel, "MBA_AXIS_V_keep_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_keep_V_1_state, "MBA_AXIS_V_keep_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_data_out, "MBA_AXIS_V_strb_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_vld_in, "MBA_AXIS_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_vld_out, "MBA_AXIS_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_ack_in, "MBA_AXIS_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_ack_out, "MBA_AXIS_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_sel_rd, "MBA_AXIS_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_sel, "MBA_AXIS_V_strb_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_strb_V_1_state, "MBA_AXIS_V_strb_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_data_out, "MBA_AXIS_V_user_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_vld_in, "MBA_AXIS_V_user_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_vld_out, "MBA_AXIS_V_user_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_ack_in, "MBA_AXIS_V_user_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_ack_out, "MBA_AXIS_V_user_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_sel_rd, "MBA_AXIS_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_sel, "MBA_AXIS_V_user_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_user_V_1_state, "MBA_AXIS_V_user_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_data_out, "MBA_AXIS_V_last_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_vld_in, "MBA_AXIS_V_last_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_vld_out, "MBA_AXIS_V_last_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_ack_in, "MBA_AXIS_V_last_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_ack_out, "MBA_AXIS_V_last_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_sel_rd, "MBA_AXIS_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_sel, "MBA_AXIS_V_last_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_last_V_1_state, "MBA_AXIS_V_last_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_data_out, "MBA_AXIS_V_id_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_vld_in, "MBA_AXIS_V_id_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_vld_out, "MBA_AXIS_V_id_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_ack_in, "MBA_AXIS_V_id_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_ack_out, "MBA_AXIS_V_id_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_sel_rd, "MBA_AXIS_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_sel, "MBA_AXIS_V_id_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_id_V_1_state, "MBA_AXIS_V_id_V_1_state");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_data_out, "MBA_AXIS_V_dest_V_1_data_out");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_vld_in, "MBA_AXIS_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_vld_out, "MBA_AXIS_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_ack_in, "MBA_AXIS_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_ack_out, "MBA_AXIS_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_sel_rd, "MBA_AXIS_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_sel, "MBA_AXIS_V_dest_V_1_sel");
    sc_trace(mVcdFile, MBA_AXIS_V_dest_V_1_state, "MBA_AXIS_V_dest_V_1_state");
    sc_trace(mVcdFile, SLI_AXIS_TDATA_blk_n, "SLI_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, MRI_AXIS_TDATA_blk_n, "MRI_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, STW_AXIS_TDATA_blk_n, "STW_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, MBW_AXIS_TDATA_blk_n, "MBW_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, STA_AXIS_TDATA_blk_n, "STA_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, MBA_AXIS_TDATA_blk_n, "MBA_AXIS_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, res_ba_fu_325_p2, "res_ba_fu_325_p2");
    sc_trace(mVcdFile, prod_iw_fu_319_p2, "prod_iw_fu_319_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pe.hdltvin.dat");
    mHdltvoutHandle.open("pe.hdltvout.dat");
}

pe::~pe() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pe_CONTROL_s_axi_U;
    delete pe_mul_8s_8s_16_1_1_U1;
}

void pe::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void pe::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_vld_out.read()))) {
            MBA_AXIS_V_data_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_ack_in.read()))) {
            MBA_AXIS_V_data_V_1_sel_wr =  (sc_logic) (~MBA_AXIS_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_data_V_1_state.read())))) {
            MBA_AXIS_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_data_V_1_state.read())))) {
            MBA_AXIS_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_ack_out.read()))))) {
            MBA_AXIS_V_data_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_vld_out.read()))) {
            MBA_AXIS_V_dest_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_dest_V_1_state.read())))) {
            MBA_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_dest_V_1_state.read())))) {
            MBA_AXIS_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_dest_V_1_ack_out.read()))))) {
            MBA_AXIS_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_vld_out.read()))) {
            MBA_AXIS_V_id_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_id_V_1_state.read())))) {
            MBA_AXIS_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_id_V_1_state.read())))) {
            MBA_AXIS_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_id_V_1_ack_out.read()))))) {
            MBA_AXIS_V_id_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_vld_out.read()))) {
            MBA_AXIS_V_keep_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_keep_V_1_state.read())))) {
            MBA_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_keep_V_1_state.read())))) {
            MBA_AXIS_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_keep_V_1_ack_out.read()))))) {
            MBA_AXIS_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_vld_out.read()))) {
            MBA_AXIS_V_last_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_last_V_1_state.read())))) {
            MBA_AXIS_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_last_V_1_state.read())))) {
            MBA_AXIS_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_last_V_1_ack_out.read()))))) {
            MBA_AXIS_V_last_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_vld_out.read()))) {
            MBA_AXIS_V_strb_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_strb_V_1_state.read())))) {
            MBA_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_strb_V_1_state.read())))) {
            MBA_AXIS_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_strb_V_1_ack_out.read()))))) {
            MBA_AXIS_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_vld_out.read()))) {
            MBA_AXIS_V_user_V_1_sel_rd =  (sc_logic) (~MBA_AXIS_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBA_AXIS_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_user_V_1_state.read())))) {
            MBA_AXIS_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_user_V_1_state.read())))) {
            MBA_AXIS_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBA_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBA_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBA_AXIS_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_user_V_1_ack_out.read()))))) {
            MBA_AXIS_V_user_V_1_state = ap_const_lv2_3;
        } else {
            MBA_AXIS_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_vld_out.read()))) {
            MBW_AXIS_V_data_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_ack_in.read()))) {
            MBW_AXIS_V_data_V_1_sel_wr =  (sc_logic) (~MBW_AXIS_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_data_V_1_state.read())))) {
            MBW_AXIS_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_data_V_1_state.read())))) {
            MBW_AXIS_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_ack_out.read()))))) {
            MBW_AXIS_V_data_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_vld_out.read()))) {
            MBW_AXIS_V_dest_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_dest_V_1_state.read())))) {
            MBW_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_dest_V_1_state.read())))) {
            MBW_AXIS_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_dest_V_1_ack_out.read()))))) {
            MBW_AXIS_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_vld_out.read()))) {
            MBW_AXIS_V_id_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_id_V_1_state.read())))) {
            MBW_AXIS_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_id_V_1_state.read())))) {
            MBW_AXIS_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_id_V_1_ack_out.read()))))) {
            MBW_AXIS_V_id_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_vld_out.read()))) {
            MBW_AXIS_V_keep_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_keep_V_1_state.read())))) {
            MBW_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_keep_V_1_state.read())))) {
            MBW_AXIS_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_keep_V_1_ack_out.read()))))) {
            MBW_AXIS_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_vld_out.read()))) {
            MBW_AXIS_V_last_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_last_V_1_state.read())))) {
            MBW_AXIS_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_last_V_1_state.read())))) {
            MBW_AXIS_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_last_V_1_ack_out.read()))))) {
            MBW_AXIS_V_last_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_vld_out.read()))) {
            MBW_AXIS_V_strb_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_strb_V_1_state.read())))) {
            MBW_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_strb_V_1_state.read())))) {
            MBW_AXIS_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_strb_V_1_ack_out.read()))))) {
            MBW_AXIS_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_vld_out.read()))) {
            MBW_AXIS_V_user_V_1_sel_rd =  (sc_logic) (~MBW_AXIS_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MBW_AXIS_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_user_V_1_state.read())))) {
            MBW_AXIS_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_user_V_1_state.read())))) {
            MBW_AXIS_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MBW_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MBW_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MBW_AXIS_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_user_V_1_ack_out.read()))))) {
            MBW_AXIS_V_user_V_1_state = ap_const_lv2_3;
        } else {
            MBW_AXIS_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_vld_out.read()))) {
            MRI_AXIS_V_data_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_ack_in.read()))) {
            MRI_AXIS_V_data_V_1_sel_wr =  (sc_logic) (~MRI_AXIS_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_data_V_1_state.read())))) {
            MRI_AXIS_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_data_V_1_state.read())))) {
            MRI_AXIS_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_ack_out.read()))))) {
            MRI_AXIS_V_data_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_vld_out.read()))) {
            MRI_AXIS_V_dest_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_dest_V_1_state.read())))) {
            MRI_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_dest_V_1_state.read())))) {
            MRI_AXIS_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_dest_V_1_ack_out.read()))))) {
            MRI_AXIS_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_vld_out.read()))) {
            MRI_AXIS_V_id_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_id_V_1_state.read())))) {
            MRI_AXIS_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_id_V_1_state.read())))) {
            MRI_AXIS_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_id_V_1_ack_out.read()))))) {
            MRI_AXIS_V_id_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_vld_out.read()))) {
            MRI_AXIS_V_keep_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_keep_V_1_state.read())))) {
            MRI_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_keep_V_1_state.read())))) {
            MRI_AXIS_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_keep_V_1_ack_out.read()))))) {
            MRI_AXIS_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_vld_out.read()))) {
            MRI_AXIS_V_last_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_last_V_1_state.read())))) {
            MRI_AXIS_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_last_V_1_state.read())))) {
            MRI_AXIS_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_last_V_1_ack_out.read()))))) {
            MRI_AXIS_V_last_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_vld_out.read()))) {
            MRI_AXIS_V_strb_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_strb_V_1_state.read())))) {
            MRI_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_strb_V_1_state.read())))) {
            MRI_AXIS_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_strb_V_1_ack_out.read()))))) {
            MRI_AXIS_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_vld_out.read()))) {
            MRI_AXIS_V_user_V_1_sel_rd =  (sc_logic) (~MRI_AXIS_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MRI_AXIS_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_user_V_1_state.read())))) {
            MRI_AXIS_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_user_V_1_state.read())))) {
            MRI_AXIS_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, MRI_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, MRI_AXIS_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, MRI_AXIS_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_user_V_1_ack_out.read()))))) {
            MRI_AXIS_V_user_V_1_state = ap_const_lv2_3;
        } else {
            MRI_AXIS_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        SLI_AXIS_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_vld_out.read()))) {
            SLI_AXIS_V_data_V_0_sel_rd =  (sc_logic) (~SLI_AXIS_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        SLI_AXIS_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_ack_in.read()))) {
            SLI_AXIS_V_data_V_0_sel_wr =  (sc_logic) (~SLI_AXIS_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        SLI_AXIS_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            SLI_AXIS_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            SLI_AXIS_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(SLI_AXIS_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_ack_out.read()))))) {
            SLI_AXIS_V_data_V_0_state = ap_const_lv2_3;
        } else {
            SLI_AXIS_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        SLI_AXIS_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, SLI_AXIS_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, SLI_AXIS_V_dest_V_0_state.read())))) {
            SLI_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, SLI_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, SLI_AXIS_V_dest_V_0_state.read())))) {
            SLI_AXIS_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, SLI_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, SLI_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, SLI_AXIS_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_dest_V_0_ack_out.read()))))) {
            SLI_AXIS_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            SLI_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STA_AXIS_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_vld_out.read()))) {
            STA_AXIS_V_data_V_0_sel_rd =  (sc_logic) (~STA_AXIS_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STA_AXIS_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_ack_in.read()))) {
            STA_AXIS_V_data_V_0_sel_wr =  (sc_logic) (~STA_AXIS_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STA_AXIS_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, STA_AXIS_V_data_V_0_state.read())))) {
            STA_AXIS_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STA_AXIS_V_data_V_0_state.read())))) {
            STA_AXIS_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, STA_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STA_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_ack_out.read()))))) {
            STA_AXIS_V_data_V_0_state = ap_const_lv2_3;
        } else {
            STA_AXIS_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STA_AXIS_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, STA_AXIS_V_dest_V_0_state.read())))) {
            STA_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STA_AXIS_V_dest_V_0_state.read())))) {
            STA_AXIS_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, STA_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STA_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, STA_AXIS_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_dest_V_0_ack_out.read()))))) {
            STA_AXIS_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            STA_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STW_AXIS_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_vld_out.read()))) {
            STW_AXIS_V_data_V_0_sel_rd =  (sc_logic) (~STW_AXIS_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STW_AXIS_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_ack_in.read()))) {
            STW_AXIS_V_data_V_0_sel_wr =  (sc_logic) (~STW_AXIS_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STW_AXIS_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, STW_AXIS_V_data_V_0_state.read())))) {
            STW_AXIS_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STW_AXIS_V_data_V_0_state.read())))) {
            STW_AXIS_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, STW_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STW_AXIS_V_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_ack_out.read()))))) {
            STW_AXIS_V_data_V_0_state = ap_const_lv2_3;
        } else {
            STW_AXIS_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        STW_AXIS_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, STW_AXIS_V_dest_V_0_state.read())))) {
            STW_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STW_AXIS_V_dest_V_0_state.read())))) {
            STW_AXIS_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, STW_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, STW_AXIS_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, STW_AXIS_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_dest_V_0_ack_out.read()))))) {
            STW_AXIS_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            STW_AXIS_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_load_A.read())) {
        MBA_AXIS_V_data_V_1_payload_A = res_ba_fu_325_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_load_B.read())) {
        MBA_AXIS_V_data_V_1_payload_B = res_ba_fu_325_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_load_A.read())) {
        MBW_AXIS_V_data_V_1_payload_A = STW_AXIS_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_load_B.read())) {
        MBW_AXIS_V_data_V_1_payload_B = STW_AXIS_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_load_A.read())) {
        MRI_AXIS_V_data_V_1_payload_A = SLI_AXIS_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_load_B.read())) {
        MRI_AXIS_V_data_V_1_payload_B = SLI_AXIS_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_load_A.read())) {
        SLI_AXIS_V_data_V_0_payload_A = SLI_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_load_B.read())) {
        SLI_AXIS_V_data_V_0_payload_B = SLI_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_load_A.read())) {
        STA_AXIS_V_data_V_0_payload_A = STA_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_load_B.read())) {
        STA_AXIS_V_data_V_0_payload_B = STA_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_load_A.read())) {
        STW_AXIS_V_data_V_0_payload_A = STW_AXIS_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_load_B.read())) {
        STW_AXIS_V_data_V_0_payload_B = STW_AXIS_TDATA.read();
    }
}

void pe::thread_MBA_AXIS_TDATA() {
    MBA_AXIS_TDATA = MBA_AXIS_V_data_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        MBA_AXIS_TDATA_blk_n = MBA_AXIS_V_data_V_1_state.read()[1];
    } else {
        MBA_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_MBA_AXIS_TDEST() {
    MBA_AXIS_TDEST = MBA_AXIS_V_dest_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TID() {
    MBA_AXIS_TID = MBA_AXIS_V_id_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TKEEP() {
    MBA_AXIS_TKEEP = MBA_AXIS_V_keep_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TLAST() {
    MBA_AXIS_TLAST = MBA_AXIS_V_last_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TSTRB() {
    MBA_AXIS_TSTRB = MBA_AXIS_V_strb_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TUSER() {
    MBA_AXIS_TUSER = MBA_AXIS_V_user_V_1_data_out.read();
}

void pe::thread_MBA_AXIS_TVALID() {
    MBA_AXIS_TVALID = MBA_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_data_V_1_ack_in() {
    MBA_AXIS_V_data_V_1_ack_in = MBA_AXIS_V_data_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_data_V_1_ack_out() {
    MBA_AXIS_V_data_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBA_AXIS_V_data_V_1_sel.read())) {
        MBA_AXIS_V_data_V_1_data_out = MBA_AXIS_V_data_V_1_payload_B.read();
    } else {
        MBA_AXIS_V_data_V_1_data_out = MBA_AXIS_V_data_V_1_payload_A.read();
    }
}

void pe::thread_MBA_AXIS_V_data_V_1_load_A() {
    MBA_AXIS_V_data_V_1_load_A = (MBA_AXIS_V_data_V_1_state_cmp_full.read() & ~MBA_AXIS_V_data_V_1_sel_wr.read());
}

void pe::thread_MBA_AXIS_V_data_V_1_load_B() {
    MBA_AXIS_V_data_V_1_load_B = (MBA_AXIS_V_data_V_1_sel_wr.read() & MBA_AXIS_V_data_V_1_state_cmp_full.read());
}

void pe::thread_MBA_AXIS_V_data_V_1_sel() {
    MBA_AXIS_V_data_V_1_sel = MBA_AXIS_V_data_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_data_V_1_state_cmp_full() {
    MBA_AXIS_V_data_V_1_state_cmp_full =  (sc_logic) ((!MBA_AXIS_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(MBA_AXIS_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_MBA_AXIS_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_data_V_1_vld_out() {
    MBA_AXIS_V_data_V_1_vld_out = MBA_AXIS_V_data_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_dest_V_1_ack_in() {
    MBA_AXIS_V_dest_V_1_ack_in = MBA_AXIS_V_dest_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_dest_V_1_ack_out() {
    MBA_AXIS_V_dest_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_dest_V_1_data_out() {
    MBA_AXIS_V_dest_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MBA_AXIS_V_dest_V_1_sel() {
    MBA_AXIS_V_dest_V_1_sel = MBA_AXIS_V_dest_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_dest_V_1_vld_out() {
    MBA_AXIS_V_dest_V_1_vld_out = MBA_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_id_V_1_ack_in() {
    MBA_AXIS_V_id_V_1_ack_in = MBA_AXIS_V_id_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_id_V_1_ack_out() {
    MBA_AXIS_V_id_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_id_V_1_data_out() {
    MBA_AXIS_V_id_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MBA_AXIS_V_id_V_1_sel() {
    MBA_AXIS_V_id_V_1_sel = MBA_AXIS_V_id_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_id_V_1_vld_out() {
    MBA_AXIS_V_id_V_1_vld_out = MBA_AXIS_V_id_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_keep_V_1_ack_in() {
    MBA_AXIS_V_keep_V_1_ack_in = MBA_AXIS_V_keep_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_keep_V_1_ack_out() {
    MBA_AXIS_V_keep_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_keep_V_1_data_out() {
    MBA_AXIS_V_keep_V_1_data_out = ap_const_lv2_3;
}

void pe::thread_MBA_AXIS_V_keep_V_1_sel() {
    MBA_AXIS_V_keep_V_1_sel = MBA_AXIS_V_keep_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_keep_V_1_vld_out() {
    MBA_AXIS_V_keep_V_1_vld_out = MBA_AXIS_V_keep_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_last_V_1_ack_in() {
    MBA_AXIS_V_last_V_1_ack_in = MBA_AXIS_V_last_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_last_V_1_ack_out() {
    MBA_AXIS_V_last_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_last_V_1_data_out() {
    MBA_AXIS_V_last_V_1_data_out = ap_const_lv1_0;
}

void pe::thread_MBA_AXIS_V_last_V_1_sel() {
    MBA_AXIS_V_last_V_1_sel = MBA_AXIS_V_last_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_last_V_1_vld_out() {
    MBA_AXIS_V_last_V_1_vld_out = MBA_AXIS_V_last_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_strb_V_1_ack_in() {
    MBA_AXIS_V_strb_V_1_ack_in = MBA_AXIS_V_strb_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_strb_V_1_ack_out() {
    MBA_AXIS_V_strb_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_strb_V_1_data_out() {
    MBA_AXIS_V_strb_V_1_data_out = ap_const_lv2_3;
}

void pe::thread_MBA_AXIS_V_strb_V_1_sel() {
    MBA_AXIS_V_strb_V_1_sel = MBA_AXIS_V_strb_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_strb_V_1_vld_out() {
    MBA_AXIS_V_strb_V_1_vld_out = MBA_AXIS_V_strb_V_1_state.read()[0];
}

void pe::thread_MBA_AXIS_V_user_V_1_ack_in() {
    MBA_AXIS_V_user_V_1_ack_in = MBA_AXIS_V_user_V_1_state.read()[1];
}

void pe::thread_MBA_AXIS_V_user_V_1_ack_out() {
    MBA_AXIS_V_user_V_1_ack_out = MBA_AXIS_TREADY.read();
}

void pe::thread_MBA_AXIS_V_user_V_1_data_out() {
    MBA_AXIS_V_user_V_1_data_out = ap_const_lv4_0;
}

void pe::thread_MBA_AXIS_V_user_V_1_sel() {
    MBA_AXIS_V_user_V_1_sel = MBA_AXIS_V_user_V_1_sel_rd.read();
}

void pe::thread_MBA_AXIS_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBA_AXIS_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        MBA_AXIS_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBA_AXIS_V_user_V_1_vld_out() {
    MBA_AXIS_V_user_V_1_vld_out = MBA_AXIS_V_user_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_TDATA() {
    MBW_AXIS_TDATA = MBW_AXIS_V_data_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        MBW_AXIS_TDATA_blk_n = MBW_AXIS_V_data_V_1_state.read()[1];
    } else {
        MBW_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_MBW_AXIS_TDEST() {
    MBW_AXIS_TDEST = MBW_AXIS_V_dest_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TID() {
    MBW_AXIS_TID = MBW_AXIS_V_id_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TKEEP() {
    MBW_AXIS_TKEEP = MBW_AXIS_V_keep_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TLAST() {
    MBW_AXIS_TLAST = MBW_AXIS_V_last_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TSTRB() {
    MBW_AXIS_TSTRB = MBW_AXIS_V_strb_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TUSER() {
    MBW_AXIS_TUSER = MBW_AXIS_V_user_V_1_data_out.read();
}

void pe::thread_MBW_AXIS_TVALID() {
    MBW_AXIS_TVALID = MBW_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_data_V_1_ack_in() {
    MBW_AXIS_V_data_V_1_ack_in = MBW_AXIS_V_data_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_data_V_1_ack_out() {
    MBW_AXIS_V_data_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, MBW_AXIS_V_data_V_1_sel.read())) {
        MBW_AXIS_V_data_V_1_data_out = MBW_AXIS_V_data_V_1_payload_B.read();
    } else {
        MBW_AXIS_V_data_V_1_data_out = MBW_AXIS_V_data_V_1_payload_A.read();
    }
}

void pe::thread_MBW_AXIS_V_data_V_1_load_A() {
    MBW_AXIS_V_data_V_1_load_A = (MBW_AXIS_V_data_V_1_state_cmp_full.read() & ~MBW_AXIS_V_data_V_1_sel_wr.read());
}

void pe::thread_MBW_AXIS_V_data_V_1_load_B() {
    MBW_AXIS_V_data_V_1_load_B = (MBW_AXIS_V_data_V_1_sel_wr.read() & MBW_AXIS_V_data_V_1_state_cmp_full.read());
}

void pe::thread_MBW_AXIS_V_data_V_1_sel() {
    MBW_AXIS_V_data_V_1_sel = MBW_AXIS_V_data_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_data_V_1_state_cmp_full() {
    MBW_AXIS_V_data_V_1_state_cmp_full =  (sc_logic) ((!MBW_AXIS_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(MBW_AXIS_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_MBW_AXIS_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_data_V_1_vld_out() {
    MBW_AXIS_V_data_V_1_vld_out = MBW_AXIS_V_data_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_dest_V_1_ack_in() {
    MBW_AXIS_V_dest_V_1_ack_in = MBW_AXIS_V_dest_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_dest_V_1_ack_out() {
    MBW_AXIS_V_dest_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_dest_V_1_data_out() {
    MBW_AXIS_V_dest_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MBW_AXIS_V_dest_V_1_sel() {
    MBW_AXIS_V_dest_V_1_sel = MBW_AXIS_V_dest_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_dest_V_1_vld_out() {
    MBW_AXIS_V_dest_V_1_vld_out = MBW_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_id_V_1_ack_in() {
    MBW_AXIS_V_id_V_1_ack_in = MBW_AXIS_V_id_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_id_V_1_ack_out() {
    MBW_AXIS_V_id_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_id_V_1_data_out() {
    MBW_AXIS_V_id_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MBW_AXIS_V_id_V_1_sel() {
    MBW_AXIS_V_id_V_1_sel = MBW_AXIS_V_id_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_id_V_1_vld_out() {
    MBW_AXIS_V_id_V_1_vld_out = MBW_AXIS_V_id_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_keep_V_1_ack_in() {
    MBW_AXIS_V_keep_V_1_ack_in = MBW_AXIS_V_keep_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_keep_V_1_ack_out() {
    MBW_AXIS_V_keep_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_keep_V_1_data_out() {
    MBW_AXIS_V_keep_V_1_data_out = ap_const_lv1_1;
}

void pe::thread_MBW_AXIS_V_keep_V_1_sel() {
    MBW_AXIS_V_keep_V_1_sel = MBW_AXIS_V_keep_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_keep_V_1_vld_out() {
    MBW_AXIS_V_keep_V_1_vld_out = MBW_AXIS_V_keep_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_last_V_1_ack_in() {
    MBW_AXIS_V_last_V_1_ack_in = MBW_AXIS_V_last_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_last_V_1_ack_out() {
    MBW_AXIS_V_last_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_last_V_1_data_out() {
    MBW_AXIS_V_last_V_1_data_out = ap_const_lv1_0;
}

void pe::thread_MBW_AXIS_V_last_V_1_sel() {
    MBW_AXIS_V_last_V_1_sel = MBW_AXIS_V_last_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_last_V_1_vld_out() {
    MBW_AXIS_V_last_V_1_vld_out = MBW_AXIS_V_last_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_strb_V_1_ack_in() {
    MBW_AXIS_V_strb_V_1_ack_in = MBW_AXIS_V_strb_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_strb_V_1_ack_out() {
    MBW_AXIS_V_strb_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_strb_V_1_data_out() {
    MBW_AXIS_V_strb_V_1_data_out = ap_const_lv1_1;
}

void pe::thread_MBW_AXIS_V_strb_V_1_sel() {
    MBW_AXIS_V_strb_V_1_sel = MBW_AXIS_V_strb_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_strb_V_1_vld_out() {
    MBW_AXIS_V_strb_V_1_vld_out = MBW_AXIS_V_strb_V_1_state.read()[0];
}

void pe::thread_MBW_AXIS_V_user_V_1_ack_in() {
    MBW_AXIS_V_user_V_1_ack_in = MBW_AXIS_V_user_V_1_state.read()[1];
}

void pe::thread_MBW_AXIS_V_user_V_1_ack_out() {
    MBW_AXIS_V_user_V_1_ack_out = MBW_AXIS_TREADY.read();
}

void pe::thread_MBW_AXIS_V_user_V_1_data_out() {
    MBW_AXIS_V_user_V_1_data_out = ap_const_lv4_0;
}

void pe::thread_MBW_AXIS_V_user_V_1_sel() {
    MBW_AXIS_V_user_V_1_sel = MBW_AXIS_V_user_V_1_sel_rd.read();
}

void pe::thread_MBW_AXIS_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MBW_AXIS_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        MBW_AXIS_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MBW_AXIS_V_user_V_1_vld_out() {
    MBW_AXIS_V_user_V_1_vld_out = MBW_AXIS_V_user_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_TDATA() {
    MRI_AXIS_TDATA = MRI_AXIS_V_data_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        MRI_AXIS_TDATA_blk_n = MRI_AXIS_V_data_V_1_state.read()[1];
    } else {
        MRI_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_MRI_AXIS_TDEST() {
    MRI_AXIS_TDEST = MRI_AXIS_V_dest_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TID() {
    MRI_AXIS_TID = MRI_AXIS_V_id_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TKEEP() {
    MRI_AXIS_TKEEP = MRI_AXIS_V_keep_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TLAST() {
    MRI_AXIS_TLAST = MRI_AXIS_V_last_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TSTRB() {
    MRI_AXIS_TSTRB = MRI_AXIS_V_strb_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TUSER() {
    MRI_AXIS_TUSER = MRI_AXIS_V_user_V_1_data_out.read();
}

void pe::thread_MRI_AXIS_TVALID() {
    MRI_AXIS_TVALID = MRI_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_data_V_1_ack_in() {
    MRI_AXIS_V_data_V_1_ack_in = MRI_AXIS_V_data_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_data_V_1_ack_out() {
    MRI_AXIS_V_data_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, MRI_AXIS_V_data_V_1_sel.read())) {
        MRI_AXIS_V_data_V_1_data_out = MRI_AXIS_V_data_V_1_payload_B.read();
    } else {
        MRI_AXIS_V_data_V_1_data_out = MRI_AXIS_V_data_V_1_payload_A.read();
    }
}

void pe::thread_MRI_AXIS_V_data_V_1_load_A() {
    MRI_AXIS_V_data_V_1_load_A = (MRI_AXIS_V_data_V_1_state_cmp_full.read() & ~MRI_AXIS_V_data_V_1_sel_wr.read());
}

void pe::thread_MRI_AXIS_V_data_V_1_load_B() {
    MRI_AXIS_V_data_V_1_load_B = (MRI_AXIS_V_data_V_1_sel_wr.read() & MRI_AXIS_V_data_V_1_state_cmp_full.read());
}

void pe::thread_MRI_AXIS_V_data_V_1_sel() {
    MRI_AXIS_V_data_V_1_sel = MRI_AXIS_V_data_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_data_V_1_state_cmp_full() {
    MRI_AXIS_V_data_V_1_state_cmp_full =  (sc_logic) ((!MRI_AXIS_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(MRI_AXIS_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_MRI_AXIS_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_data_V_1_vld_out() {
    MRI_AXIS_V_data_V_1_vld_out = MRI_AXIS_V_data_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_dest_V_1_ack_in() {
    MRI_AXIS_V_dest_V_1_ack_in = MRI_AXIS_V_dest_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_dest_V_1_ack_out() {
    MRI_AXIS_V_dest_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_dest_V_1_data_out() {
    MRI_AXIS_V_dest_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MRI_AXIS_V_dest_V_1_sel() {
    MRI_AXIS_V_dest_V_1_sel = MRI_AXIS_V_dest_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_dest_V_1_vld_out() {
    MRI_AXIS_V_dest_V_1_vld_out = MRI_AXIS_V_dest_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_id_V_1_ack_in() {
    MRI_AXIS_V_id_V_1_ack_in = MRI_AXIS_V_id_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_id_V_1_ack_out() {
    MRI_AXIS_V_id_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_id_V_1_data_out() {
    MRI_AXIS_V_id_V_1_data_out = ap_const_lv5_0;
}

void pe::thread_MRI_AXIS_V_id_V_1_sel() {
    MRI_AXIS_V_id_V_1_sel = MRI_AXIS_V_id_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_id_V_1_vld_out() {
    MRI_AXIS_V_id_V_1_vld_out = MRI_AXIS_V_id_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_keep_V_1_ack_in() {
    MRI_AXIS_V_keep_V_1_ack_in = MRI_AXIS_V_keep_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_keep_V_1_ack_out() {
    MRI_AXIS_V_keep_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_keep_V_1_data_out() {
    MRI_AXIS_V_keep_V_1_data_out = ap_const_lv1_1;
}

void pe::thread_MRI_AXIS_V_keep_V_1_sel() {
    MRI_AXIS_V_keep_V_1_sel = MRI_AXIS_V_keep_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_keep_V_1_vld_out() {
    MRI_AXIS_V_keep_V_1_vld_out = MRI_AXIS_V_keep_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_last_V_1_ack_in() {
    MRI_AXIS_V_last_V_1_ack_in = MRI_AXIS_V_last_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_last_V_1_ack_out() {
    MRI_AXIS_V_last_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_last_V_1_data_out() {
    MRI_AXIS_V_last_V_1_data_out = ap_const_lv1_0;
}

void pe::thread_MRI_AXIS_V_last_V_1_sel() {
    MRI_AXIS_V_last_V_1_sel = MRI_AXIS_V_last_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_last_V_1_vld_out() {
    MRI_AXIS_V_last_V_1_vld_out = MRI_AXIS_V_last_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_strb_V_1_ack_in() {
    MRI_AXIS_V_strb_V_1_ack_in = MRI_AXIS_V_strb_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_strb_V_1_ack_out() {
    MRI_AXIS_V_strb_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_strb_V_1_data_out() {
    MRI_AXIS_V_strb_V_1_data_out = ap_const_lv1_1;
}

void pe::thread_MRI_AXIS_V_strb_V_1_sel() {
    MRI_AXIS_V_strb_V_1_sel = MRI_AXIS_V_strb_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_strb_V_1_vld_out() {
    MRI_AXIS_V_strb_V_1_vld_out = MRI_AXIS_V_strb_V_1_state.read()[0];
}

void pe::thread_MRI_AXIS_V_user_V_1_ack_in() {
    MRI_AXIS_V_user_V_1_ack_in = MRI_AXIS_V_user_V_1_state.read()[1];
}

void pe::thread_MRI_AXIS_V_user_V_1_ack_out() {
    MRI_AXIS_V_user_V_1_ack_out = MRI_AXIS_TREADY.read();
}

void pe::thread_MRI_AXIS_V_user_V_1_data_out() {
    MRI_AXIS_V_user_V_1_data_out = ap_const_lv4_0;
}

void pe::thread_MRI_AXIS_V_user_V_1_sel() {
    MRI_AXIS_V_user_V_1_sel = MRI_AXIS_V_user_V_1_sel_rd.read();
}

void pe::thread_MRI_AXIS_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        MRI_AXIS_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        MRI_AXIS_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void pe::thread_MRI_AXIS_V_user_V_1_vld_out() {
    MRI_AXIS_V_user_V_1_vld_out = MRI_AXIS_V_user_V_1_state.read()[0];
}

void pe::thread_SLI_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        SLI_AXIS_TDATA_blk_n = SLI_AXIS_V_data_V_0_state.read()[0];
    } else {
        SLI_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_SLI_AXIS_TREADY() {
    SLI_AXIS_TREADY = SLI_AXIS_V_dest_V_0_state.read()[1];
}

void pe::thread_SLI_AXIS_V_data_V_0_ack_in() {
    SLI_AXIS_V_data_V_0_ack_in = SLI_AXIS_V_data_V_0_state.read()[1];
}

void pe::thread_SLI_AXIS_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        SLI_AXIS_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        SLI_AXIS_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_SLI_AXIS_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, SLI_AXIS_V_data_V_0_sel.read())) {
        SLI_AXIS_V_data_V_0_data_out = SLI_AXIS_V_data_V_0_payload_B.read();
    } else {
        SLI_AXIS_V_data_V_0_data_out = SLI_AXIS_V_data_V_0_payload_A.read();
    }
}

void pe::thread_SLI_AXIS_V_data_V_0_load_A() {
    SLI_AXIS_V_data_V_0_load_A = (SLI_AXIS_V_data_V_0_state_cmp_full.read() & ~SLI_AXIS_V_data_V_0_sel_wr.read());
}

void pe::thread_SLI_AXIS_V_data_V_0_load_B() {
    SLI_AXIS_V_data_V_0_load_B = (SLI_AXIS_V_data_V_0_sel_wr.read() & SLI_AXIS_V_data_V_0_state_cmp_full.read());
}

void pe::thread_SLI_AXIS_V_data_V_0_sel() {
    SLI_AXIS_V_data_V_0_sel = SLI_AXIS_V_data_V_0_sel_rd.read();
}

void pe::thread_SLI_AXIS_V_data_V_0_state_cmp_full() {
    SLI_AXIS_V_data_V_0_state_cmp_full =  (sc_logic) ((!SLI_AXIS_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(SLI_AXIS_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_SLI_AXIS_V_data_V_0_vld_in() {
    SLI_AXIS_V_data_V_0_vld_in = SLI_AXIS_TVALID.read();
}

void pe::thread_SLI_AXIS_V_data_V_0_vld_out() {
    SLI_AXIS_V_data_V_0_vld_out = SLI_AXIS_V_data_V_0_state.read()[0];
}

void pe::thread_SLI_AXIS_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        SLI_AXIS_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        SLI_AXIS_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_SLI_AXIS_V_dest_V_0_vld_in() {
    SLI_AXIS_V_dest_V_0_vld_in = SLI_AXIS_TVALID.read();
}

void pe::thread_STA_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        STA_AXIS_TDATA_blk_n = STA_AXIS_V_data_V_0_state.read()[0];
    } else {
        STA_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_STA_AXIS_TREADY() {
    STA_AXIS_TREADY = STA_AXIS_V_dest_V_0_state.read()[1];
}

void pe::thread_STA_AXIS_V_data_V_0_ack_in() {
    STA_AXIS_V_data_V_0_ack_in = STA_AXIS_V_data_V_0_state.read()[1];
}

void pe::thread_STA_AXIS_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        STA_AXIS_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        STA_AXIS_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_STA_AXIS_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, STA_AXIS_V_data_V_0_sel.read())) {
        STA_AXIS_V_data_V_0_data_out = STA_AXIS_V_data_V_0_payload_B.read();
    } else {
        STA_AXIS_V_data_V_0_data_out = STA_AXIS_V_data_V_0_payload_A.read();
    }
}

void pe::thread_STA_AXIS_V_data_V_0_load_A() {
    STA_AXIS_V_data_V_0_load_A = (STA_AXIS_V_data_V_0_state_cmp_full.read() & ~STA_AXIS_V_data_V_0_sel_wr.read());
}

void pe::thread_STA_AXIS_V_data_V_0_load_B() {
    STA_AXIS_V_data_V_0_load_B = (STA_AXIS_V_data_V_0_sel_wr.read() & STA_AXIS_V_data_V_0_state_cmp_full.read());
}

void pe::thread_STA_AXIS_V_data_V_0_sel() {
    STA_AXIS_V_data_V_0_sel = STA_AXIS_V_data_V_0_sel_rd.read();
}

void pe::thread_STA_AXIS_V_data_V_0_state_cmp_full() {
    STA_AXIS_V_data_V_0_state_cmp_full =  (sc_logic) ((!STA_AXIS_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(STA_AXIS_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_STA_AXIS_V_data_V_0_vld_in() {
    STA_AXIS_V_data_V_0_vld_in = STA_AXIS_TVALID.read();
}

void pe::thread_STA_AXIS_V_data_V_0_vld_out() {
    STA_AXIS_V_data_V_0_vld_out = STA_AXIS_V_data_V_0_state.read()[0];
}

void pe::thread_STA_AXIS_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        STA_AXIS_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        STA_AXIS_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_STA_AXIS_V_dest_V_0_vld_in() {
    STA_AXIS_V_dest_V_0_vld_in = STA_AXIS_TVALID.read();
}

void pe::thread_STW_AXIS_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        STW_AXIS_TDATA_blk_n = STW_AXIS_V_data_V_0_state.read()[0];
    } else {
        STW_AXIS_TDATA_blk_n = ap_const_logic_1;
    }
}

void pe::thread_STW_AXIS_TREADY() {
    STW_AXIS_TREADY = STW_AXIS_V_dest_V_0_state.read()[1];
}

void pe::thread_STW_AXIS_V_data_V_0_ack_in() {
    STW_AXIS_V_data_V_0_ack_in = STW_AXIS_V_data_V_0_state.read()[1];
}

void pe::thread_STW_AXIS_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        STW_AXIS_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        STW_AXIS_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_STW_AXIS_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, STW_AXIS_V_data_V_0_sel.read())) {
        STW_AXIS_V_data_V_0_data_out = STW_AXIS_V_data_V_0_payload_B.read();
    } else {
        STW_AXIS_V_data_V_0_data_out = STW_AXIS_V_data_V_0_payload_A.read();
    }
}

void pe::thread_STW_AXIS_V_data_V_0_load_A() {
    STW_AXIS_V_data_V_0_load_A = (STW_AXIS_V_data_V_0_state_cmp_full.read() & ~STW_AXIS_V_data_V_0_sel_wr.read());
}

void pe::thread_STW_AXIS_V_data_V_0_load_B() {
    STW_AXIS_V_data_V_0_load_B = (STW_AXIS_V_data_V_0_sel_wr.read() & STW_AXIS_V_data_V_0_state_cmp_full.read());
}

void pe::thread_STW_AXIS_V_data_V_0_sel() {
    STW_AXIS_V_data_V_0_sel = STW_AXIS_V_data_V_0_sel_rd.read();
}

void pe::thread_STW_AXIS_V_data_V_0_state_cmp_full() {
    STW_AXIS_V_data_V_0_state_cmp_full =  (sc_logic) ((!STW_AXIS_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(STW_AXIS_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void pe::thread_STW_AXIS_V_data_V_0_vld_in() {
    STW_AXIS_V_data_V_0_vld_in = STW_AXIS_TVALID.read();
}

void pe::thread_STW_AXIS_V_data_V_0_vld_out() {
    STW_AXIS_V_data_V_0_vld_out = STW_AXIS_V_data_V_0_state.read()[0];
}

void pe::thread_STW_AXIS_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        STW_AXIS_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        STW_AXIS_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void pe::thread_STW_AXIS_V_dest_V_0_vld_in() {
    STW_AXIS_V_dest_V_0_vld_in = STW_AXIS_TVALID.read();
}

void pe::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pe::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pe::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()));
}

void pe::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()));
}

void pe::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_in.read()));
}

void pe::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()));
}

void pe::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pe::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pe::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pe::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pe::thread_res_ba_fu_325_p2() {
    res_ba_fu_325_p2 = (!STA_AXIS_V_data_V_0_data_out.read().is_01() || !prod_iw_fu_319_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(STA_AXIS_V_data_V_0_data_out.read()) + sc_biguint<16>(prod_iw_fu_319_p2.read()));
}

void pe::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, SLI_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STW_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, STA_AXIS_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_state.read()[0]) && !(esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MRI_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBW_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MBA_AXIS_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void pe::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TDATA\" :  \"" << SLI_AXIS_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TVALID\" :  \"" << SLI_AXIS_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"SLI_AXIS_TREADY\" :  \"" << SLI_AXIS_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TKEEP\" :  \"" << SLI_AXIS_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TSTRB\" :  \"" << SLI_AXIS_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TUSER\" :  \"" << SLI_AXIS_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TLAST\" :  \"" << SLI_AXIS_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TID\" :  \"" << SLI_AXIS_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"SLI_AXIS_TDEST\" :  \"" << SLI_AXIS_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TDATA\" :  \"" << MRI_AXIS_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TVALID\" :  \"" << MRI_AXIS_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MRI_AXIS_TREADY\" :  \"" << MRI_AXIS_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TKEEP\" :  \"" << MRI_AXIS_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TSTRB\" :  \"" << MRI_AXIS_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TUSER\" :  \"" << MRI_AXIS_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TLAST\" :  \"" << MRI_AXIS_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TID\" :  \"" << MRI_AXIS_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MRI_AXIS_TDEST\" :  \"" << MRI_AXIS_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TDATA\" :  \"" << STW_AXIS_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TVALID\" :  \"" << STW_AXIS_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"STW_AXIS_TREADY\" :  \"" << STW_AXIS_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TKEEP\" :  \"" << STW_AXIS_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TSTRB\" :  \"" << STW_AXIS_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TUSER\" :  \"" << STW_AXIS_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TLAST\" :  \"" << STW_AXIS_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TID\" :  \"" << STW_AXIS_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STW_AXIS_TDEST\" :  \"" << STW_AXIS_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TDATA\" :  \"" << MBW_AXIS_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TVALID\" :  \"" << MBW_AXIS_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MBW_AXIS_TREADY\" :  \"" << MBW_AXIS_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TKEEP\" :  \"" << MBW_AXIS_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TSTRB\" :  \"" << MBW_AXIS_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TUSER\" :  \"" << MBW_AXIS_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TLAST\" :  \"" << MBW_AXIS_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TID\" :  \"" << MBW_AXIS_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBW_AXIS_TDEST\" :  \"" << MBW_AXIS_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TDATA\" :  \"" << STA_AXIS_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TVALID\" :  \"" << STA_AXIS_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"STA_AXIS_TREADY\" :  \"" << STA_AXIS_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TKEEP\" :  \"" << STA_AXIS_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TSTRB\" :  \"" << STA_AXIS_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TUSER\" :  \"" << STA_AXIS_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TLAST\" :  \"" << STA_AXIS_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TID\" :  \"" << STA_AXIS_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"STA_AXIS_TDEST\" :  \"" << STA_AXIS_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TDATA\" :  \"" << MBA_AXIS_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TVALID\" :  \"" << MBA_AXIS_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MBA_AXIS_TREADY\" :  \"" << MBA_AXIS_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TKEEP\" :  \"" << MBA_AXIS_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TSTRB\" :  \"" << MBA_AXIS_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TUSER\" :  \"" << MBA_AXIS_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TLAST\" :  \"" << MBA_AXIS_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TID\" :  \"" << MBA_AXIS_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MBA_AXIS_TDEST\" :  \"" << MBA_AXIS_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_AWVALID\" :  \"" << s_axi_CONTROL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_AWREADY\" :  \"" << s_axi_CONTROL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_AWADDR\" :  \"" << s_axi_CONTROL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_WVALID\" :  \"" << s_axi_CONTROL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_WREADY\" :  \"" << s_axi_CONTROL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_WDATA\" :  \"" << s_axi_CONTROL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_WSTRB\" :  \"" << s_axi_CONTROL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_ARVALID\" :  \"" << s_axi_CONTROL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_ARREADY\" :  \"" << s_axi_CONTROL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_ARADDR\" :  \"" << s_axi_CONTROL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_RVALID\" :  \"" << s_axi_CONTROL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_RREADY\" :  \"" << s_axi_CONTROL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_RDATA\" :  \"" << s_axi_CONTROL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_RRESP\" :  \"" << s_axi_CONTROL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BVALID\" :  \"" << s_axi_CONTROL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BREADY\" :  \"" << s_axi_CONTROL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BRESP\" :  \"" << s_axi_CONTROL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

