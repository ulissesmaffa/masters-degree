-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pe is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    SLI_AXIS_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    SLI_AXIS_TVALID : IN STD_LOGIC;
    SLI_AXIS_TREADY : OUT STD_LOGIC;
    SLI_AXIS_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    SLI_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    SLI_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    SLI_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MRI_AXIS_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    MRI_AXIS_TVALID : OUT STD_LOGIC;
    MRI_AXIS_TREADY : IN STD_LOGIC;
    MRI_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MRI_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MRI_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MRI_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    STW_AXIS_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    STW_AXIS_TVALID : IN STD_LOGIC;
    STW_AXIS_TREADY : OUT STD_LOGIC;
    STW_AXIS_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    STW_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    STW_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    STW_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MBW_AXIS_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    MBW_AXIS_TVALID : OUT STD_LOGIC;
    MBW_AXIS_TREADY : IN STD_LOGIC;
    MBW_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MBW_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBW_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MBW_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    STA_AXIS_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    STA_AXIS_TVALID : IN STD_LOGIC;
    STA_AXIS_TREADY : OUT STD_LOGIC;
    STA_AXIS_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    STA_AXIS_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    STA_AXIS_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    STA_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    STA_AXIS_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    STA_AXIS_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    MBA_AXIS_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    MBA_AXIS_TVALID : OUT STD_LOGIC;
    MBA_AXIS_TREADY : IN STD_LOGIC;
    MBA_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    MBA_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    MBA_AXIS_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MBA_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    MBA_AXIS_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    MBA_AXIS_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pe is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pe,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.503000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=731,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal SLI_AXIS_V_data_V_0_vld_in : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_vld_out : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_ack_in : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_ack_out : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal SLI_AXIS_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal SLI_AXIS_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal SLI_AXIS_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal SLI_AXIS_V_data_V_0_sel : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_load_A : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_load_B : STD_LOGIC;
    signal SLI_AXIS_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal SLI_AXIS_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal SLI_AXIS_V_dest_V_0_vld_in : STD_LOGIC;
    signal SLI_AXIS_V_dest_V_0_ack_out : STD_LOGIC;
    signal SLI_AXIS_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal MRI_AXIS_V_data_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal MRI_AXIS_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal MRI_AXIS_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal MRI_AXIS_V_data_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_load_A : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_load_B : STD_LOGIC;
    signal MRI_AXIS_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MRI_AXIS_V_keep_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_keep_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MRI_AXIS_V_strb_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_strb_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_strb_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_strb_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_strb_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal MRI_AXIS_V_user_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_user_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_user_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_user_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_user_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MRI_AXIS_V_last_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_last_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_last_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_last_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_last_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MRI_AXIS_V_id_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_id_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_id_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_id_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_id_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MRI_AXIS_V_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MRI_AXIS_V_dest_V_1_vld_in : STD_LOGIC;
    signal MRI_AXIS_V_dest_V_1_vld_out : STD_LOGIC;
    signal MRI_AXIS_V_dest_V_1_ack_in : STD_LOGIC;
    signal MRI_AXIS_V_dest_V_1_ack_out : STD_LOGIC;
    signal MRI_AXIS_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal MRI_AXIS_V_dest_V_1_sel : STD_LOGIC;
    signal MRI_AXIS_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal STW_AXIS_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal STW_AXIS_V_data_V_0_vld_in : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_vld_out : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_ack_in : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_ack_out : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal STW_AXIS_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal STW_AXIS_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal STW_AXIS_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal STW_AXIS_V_data_V_0_sel : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_load_A : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_load_B : STD_LOGIC;
    signal STW_AXIS_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal STW_AXIS_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal STW_AXIS_V_dest_V_0_vld_in : STD_LOGIC;
    signal STW_AXIS_V_dest_V_0_ack_out : STD_LOGIC;
    signal STW_AXIS_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal MBW_AXIS_V_data_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal MBW_AXIS_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal MBW_AXIS_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal MBW_AXIS_V_data_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_load_A : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_load_B : STD_LOGIC;
    signal MBW_AXIS_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MBW_AXIS_V_keep_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_keep_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MBW_AXIS_V_strb_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_strb_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_strb_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_strb_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_strb_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal MBW_AXIS_V_user_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_user_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_user_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_user_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_user_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MBW_AXIS_V_last_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_last_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_last_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_last_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_last_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MBW_AXIS_V_id_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_id_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_id_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_id_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_id_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBW_AXIS_V_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MBW_AXIS_V_dest_V_1_vld_in : STD_LOGIC;
    signal MBW_AXIS_V_dest_V_1_vld_out : STD_LOGIC;
    signal MBW_AXIS_V_dest_V_1_ack_in : STD_LOGIC;
    signal MBW_AXIS_V_dest_V_1_ack_out : STD_LOGIC;
    signal MBW_AXIS_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal MBW_AXIS_V_dest_V_1_sel : STD_LOGIC;
    signal MBW_AXIS_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal STA_AXIS_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal STA_AXIS_V_data_V_0_vld_in : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_vld_out : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_ack_in : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_ack_out : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal STA_AXIS_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal STA_AXIS_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal STA_AXIS_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal STA_AXIS_V_data_V_0_sel : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_load_A : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_load_B : STD_LOGIC;
    signal STA_AXIS_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal STA_AXIS_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal STA_AXIS_V_dest_V_0_vld_in : STD_LOGIC;
    signal STA_AXIS_V_dest_V_0_ack_out : STD_LOGIC;
    signal STA_AXIS_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_data_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal MBA_AXIS_V_data_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal MBA_AXIS_V_data_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal MBA_AXIS_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal MBA_AXIS_V_data_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_load_A : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_load_B : STD_LOGIC;
    signal MBA_AXIS_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal MBA_AXIS_V_keep_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_keep_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_strb_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal MBA_AXIS_V_strb_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_strb_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_strb_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_strb_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_strb_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal MBA_AXIS_V_user_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_user_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_user_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_user_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_user_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal MBA_AXIS_V_last_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_last_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_last_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_last_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_last_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MBA_AXIS_V_id_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_id_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_id_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_id_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_id_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MBA_AXIS_V_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal MBA_AXIS_V_dest_V_1_vld_in : STD_LOGIC;
    signal MBA_AXIS_V_dest_V_1_vld_out : STD_LOGIC;
    signal MBA_AXIS_V_dest_V_1_ack_in : STD_LOGIC;
    signal MBA_AXIS_V_dest_V_1_ack_out : STD_LOGIC;
    signal MBA_AXIS_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal MBA_AXIS_V_dest_V_1_sel : STD_LOGIC;
    signal MBA_AXIS_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal SLI_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MRI_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal STW_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MBW_AXIS_TDATA_blk_n : STD_LOGIC;
    signal STA_AXIS_TDATA_blk_n : STD_LOGIC;
    signal MBA_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal res_ba_fu_325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal prod_iw_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component pe_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pe_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    pe_CONTROL_s_axi_U : component pe_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    pe_mul_8s_8s_16_1_1_U1 : component pe_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => STW_AXIS_V_data_V_0_data_out,
        din1 => SLI_AXIS_V_data_V_0_data_out,
        dout => prod_iw_fu_319_p2);





    MBA_AXIS_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_vld_out))) then 
                                        MBA_AXIS_V_data_V_1_sel_rd <= not(MBA_AXIS_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_vld_in))) then 
                                        MBA_AXIS_V_data_V_1_sel_wr <= not(MBA_AXIS_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_ack_out)))) then 
                    MBA_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_vld_in)))) then 
                    MBA_AXIS_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_data_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_data_V_1_vld_in)))) then 
                    MBA_AXIS_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_vld_out))) then 
                                        MBA_AXIS_V_dest_V_1_sel_rd <= not(MBA_AXIS_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_ack_out)))) then 
                    MBA_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_vld_in)))) then 
                    MBA_AXIS_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_dest_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_dest_V_1_vld_in)))) then 
                    MBA_AXIS_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_vld_out))) then 
                                        MBA_AXIS_V_id_V_1_sel_rd <= not(MBA_AXIS_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_ack_out)))) then 
                    MBA_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_vld_in)))) then 
                    MBA_AXIS_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_id_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_id_V_1_vld_in)))) then 
                    MBA_AXIS_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_vld_out))) then 
                                        MBA_AXIS_V_keep_V_1_sel_rd <= not(MBA_AXIS_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_ack_out)))) then 
                    MBA_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_vld_in)))) then 
                    MBA_AXIS_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_keep_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_keep_V_1_vld_in)))) then 
                    MBA_AXIS_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_vld_out))) then 
                                        MBA_AXIS_V_last_V_1_sel_rd <= not(MBA_AXIS_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_ack_out)))) then 
                    MBA_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_vld_in)))) then 
                    MBA_AXIS_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_last_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_last_V_1_vld_in)))) then 
                    MBA_AXIS_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_vld_out))) then 
                                        MBA_AXIS_V_strb_V_1_sel_rd <= not(MBA_AXIS_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_ack_out)))) then 
                    MBA_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_vld_in)))) then 
                    MBA_AXIS_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_strb_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_strb_V_1_vld_in)))) then 
                    MBA_AXIS_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBA_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_vld_out))) then 
                                        MBA_AXIS_V_user_V_1_sel_rd <= not(MBA_AXIS_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBA_AXIS_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBA_AXIS_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_ack_out)))) then 
                    MBA_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_vld_in)))) then 
                    MBA_AXIS_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBA_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_vld_in))) and (ap_const_lv2_3 = MBA_AXIS_V_user_V_1_state)) or ((ap_const_lv2_1 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = MBA_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MBA_AXIS_V_user_V_1_vld_in)))) then 
                    MBA_AXIS_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    MBA_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_vld_out))) then 
                                        MBW_AXIS_V_data_V_1_sel_rd <= not(MBW_AXIS_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_vld_in))) then 
                                        MBW_AXIS_V_data_V_1_sel_wr <= not(MBW_AXIS_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_ack_out)))) then 
                    MBW_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_vld_in)))) then 
                    MBW_AXIS_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_data_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_data_V_1_vld_in)))) then 
                    MBW_AXIS_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_vld_out))) then 
                                        MBW_AXIS_V_dest_V_1_sel_rd <= not(MBW_AXIS_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_ack_out)))) then 
                    MBW_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_vld_in)))) then 
                    MBW_AXIS_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_dest_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_dest_V_1_vld_in)))) then 
                    MBW_AXIS_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_vld_out))) then 
                                        MBW_AXIS_V_id_V_1_sel_rd <= not(MBW_AXIS_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_ack_out)))) then 
                    MBW_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_vld_in)))) then 
                    MBW_AXIS_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_id_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_id_V_1_vld_in)))) then 
                    MBW_AXIS_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_vld_out))) then 
                                        MBW_AXIS_V_keep_V_1_sel_rd <= not(MBW_AXIS_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_ack_out)))) then 
                    MBW_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_vld_in)))) then 
                    MBW_AXIS_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_keep_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_keep_V_1_vld_in)))) then 
                    MBW_AXIS_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_vld_out))) then 
                                        MBW_AXIS_V_last_V_1_sel_rd <= not(MBW_AXIS_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_ack_out)))) then 
                    MBW_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_vld_in)))) then 
                    MBW_AXIS_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_last_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_last_V_1_vld_in)))) then 
                    MBW_AXIS_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_vld_out))) then 
                                        MBW_AXIS_V_strb_V_1_sel_rd <= not(MBW_AXIS_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_ack_out)))) then 
                    MBW_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_vld_in)))) then 
                    MBW_AXIS_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_strb_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_strb_V_1_vld_in)))) then 
                    MBW_AXIS_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MBW_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_vld_out))) then 
                                        MBW_AXIS_V_user_V_1_sel_rd <= not(MBW_AXIS_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MBW_AXIS_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MBW_AXIS_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_ack_out)))) then 
                    MBW_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_vld_in)))) then 
                    MBW_AXIS_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MBW_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_vld_in))) and (ap_const_lv2_3 = MBW_AXIS_V_user_V_1_state)) or ((ap_const_lv2_1 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = MBW_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MBW_AXIS_V_user_V_1_vld_in)))) then 
                    MBW_AXIS_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    MBW_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_vld_out))) then 
                                        MRI_AXIS_V_data_V_1_sel_rd <= not(MRI_AXIS_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_vld_in))) then 
                                        MRI_AXIS_V_data_V_1_sel_wr <= not(MRI_AXIS_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_ack_out)))) then 
                    MRI_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_vld_in)))) then 
                    MRI_AXIS_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_data_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_data_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_data_V_1_vld_in)))) then 
                    MRI_AXIS_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_vld_out))) then 
                                        MRI_AXIS_V_dest_V_1_sel_rd <= not(MRI_AXIS_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_ack_out)))) then 
                    MRI_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_vld_in)))) then 
                    MRI_AXIS_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_dest_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_dest_V_1_vld_in)))) then 
                    MRI_AXIS_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_vld_out))) then 
                                        MRI_AXIS_V_id_V_1_sel_rd <= not(MRI_AXIS_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_ack_out)))) then 
                    MRI_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_vld_in)))) then 
                    MRI_AXIS_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_id_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_id_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_id_V_1_vld_in)))) then 
                    MRI_AXIS_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_vld_out))) then 
                                        MRI_AXIS_V_keep_V_1_sel_rd <= not(MRI_AXIS_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_ack_out)))) then 
                    MRI_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_vld_in)))) then 
                    MRI_AXIS_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_keep_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_keep_V_1_vld_in)))) then 
                    MRI_AXIS_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_vld_out))) then 
                                        MRI_AXIS_V_last_V_1_sel_rd <= not(MRI_AXIS_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_ack_out)))) then 
                    MRI_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_vld_in)))) then 
                    MRI_AXIS_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_last_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_last_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_last_V_1_vld_in)))) then 
                    MRI_AXIS_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_vld_out))) then 
                                        MRI_AXIS_V_strb_V_1_sel_rd <= not(MRI_AXIS_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_ack_out)))) then 
                    MRI_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_vld_in)))) then 
                    MRI_AXIS_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_strb_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_strb_V_1_vld_in)))) then 
                    MRI_AXIS_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = MRI_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_vld_out))) then 
                                        MRI_AXIS_V_user_V_1_sel_rd <= not(MRI_AXIS_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    MRI_AXIS_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MRI_AXIS_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_ack_out)))) then 
                    MRI_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_vld_in)))) then 
                    MRI_AXIS_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = MRI_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_vld_in))) and (ap_const_lv2_3 = MRI_AXIS_V_user_V_1_state)) or ((ap_const_lv2_1 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = MRI_AXIS_V_user_V_1_state) and (ap_const_logic_1 = MRI_AXIS_V_user_V_1_vld_in)))) then 
                    MRI_AXIS_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    MRI_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    SLI_AXIS_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                SLI_AXIS_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = SLI_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_vld_out))) then 
                                        SLI_AXIS_V_data_V_0_sel_rd <= not(SLI_AXIS_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    SLI_AXIS_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                SLI_AXIS_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = SLI_AXIS_V_data_V_0_ack_in) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_vld_in))) then 
                                        SLI_AXIS_V_data_V_0_sel_wr <= not(SLI_AXIS_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    SLI_AXIS_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                SLI_AXIS_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_ack_out)))) then 
                    SLI_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_vld_in)))) then 
                    SLI_AXIS_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = SLI_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_vld_in))) and (ap_const_lv2_3 = SLI_AXIS_V_data_V_0_state)) or ((ap_const_lv2_1 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = SLI_AXIS_V_data_V_0_state) and (ap_const_logic_1 = SLI_AXIS_V_data_V_0_vld_in)))) then 
                    SLI_AXIS_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    SLI_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    SLI_AXIS_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                SLI_AXIS_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_ack_out)))) then 
                    SLI_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = SLI_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_vld_in)))) then 
                    SLI_AXIS_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = SLI_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = SLI_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = SLI_AXIS_V_dest_V_0_state)) or ((ap_const_lv2_1 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = SLI_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = SLI_AXIS_V_dest_V_0_vld_in)))) then 
                    SLI_AXIS_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    SLI_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    STA_AXIS_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STA_AXIS_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = STA_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_vld_out))) then 
                                        STA_AXIS_V_data_V_0_sel_rd <= not(STA_AXIS_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    STA_AXIS_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STA_AXIS_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = STA_AXIS_V_data_V_0_ack_in) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_vld_in))) then 
                                        STA_AXIS_V_data_V_0_sel_wr <= not(STA_AXIS_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    STA_AXIS_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STA_AXIS_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_ack_out)))) then 
                    STA_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_vld_in)))) then 
                    STA_AXIS_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = STA_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_vld_in))) and (ap_const_lv2_3 = STA_AXIS_V_data_V_0_state)) or ((ap_const_lv2_1 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = STA_AXIS_V_data_V_0_state) and (ap_const_logic_1 = STA_AXIS_V_data_V_0_vld_in)))) then 
                    STA_AXIS_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    STA_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    STA_AXIS_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STA_AXIS_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_ack_out)))) then 
                    STA_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STA_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_vld_in)))) then 
                    STA_AXIS_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = STA_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = STA_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = STA_AXIS_V_dest_V_0_state)) or ((ap_const_lv2_1 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = STA_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = STA_AXIS_V_dest_V_0_vld_in)))) then 
                    STA_AXIS_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    STA_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    STW_AXIS_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STW_AXIS_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = STW_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_vld_out))) then 
                                        STW_AXIS_V_data_V_0_sel_rd <= not(STW_AXIS_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    STW_AXIS_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STW_AXIS_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = STW_AXIS_V_data_V_0_ack_in) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_vld_in))) then 
                                        STW_AXIS_V_data_V_0_sel_wr <= not(STW_AXIS_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    STW_AXIS_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STW_AXIS_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_ack_out)))) then 
                    STW_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_vld_in)))) then 
                    STW_AXIS_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = STW_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_vld_in))) and (ap_const_lv2_3 = STW_AXIS_V_data_V_0_state)) or ((ap_const_lv2_1 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = STW_AXIS_V_data_V_0_state) and (ap_const_logic_1 = STW_AXIS_V_data_V_0_vld_in)))) then 
                    STW_AXIS_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    STW_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    STW_AXIS_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                STW_AXIS_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_ack_out)))) then 
                    STW_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = STW_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_vld_in)))) then 
                    STW_AXIS_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = STW_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = STW_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = STW_AXIS_V_dest_V_0_state)) or ((ap_const_lv2_1 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = STW_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = STW_AXIS_V_dest_V_0_vld_in)))) then 
                    STW_AXIS_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    STW_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MBA_AXIS_V_data_V_1_load_A)) then
                MBA_AXIS_V_data_V_1_payload_A <= res_ba_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MBA_AXIS_V_data_V_1_load_B)) then
                MBA_AXIS_V_data_V_1_payload_B <= res_ba_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MBW_AXIS_V_data_V_1_load_A)) then
                MBW_AXIS_V_data_V_1_payload_A <= STW_AXIS_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MBW_AXIS_V_data_V_1_load_B)) then
                MBW_AXIS_V_data_V_1_payload_B <= STW_AXIS_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MRI_AXIS_V_data_V_1_load_A)) then
                MRI_AXIS_V_data_V_1_payload_A <= SLI_AXIS_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = MRI_AXIS_V_data_V_1_load_B)) then
                MRI_AXIS_V_data_V_1_payload_B <= SLI_AXIS_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = SLI_AXIS_V_data_V_0_load_A)) then
                SLI_AXIS_V_data_V_0_payload_A <= SLI_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = SLI_AXIS_V_data_V_0_load_B)) then
                SLI_AXIS_V_data_V_0_payload_B <= SLI_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = STA_AXIS_V_data_V_0_load_A)) then
                STA_AXIS_V_data_V_0_payload_A <= STA_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = STA_AXIS_V_data_V_0_load_B)) then
                STA_AXIS_V_data_V_0_payload_B <= STA_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = STW_AXIS_V_data_V_0_load_A)) then
                STW_AXIS_V_data_V_0_payload_A <= STW_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = STW_AXIS_V_data_V_0_load_B)) then
                STW_AXIS_V_data_V_0_payload_B <= STW_AXIS_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, MRI_AXIS_V_data_V_1_ack_in, MRI_AXIS_V_data_V_1_state, MRI_AXIS_V_keep_V_1_ack_in, MRI_AXIS_V_keep_V_1_state, MRI_AXIS_V_strb_V_1_ack_in, MRI_AXIS_V_strb_V_1_state, MRI_AXIS_V_user_V_1_ack_in, MRI_AXIS_V_user_V_1_state, MRI_AXIS_V_last_V_1_ack_in, MRI_AXIS_V_last_V_1_state, MRI_AXIS_V_id_V_1_ack_in, MRI_AXIS_V_id_V_1_state, MRI_AXIS_V_dest_V_1_ack_in, MRI_AXIS_V_dest_V_1_state, STW_AXIS_V_data_V_0_vld_out, MBW_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_data_V_1_state, MBW_AXIS_V_keep_V_1_ack_in, MBW_AXIS_V_keep_V_1_state, MBW_AXIS_V_strb_V_1_ack_in, MBW_AXIS_V_strb_V_1_state, MBW_AXIS_V_user_V_1_ack_in, MBW_AXIS_V_user_V_1_state, MBW_AXIS_V_last_V_1_ack_in, MBW_AXIS_V_last_V_1_state, MBW_AXIS_V_id_V_1_ack_in, MBW_AXIS_V_id_V_1_state, MBW_AXIS_V_dest_V_1_ack_in, MBW_AXIS_V_dest_V_1_state, STA_AXIS_V_data_V_0_vld_out, MBA_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_data_V_1_state, MBA_AXIS_V_keep_V_1_ack_in, MBA_AXIS_V_keep_V_1_state, MBA_AXIS_V_strb_V_1_ack_in, MBA_AXIS_V_strb_V_1_state, MBA_AXIS_V_user_V_1_ack_in, MBA_AXIS_V_user_V_1_state, MBA_AXIS_V_last_V_1_ack_in, MBA_AXIS_V_last_V_1_state, MBA_AXIS_V_id_V_1_ack_in, MBA_AXIS_V_id_V_1_state, MBA_AXIS_V_dest_V_1_ack_in, MBA_AXIS_V_dest_V_1_state, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (MRI_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    MBA_AXIS_TDATA <= MBA_AXIS_V_data_V_1_data_out;

    MBA_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, MBA_AXIS_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            MBA_AXIS_TDATA_blk_n <= MBA_AXIS_V_data_V_1_state(1);
        else 
            MBA_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MBA_AXIS_TDEST <= MBA_AXIS_V_dest_V_1_data_out;
    MBA_AXIS_TID <= MBA_AXIS_V_id_V_1_data_out;
    MBA_AXIS_TKEEP <= MBA_AXIS_V_keep_V_1_data_out;
    MBA_AXIS_TLAST <= MBA_AXIS_V_last_V_1_data_out;
    MBA_AXIS_TSTRB <= MBA_AXIS_V_strb_V_1_data_out;
    MBA_AXIS_TUSER <= MBA_AXIS_V_user_V_1_data_out;
    MBA_AXIS_TVALID <= MBA_AXIS_V_dest_V_1_state(0);
    MBA_AXIS_V_data_V_1_ack_in <= MBA_AXIS_V_data_V_1_state(1);
    MBA_AXIS_V_data_V_1_ack_out <= MBA_AXIS_TREADY;

    MBA_AXIS_V_data_V_1_data_out_assign_proc : process(MBA_AXIS_V_data_V_1_payload_A, MBA_AXIS_V_data_V_1_payload_B, MBA_AXIS_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = MBA_AXIS_V_data_V_1_sel)) then 
            MBA_AXIS_V_data_V_1_data_out <= MBA_AXIS_V_data_V_1_payload_B;
        else 
            MBA_AXIS_V_data_V_1_data_out <= MBA_AXIS_V_data_V_1_payload_A;
        end if; 
    end process;

    MBA_AXIS_V_data_V_1_load_A <= (not(MBA_AXIS_V_data_V_1_sel_wr) and MBA_AXIS_V_data_V_1_state_cmp_full);
    MBA_AXIS_V_data_V_1_load_B <= (MBA_AXIS_V_data_V_1_state_cmp_full and MBA_AXIS_V_data_V_1_sel_wr);
    MBA_AXIS_V_data_V_1_sel <= MBA_AXIS_V_data_V_1_sel_rd;
    MBA_AXIS_V_data_V_1_state_cmp_full <= '0' when (MBA_AXIS_V_data_V_1_state = ap_const_lv2_1) else '1';

    MBA_AXIS_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_data_V_1_vld_out <= MBA_AXIS_V_data_V_1_state(0);
    MBA_AXIS_V_dest_V_1_ack_in <= MBA_AXIS_V_dest_V_1_state(1);
    MBA_AXIS_V_dest_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_dest_V_1_data_out <= ap_const_lv5_0;
    MBA_AXIS_V_dest_V_1_sel <= MBA_AXIS_V_dest_V_1_sel_rd;

    MBA_AXIS_V_dest_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_dest_V_1_vld_out <= MBA_AXIS_V_dest_V_1_state(0);
    MBA_AXIS_V_id_V_1_ack_in <= MBA_AXIS_V_id_V_1_state(1);
    MBA_AXIS_V_id_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_id_V_1_data_out <= ap_const_lv5_0;
    MBA_AXIS_V_id_V_1_sel <= MBA_AXIS_V_id_V_1_sel_rd;

    MBA_AXIS_V_id_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_id_V_1_vld_out <= MBA_AXIS_V_id_V_1_state(0);
    MBA_AXIS_V_keep_V_1_ack_in <= MBA_AXIS_V_keep_V_1_state(1);
    MBA_AXIS_V_keep_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_keep_V_1_data_out <= ap_const_lv2_3;
    MBA_AXIS_V_keep_V_1_sel <= MBA_AXIS_V_keep_V_1_sel_rd;

    MBA_AXIS_V_keep_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_keep_V_1_vld_out <= MBA_AXIS_V_keep_V_1_state(0);
    MBA_AXIS_V_last_V_1_ack_in <= MBA_AXIS_V_last_V_1_state(1);
    MBA_AXIS_V_last_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_last_V_1_data_out <= ap_const_lv1_0;
    MBA_AXIS_V_last_V_1_sel <= MBA_AXIS_V_last_V_1_sel_rd;

    MBA_AXIS_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_last_V_1_vld_out <= MBA_AXIS_V_last_V_1_state(0);
    MBA_AXIS_V_strb_V_1_ack_in <= MBA_AXIS_V_strb_V_1_state(1);
    MBA_AXIS_V_strb_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_strb_V_1_data_out <= ap_const_lv2_3;
    MBA_AXIS_V_strb_V_1_sel <= MBA_AXIS_V_strb_V_1_sel_rd;

    MBA_AXIS_V_strb_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_strb_V_1_vld_out <= MBA_AXIS_V_strb_V_1_state(0);
    MBA_AXIS_V_user_V_1_ack_in <= MBA_AXIS_V_user_V_1_state(1);
    MBA_AXIS_V_user_V_1_ack_out <= MBA_AXIS_TREADY;
    MBA_AXIS_V_user_V_1_data_out <= ap_const_lv4_0;
    MBA_AXIS_V_user_V_1_sel <= MBA_AXIS_V_user_V_1_sel_rd;

    MBA_AXIS_V_user_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBA_AXIS_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            MBA_AXIS_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBA_AXIS_V_user_V_1_vld_out <= MBA_AXIS_V_user_V_1_state(0);
    MBW_AXIS_TDATA <= MBW_AXIS_V_data_V_1_data_out;

    MBW_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, MBW_AXIS_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            MBW_AXIS_TDATA_blk_n <= MBW_AXIS_V_data_V_1_state(1);
        else 
            MBW_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MBW_AXIS_TDEST <= MBW_AXIS_V_dest_V_1_data_out;
    MBW_AXIS_TID <= MBW_AXIS_V_id_V_1_data_out;
    MBW_AXIS_TKEEP <= MBW_AXIS_V_keep_V_1_data_out;
    MBW_AXIS_TLAST <= MBW_AXIS_V_last_V_1_data_out;
    MBW_AXIS_TSTRB <= MBW_AXIS_V_strb_V_1_data_out;
    MBW_AXIS_TUSER <= MBW_AXIS_V_user_V_1_data_out;
    MBW_AXIS_TVALID <= MBW_AXIS_V_dest_V_1_state(0);
    MBW_AXIS_V_data_V_1_ack_in <= MBW_AXIS_V_data_V_1_state(1);
    MBW_AXIS_V_data_V_1_ack_out <= MBW_AXIS_TREADY;

    MBW_AXIS_V_data_V_1_data_out_assign_proc : process(MBW_AXIS_V_data_V_1_payload_A, MBW_AXIS_V_data_V_1_payload_B, MBW_AXIS_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = MBW_AXIS_V_data_V_1_sel)) then 
            MBW_AXIS_V_data_V_1_data_out <= MBW_AXIS_V_data_V_1_payload_B;
        else 
            MBW_AXIS_V_data_V_1_data_out <= MBW_AXIS_V_data_V_1_payload_A;
        end if; 
    end process;

    MBW_AXIS_V_data_V_1_load_A <= (not(MBW_AXIS_V_data_V_1_sel_wr) and MBW_AXIS_V_data_V_1_state_cmp_full);
    MBW_AXIS_V_data_V_1_load_B <= (MBW_AXIS_V_data_V_1_state_cmp_full and MBW_AXIS_V_data_V_1_sel_wr);
    MBW_AXIS_V_data_V_1_sel <= MBW_AXIS_V_data_V_1_sel_rd;
    MBW_AXIS_V_data_V_1_state_cmp_full <= '0' when (MBW_AXIS_V_data_V_1_state = ap_const_lv2_1) else '1';

    MBW_AXIS_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_data_V_1_vld_out <= MBW_AXIS_V_data_V_1_state(0);
    MBW_AXIS_V_dest_V_1_ack_in <= MBW_AXIS_V_dest_V_1_state(1);
    MBW_AXIS_V_dest_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_dest_V_1_data_out <= ap_const_lv5_0;
    MBW_AXIS_V_dest_V_1_sel <= MBW_AXIS_V_dest_V_1_sel_rd;

    MBW_AXIS_V_dest_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_dest_V_1_vld_out <= MBW_AXIS_V_dest_V_1_state(0);
    MBW_AXIS_V_id_V_1_ack_in <= MBW_AXIS_V_id_V_1_state(1);
    MBW_AXIS_V_id_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_id_V_1_data_out <= ap_const_lv5_0;
    MBW_AXIS_V_id_V_1_sel <= MBW_AXIS_V_id_V_1_sel_rd;

    MBW_AXIS_V_id_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_id_V_1_vld_out <= MBW_AXIS_V_id_V_1_state(0);
    MBW_AXIS_V_keep_V_1_ack_in <= MBW_AXIS_V_keep_V_1_state(1);
    MBW_AXIS_V_keep_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_keep_V_1_data_out <= ap_const_lv1_1;
    MBW_AXIS_V_keep_V_1_sel <= MBW_AXIS_V_keep_V_1_sel_rd;

    MBW_AXIS_V_keep_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_keep_V_1_vld_out <= MBW_AXIS_V_keep_V_1_state(0);
    MBW_AXIS_V_last_V_1_ack_in <= MBW_AXIS_V_last_V_1_state(1);
    MBW_AXIS_V_last_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_last_V_1_data_out <= ap_const_lv1_0;
    MBW_AXIS_V_last_V_1_sel <= MBW_AXIS_V_last_V_1_sel_rd;

    MBW_AXIS_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_last_V_1_vld_out <= MBW_AXIS_V_last_V_1_state(0);
    MBW_AXIS_V_strb_V_1_ack_in <= MBW_AXIS_V_strb_V_1_state(1);
    MBW_AXIS_V_strb_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_strb_V_1_data_out <= ap_const_lv1_1;
    MBW_AXIS_V_strb_V_1_sel <= MBW_AXIS_V_strb_V_1_sel_rd;

    MBW_AXIS_V_strb_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_strb_V_1_vld_out <= MBW_AXIS_V_strb_V_1_state(0);
    MBW_AXIS_V_user_V_1_ack_in <= MBW_AXIS_V_user_V_1_state(1);
    MBW_AXIS_V_user_V_1_ack_out <= MBW_AXIS_TREADY;
    MBW_AXIS_V_user_V_1_data_out <= ap_const_lv4_0;
    MBW_AXIS_V_user_V_1_sel <= MBW_AXIS_V_user_V_1_sel_rd;

    MBW_AXIS_V_user_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MBW_AXIS_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            MBW_AXIS_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MBW_AXIS_V_user_V_1_vld_out <= MBW_AXIS_V_user_V_1_state(0);
    MRI_AXIS_TDATA <= MRI_AXIS_V_data_V_1_data_out;

    MRI_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, MRI_AXIS_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            MRI_AXIS_TDATA_blk_n <= MRI_AXIS_V_data_V_1_state(1);
        else 
            MRI_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MRI_AXIS_TDEST <= MRI_AXIS_V_dest_V_1_data_out;
    MRI_AXIS_TID <= MRI_AXIS_V_id_V_1_data_out;
    MRI_AXIS_TKEEP <= MRI_AXIS_V_keep_V_1_data_out;
    MRI_AXIS_TLAST <= MRI_AXIS_V_last_V_1_data_out;
    MRI_AXIS_TSTRB <= MRI_AXIS_V_strb_V_1_data_out;
    MRI_AXIS_TUSER <= MRI_AXIS_V_user_V_1_data_out;
    MRI_AXIS_TVALID <= MRI_AXIS_V_dest_V_1_state(0);
    MRI_AXIS_V_data_V_1_ack_in <= MRI_AXIS_V_data_V_1_state(1);
    MRI_AXIS_V_data_V_1_ack_out <= MRI_AXIS_TREADY;

    MRI_AXIS_V_data_V_1_data_out_assign_proc : process(MRI_AXIS_V_data_V_1_payload_A, MRI_AXIS_V_data_V_1_payload_B, MRI_AXIS_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = MRI_AXIS_V_data_V_1_sel)) then 
            MRI_AXIS_V_data_V_1_data_out <= MRI_AXIS_V_data_V_1_payload_B;
        else 
            MRI_AXIS_V_data_V_1_data_out <= MRI_AXIS_V_data_V_1_payload_A;
        end if; 
    end process;

    MRI_AXIS_V_data_V_1_load_A <= (not(MRI_AXIS_V_data_V_1_sel_wr) and MRI_AXIS_V_data_V_1_state_cmp_full);
    MRI_AXIS_V_data_V_1_load_B <= (MRI_AXIS_V_data_V_1_state_cmp_full and MRI_AXIS_V_data_V_1_sel_wr);
    MRI_AXIS_V_data_V_1_sel <= MRI_AXIS_V_data_V_1_sel_rd;
    MRI_AXIS_V_data_V_1_state_cmp_full <= '0' when (MRI_AXIS_V_data_V_1_state = ap_const_lv2_1) else '1';

    MRI_AXIS_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_data_V_1_vld_out <= MRI_AXIS_V_data_V_1_state(0);
    MRI_AXIS_V_dest_V_1_ack_in <= MRI_AXIS_V_dest_V_1_state(1);
    MRI_AXIS_V_dest_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_dest_V_1_data_out <= ap_const_lv5_0;
    MRI_AXIS_V_dest_V_1_sel <= MRI_AXIS_V_dest_V_1_sel_rd;

    MRI_AXIS_V_dest_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_dest_V_1_vld_out <= MRI_AXIS_V_dest_V_1_state(0);
    MRI_AXIS_V_id_V_1_ack_in <= MRI_AXIS_V_id_V_1_state(1);
    MRI_AXIS_V_id_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_id_V_1_data_out <= ap_const_lv5_0;
    MRI_AXIS_V_id_V_1_sel <= MRI_AXIS_V_id_V_1_sel_rd;

    MRI_AXIS_V_id_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_id_V_1_vld_out <= MRI_AXIS_V_id_V_1_state(0);
    MRI_AXIS_V_keep_V_1_ack_in <= MRI_AXIS_V_keep_V_1_state(1);
    MRI_AXIS_V_keep_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_keep_V_1_data_out <= ap_const_lv1_1;
    MRI_AXIS_V_keep_V_1_sel <= MRI_AXIS_V_keep_V_1_sel_rd;

    MRI_AXIS_V_keep_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_keep_V_1_vld_out <= MRI_AXIS_V_keep_V_1_state(0);
    MRI_AXIS_V_last_V_1_ack_in <= MRI_AXIS_V_last_V_1_state(1);
    MRI_AXIS_V_last_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_last_V_1_data_out <= ap_const_lv1_0;
    MRI_AXIS_V_last_V_1_sel <= MRI_AXIS_V_last_V_1_sel_rd;

    MRI_AXIS_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_last_V_1_vld_out <= MRI_AXIS_V_last_V_1_state(0);
    MRI_AXIS_V_strb_V_1_ack_in <= MRI_AXIS_V_strb_V_1_state(1);
    MRI_AXIS_V_strb_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_strb_V_1_data_out <= ap_const_lv1_1;
    MRI_AXIS_V_strb_V_1_sel <= MRI_AXIS_V_strb_V_1_sel_rd;

    MRI_AXIS_V_strb_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_strb_V_1_vld_out <= MRI_AXIS_V_strb_V_1_state(0);
    MRI_AXIS_V_user_V_1_ack_in <= MRI_AXIS_V_user_V_1_state(1);
    MRI_AXIS_V_user_V_1_ack_out <= MRI_AXIS_TREADY;
    MRI_AXIS_V_user_V_1_data_out <= ap_const_lv4_0;
    MRI_AXIS_V_user_V_1_sel <= MRI_AXIS_V_user_V_1_sel_rd;

    MRI_AXIS_V_user_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MRI_AXIS_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            MRI_AXIS_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MRI_AXIS_V_user_V_1_vld_out <= MRI_AXIS_V_user_V_1_state(0);

    SLI_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_state)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SLI_AXIS_TDATA_blk_n <= SLI_AXIS_V_data_V_0_state(0);
        else 
            SLI_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SLI_AXIS_TREADY <= SLI_AXIS_V_dest_V_0_state(1);
    SLI_AXIS_V_data_V_0_ack_in <= SLI_AXIS_V_data_V_0_state(1);

    SLI_AXIS_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SLI_AXIS_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            SLI_AXIS_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    SLI_AXIS_V_data_V_0_data_out_assign_proc : process(SLI_AXIS_V_data_V_0_payload_A, SLI_AXIS_V_data_V_0_payload_B, SLI_AXIS_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = SLI_AXIS_V_data_V_0_sel)) then 
            SLI_AXIS_V_data_V_0_data_out <= SLI_AXIS_V_data_V_0_payload_B;
        else 
            SLI_AXIS_V_data_V_0_data_out <= SLI_AXIS_V_data_V_0_payload_A;
        end if; 
    end process;

    SLI_AXIS_V_data_V_0_load_A <= (not(SLI_AXIS_V_data_V_0_sel_wr) and SLI_AXIS_V_data_V_0_state_cmp_full);
    SLI_AXIS_V_data_V_0_load_B <= (SLI_AXIS_V_data_V_0_state_cmp_full and SLI_AXIS_V_data_V_0_sel_wr);
    SLI_AXIS_V_data_V_0_sel <= SLI_AXIS_V_data_V_0_sel_rd;
    SLI_AXIS_V_data_V_0_state_cmp_full <= '0' when (SLI_AXIS_V_data_V_0_state = ap_const_lv2_1) else '1';
    SLI_AXIS_V_data_V_0_vld_in <= SLI_AXIS_TVALID;
    SLI_AXIS_V_data_V_0_vld_out <= SLI_AXIS_V_data_V_0_state(0);

    SLI_AXIS_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SLI_AXIS_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            SLI_AXIS_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    SLI_AXIS_V_dest_V_0_vld_in <= SLI_AXIS_TVALID;

    STA_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, STA_AXIS_V_data_V_0_state)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STA_AXIS_TDATA_blk_n <= STA_AXIS_V_data_V_0_state(0);
        else 
            STA_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    STA_AXIS_TREADY <= STA_AXIS_V_dest_V_0_state(1);
    STA_AXIS_V_data_V_0_ack_in <= STA_AXIS_V_data_V_0_state(1);

    STA_AXIS_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STA_AXIS_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            STA_AXIS_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    STA_AXIS_V_data_V_0_data_out_assign_proc : process(STA_AXIS_V_data_V_0_payload_A, STA_AXIS_V_data_V_0_payload_B, STA_AXIS_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = STA_AXIS_V_data_V_0_sel)) then 
            STA_AXIS_V_data_V_0_data_out <= STA_AXIS_V_data_V_0_payload_B;
        else 
            STA_AXIS_V_data_V_0_data_out <= STA_AXIS_V_data_V_0_payload_A;
        end if; 
    end process;

    STA_AXIS_V_data_V_0_load_A <= (not(STA_AXIS_V_data_V_0_sel_wr) and STA_AXIS_V_data_V_0_state_cmp_full);
    STA_AXIS_V_data_V_0_load_B <= (STA_AXIS_V_data_V_0_state_cmp_full and STA_AXIS_V_data_V_0_sel_wr);
    STA_AXIS_V_data_V_0_sel <= STA_AXIS_V_data_V_0_sel_rd;
    STA_AXIS_V_data_V_0_state_cmp_full <= '0' when (STA_AXIS_V_data_V_0_state = ap_const_lv2_1) else '1';
    STA_AXIS_V_data_V_0_vld_in <= STA_AXIS_TVALID;
    STA_AXIS_V_data_V_0_vld_out <= STA_AXIS_V_data_V_0_state(0);

    STA_AXIS_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STA_AXIS_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            STA_AXIS_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    STA_AXIS_V_dest_V_0_vld_in <= STA_AXIS_TVALID;

    STW_AXIS_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, STW_AXIS_V_data_V_0_state)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STW_AXIS_TDATA_blk_n <= STW_AXIS_V_data_V_0_state(0);
        else 
            STW_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    STW_AXIS_TREADY <= STW_AXIS_V_dest_V_0_state(1);
    STW_AXIS_V_data_V_0_ack_in <= STW_AXIS_V_data_V_0_state(1);

    STW_AXIS_V_data_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STW_AXIS_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            STW_AXIS_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    STW_AXIS_V_data_V_0_data_out_assign_proc : process(STW_AXIS_V_data_V_0_payload_A, STW_AXIS_V_data_V_0_payload_B, STW_AXIS_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = STW_AXIS_V_data_V_0_sel)) then 
            STW_AXIS_V_data_V_0_data_out <= STW_AXIS_V_data_V_0_payload_B;
        else 
            STW_AXIS_V_data_V_0_data_out <= STW_AXIS_V_data_V_0_payload_A;
        end if; 
    end process;

    STW_AXIS_V_data_V_0_load_A <= (not(STW_AXIS_V_data_V_0_sel_wr) and STW_AXIS_V_data_V_0_state_cmp_full);
    STW_AXIS_V_data_V_0_load_B <= (STW_AXIS_V_data_V_0_state_cmp_full and STW_AXIS_V_data_V_0_sel_wr);
    STW_AXIS_V_data_V_0_sel <= STW_AXIS_V_data_V_0_sel_rd;
    STW_AXIS_V_data_V_0_state_cmp_full <= '0' when (STW_AXIS_V_data_V_0_state = ap_const_lv2_1) else '1';
    STW_AXIS_V_data_V_0_vld_in <= STW_AXIS_TVALID;
    STW_AXIS_V_data_V_0_vld_out <= STW_AXIS_V_data_V_0_state(0);

    STW_AXIS_V_dest_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STW_AXIS_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            STW_AXIS_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    STW_AXIS_V_dest_V_0_vld_in <= STW_AXIS_TVALID;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, SLI_AXIS_V_data_V_0_vld_out, STW_AXIS_V_data_V_0_vld_out, STA_AXIS_V_data_V_0_vld_out)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = STW_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = SLI_AXIS_V_data_V_0_vld_out) or (ap_const_logic_0 = STA_AXIS_V_data_V_0_vld_out));
    end process;


    ap_block_state1_io_assign_proc : process(MRI_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_data_V_1_ack_in)
    begin
                ap_block_state1_io <= ((ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in));
    end process;


    ap_block_state2_assign_proc : process(MRI_AXIS_V_data_V_1_ack_in, MRI_AXIS_V_keep_V_1_ack_in, MRI_AXIS_V_strb_V_1_ack_in, MRI_AXIS_V_user_V_1_ack_in, MRI_AXIS_V_last_V_1_ack_in, MRI_AXIS_V_id_V_1_ack_in, MRI_AXIS_V_dest_V_1_ack_in, MBW_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_keep_V_1_ack_in, MBW_AXIS_V_strb_V_1_ack_in, MBW_AXIS_V_user_V_1_ack_in, MBW_AXIS_V_last_V_1_ack_in, MBW_AXIS_V_id_V_1_ack_in, MBW_AXIS_V_dest_V_1_ack_in, MBA_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_keep_V_1_ack_in, MBA_AXIS_V_strb_V_1_ack_in, MBA_AXIS_V_user_V_1_ack_in, MBA_AXIS_V_last_V_1_ack_in, MBA_AXIS_V_id_V_1_ack_in, MBA_AXIS_V_dest_V_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in));
    end process;


    ap_block_state2_io_assign_proc : process(MRI_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_data_V_1_ack_in)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(MRI_AXIS_V_data_V_1_ack_in, MRI_AXIS_V_data_V_1_state, MRI_AXIS_V_keep_V_1_ack_in, MRI_AXIS_V_keep_V_1_state, MRI_AXIS_V_strb_V_1_ack_in, MRI_AXIS_V_strb_V_1_state, MRI_AXIS_V_user_V_1_ack_in, MRI_AXIS_V_user_V_1_state, MRI_AXIS_V_last_V_1_ack_in, MRI_AXIS_V_last_V_1_state, MRI_AXIS_V_id_V_1_ack_in, MRI_AXIS_V_id_V_1_state, MRI_AXIS_V_dest_V_1_ack_in, MRI_AXIS_V_dest_V_1_state, MBW_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_data_V_1_state, MBW_AXIS_V_keep_V_1_ack_in, MBW_AXIS_V_keep_V_1_state, MBW_AXIS_V_strb_V_1_ack_in, MBW_AXIS_V_strb_V_1_state, MBW_AXIS_V_user_V_1_ack_in, MBW_AXIS_V_user_V_1_state, MBW_AXIS_V_last_V_1_ack_in, MBW_AXIS_V_last_V_1_state, MBW_AXIS_V_id_V_1_ack_in, MBW_AXIS_V_id_V_1_state, MBW_AXIS_V_dest_V_1_ack_in, MBW_AXIS_V_dest_V_1_state, MBA_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_data_V_1_state, MBA_AXIS_V_keep_V_1_ack_in, MBA_AXIS_V_keep_V_1_state, MBA_AXIS_V_strb_V_1_ack_in, MBA_AXIS_V_strb_V_1_state, MBA_AXIS_V_user_V_1_ack_in, MBA_AXIS_V_user_V_1_state, MBA_AXIS_V_last_V_1_ack_in, MBA_AXIS_V_last_V_1_state, MBA_AXIS_V_id_V_1_ack_in, MBA_AXIS_V_id_V_1_state, MBA_AXIS_V_dest_V_1_ack_in, MBA_AXIS_V_dest_V_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (MRI_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(MRI_AXIS_V_data_V_1_ack_in, MRI_AXIS_V_data_V_1_state, MRI_AXIS_V_keep_V_1_ack_in, MRI_AXIS_V_keep_V_1_state, MRI_AXIS_V_strb_V_1_ack_in, MRI_AXIS_V_strb_V_1_state, MRI_AXIS_V_user_V_1_ack_in, MRI_AXIS_V_user_V_1_state, MRI_AXIS_V_last_V_1_ack_in, MRI_AXIS_V_last_V_1_state, MRI_AXIS_V_id_V_1_ack_in, MRI_AXIS_V_id_V_1_state, MRI_AXIS_V_dest_V_1_ack_in, MRI_AXIS_V_dest_V_1_state, MBW_AXIS_V_data_V_1_ack_in, MBW_AXIS_V_data_V_1_state, MBW_AXIS_V_keep_V_1_ack_in, MBW_AXIS_V_keep_V_1_state, MBW_AXIS_V_strb_V_1_ack_in, MBW_AXIS_V_strb_V_1_state, MBW_AXIS_V_user_V_1_ack_in, MBW_AXIS_V_user_V_1_state, MBW_AXIS_V_last_V_1_ack_in, MBW_AXIS_V_last_V_1_state, MBW_AXIS_V_id_V_1_ack_in, MBW_AXIS_V_id_V_1_state, MBW_AXIS_V_dest_V_1_ack_in, MBW_AXIS_V_dest_V_1_state, MBA_AXIS_V_data_V_1_ack_in, MBA_AXIS_V_data_V_1_state, MBA_AXIS_V_keep_V_1_ack_in, MBA_AXIS_V_keep_V_1_state, MBA_AXIS_V_strb_V_1_ack_in, MBA_AXIS_V_strb_V_1_state, MBA_AXIS_V_user_V_1_ack_in, MBA_AXIS_V_user_V_1_state, MBA_AXIS_V_last_V_1_ack_in, MBA_AXIS_V_last_V_1_state, MBA_AXIS_V_id_V_1_ack_in, MBA_AXIS_V_id_V_1_state, MBA_AXIS_V_dest_V_1_ack_in, MBA_AXIS_V_dest_V_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = MRI_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MRI_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBA_AXIS_V_data_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = MBW_AXIS_V_data_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io))) and (MRI_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MRI_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBA_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_dest_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_id_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_last_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_user_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_strb_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_keep_V_1_state(0) = ap_const_logic_0) and (MBW_AXIS_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    res_ba_fu_325_p2 <= std_logic_vector(unsigned(STA_AXIS_V_data_V_0_data_out) + unsigned(prod_iw_fu_319_p2));
end behav;
